{"version":3,"sources":["../src/dateFormat.tsx"],"sourcesContent":["import { MenuItem, Stack, SxProps, TextField, styled } from '@mui/material';\nimport * as React from 'react';\n\nexport interface DateFormatPreset {\n  label?: string;\n}\n\nexport type DateStyle = Intl.DateTimeFormatOptions['dateStyle'];\nexport type TimeStyle = Intl.DateTimeFormatOptions['timeStyle'];\n\nconst DEFAULT_DATE_STYLE: DateStyle = 'short';\nconst DEFAULT_TIME_STYLE: TimeStyle = 'short';\n\nexport const DATE_STYLES = new Map<DateStyle, DateFormatPreset>([\n  ['short', { label: 'Short' }],\n  ['medium', { label: 'Medium' }],\n  ['long', { label: 'Long' }],\n  ['full', { label: 'Full' }],\n]);\n\nexport const TIME_STYLES = new Map<TimeStyle, DateFormatPreset>([\n  ['short', { label: 'Short' }],\n  ['medium', { label: 'Medium' }],\n  ['long', { label: 'Long' }],\n  ['full', { label: 'Full' }],\n]);\n\nconst DATE_FORMATS = new Map<DateStyle, Intl.DateTimeFormat>(\n  (['short', 'medium', 'long', 'full'] as const).map((dateStyle) => [\n    dateStyle,\n    new Intl.DateTimeFormat(undefined, { dateStyle }),\n  ]),\n);\n\nconst TIME_FORMATS = new Map<DateStyle, Intl.DateTimeFormat>(\n  (['short', 'medium', 'long', 'full'] as const).map((timeStyle) => [\n    timeStyle,\n    new Intl.DateTimeFormat(undefined, { timeStyle }),\n  ]),\n);\n\n// Constructing a demo date whether the time is 12h or 24h.\nconst DEMO_DATE = new Date();\nDEMO_DATE.setHours(13);\nDEMO_DATE.setMinutes(28);\nDEMO_DATE.setSeconds(54);\n\nexport interface DateFormat {\n  kind: 'shorthand';\n  dateStyle?: DateStyle;\n  timeStyle?: TimeStyle;\n}\n\nexport function createFormat(dateFormat?: DateFormat) {\n  if (!dateFormat) {\n    return new Intl.DateTimeFormat(undefined, {});\n  }\n  switch (dateFormat.kind) {\n    case 'shorthand': {\n      const { dateStyle, timeStyle } = dateFormat;\n      return new Intl.DateTimeFormat(undefined, { dateStyle, timeStyle });\n    }\n    default: {\n      return new Intl.DateTimeFormat();\n    }\n  }\n}\n\nconst PrettyDateFormatRoot = styled('span')({});\n\nconst DEFAULT_FORMAT = new Intl.DateTimeFormat();\n\nexport interface FormattedDateProps {\n  format?: Intl.DateTimeFormat;\n  children: Date | number;\n}\n\nexport function FormattedDate({ children, format = DEFAULT_FORMAT }: FormattedDateProps) {\n  const parts = React.useMemo(() => format.formatToParts(children), [children, format]);\n  return (\n    <PrettyDateFormatRoot>\n      {parts.map((part, i) => (\n        <span key={i} className={`date-token-type-${part.type}`}>\n          {part.value}\n        </span>\n      ))}\n    </PrettyDateFormatRoot>\n  );\n}\n\nexport interface DateFormatEditorProps {\n  value?: DateFormat;\n  onChange: (newValue?: DateFormat) => void;\n  disabled?: boolean;\n  sx?: SxProps;\n  label?: string;\n  disableTimeFormat?: boolean;\n}\n\nexport function DateFormatEditor({\n  label,\n  disabled,\n  value,\n  onChange,\n  sx,\n  disableTimeFormat,\n}: DateFormatEditorProps) {\n  return (\n    <Stack sx={sx} gap={1}>\n      <TextField\n        select\n        fullWidth\n        label={label ?? 'Date format'}\n        value={value?.dateStyle || DEFAULT_DATE_STYLE}\n        disabled={disabled}\n        onChange={(event) => {\n          let dateFormat: DateFormat | undefined;\n\n          if (event.target.value) {\n            dateFormat = {\n              kind: 'shorthand',\n              dateStyle: event.target.value as DateStyle,\n              timeStyle: disableTimeFormat ? undefined : value?.timeStyle || DEFAULT_TIME_STYLE,\n            };\n          }\n\n          onChange(dateFormat);\n        }}\n      >\n        {Array.from(DATE_STYLES, ([type, preset]) => (\n          <MenuItem key={type} value={type}>\n            {DATE_FORMATS.get(type)?.format(DEMO_DATE) || preset.label || type}\n          </MenuItem>\n        ))}\n      </TextField>\n      {disableTimeFormat ? null : (\n        <TextField\n          select\n          fullWidth\n          label={label ?? 'Time format'}\n          value={value?.timeStyle || DEFAULT_TIME_STYLE}\n          disabled={disabled}\n          onChange={(event) => {\n            let dateFormat: DateFormat | undefined;\n\n            if (event.target.value) {\n              dateFormat = {\n                kind: 'shorthand',\n                dateStyle: value?.dateStyle || DEFAULT_DATE_STYLE,\n                timeStyle: event.target.value as TimeStyle,\n              };\n            }\n\n            onChange(dateFormat);\n          }}\n        >\n          {Array.from(TIME_STYLES, ([type, preset]) => (\n            <MenuItem key={type} value={type}>\n              {TIME_FORMATS.get(type)?.format(DEMO_DATE) || preset.label || type}\n            </MenuItem>\n          ))}\n        </TextField>\n      )}\n    </Stack>\n  );\n}\n"],"mappings":"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","names":[]}