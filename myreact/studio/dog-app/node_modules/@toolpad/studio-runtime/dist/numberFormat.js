// src/numberFormat.tsx
import * as React from "react";
import { TextField, MenuItem, Stack, styled, Box } from "@mui/material";
var ACCEPTABLE_CURRENCY_REGEX = /^[a-zA-Z]{3}$/;
var CURRENCY_CODES_LIST_HELP_URL = "https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes";
var NUMBER_FORMAT_SCHEMA = {
  anyOf: [
    {
      type: "object",
      properties: {
        kind: {
          type: "string",
          const: "preset"
        },
        preset: {
          type: "string"
        }
      },
      required: ["kind", "preset"]
    },
    {
      type: "object",
      properties: {
        kind: {
          type: "string",
          const: "currency"
        },
        currency: {
          type: "string"
        }
      },
      required: ["kind", "currency"]
    },
    {
      type: "object",
      properties: {
        kind: {
          type: "string",
          const: "custom"
        },
        custom: {
          type: "object",
          properties: {
            compactDisplay: { type: "string", enum: ["short", "long"] },
            notation: {
              type: "string",
              enum: ["standard", "scientific", "engineering", "compact"]
            },
            signDisplay: { type: "string", enum: ["auto", "never", "always", "exceptZero"] },
            unit: { type: "string" },
            unitDisplay: { type: "string", enum: ["short", "long", "narrow"] },
            currencyDisplay: { type: "string" },
            currencySign: { type: "string" }
          },
          required: []
        }
      },
      required: ["kind", "custom"]
    }
  ]
};
var NUMBER_FORMAT_PRESETS = /* @__PURE__ */ new Map([
  [
    "bytes",
    {
      label: "Bytes",
      options: {
        style: "unit",
        maximumSignificantDigits: 3,
        notation: "compact",
        unit: "byte",
        unitDisplay: "narrow"
      }
    }
  ],
  [
    "percent",
    {
      label: "Percent",
      options: {
        style: "percent"
      }
    }
  ]
]);
function createFormat(numberFormat) {
  if (!numberFormat) {
    return new Intl.NumberFormat(void 0, {});
  }
  switch (numberFormat.kind) {
    case "preset": {
      const preset = NUMBER_FORMAT_PRESETS.get(numberFormat.preset);
      return new Intl.NumberFormat(void 0, preset?.options);
    }
    case "custom": {
      return new Intl.NumberFormat(void 0, numberFormat.custom);
    }
    case "currency": {
      const userInput = numberFormat.currency || "USD";
      return new Intl.NumberFormat(void 0, {
        style: "currency",
        currency: ACCEPTABLE_CURRENCY_REGEX.test(userInput) ? userInput : "USD"
      });
    }
    default: {
      return new Intl.NumberFormat();
    }
  }
}
var PrettyNumberFormatRoot = styled("span")({
  "& .number-token-type-currency, & .number-token-type-percentSign": {
    // This makes the currency/percent symbol a bit smaller than the number, but only on larger font sizes
    fontSize: "max(1rem, 0.8em)"
  }
});
var DEFAULT_FORMAT = new Intl.NumberFormat();
function FormattedNumber({ children, format = DEFAULT_FORMAT }) {
  const parts = React.useMemo(() => format.formatToParts(Number(children)), [children, format]);
  return /* @__PURE__ */ React.createElement(PrettyNumberFormatRoot, null, parts.map((part, i) => /* @__PURE__ */ React.createElement("span", { key: i, className: `number-token-type-${part.type}` }, part.value)));
}
function formatNumberOptionValue(numberFormat) {
  if (!numberFormat) {
    return "plain";
  }
  switch (numberFormat.kind) {
    case "preset":
      return ["preset", numberFormat.preset].join(":");
    case "custom":
      return "custom";
    case "currency":
      return "currency";
    default:
      return "plain";
  }
}
function NumberFormatEditor({
  label,
  disabled,
  value,
  onChange,
  sx
}) {
  return /* @__PURE__ */ React.createElement(Stack, { sx, gap: 1 }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      select: true,
      fullWidth: true,
      label: label ?? "Number format",
      value: formatNumberOptionValue(value),
      disabled,
      onChange: (event) => {
        let numberFormat;
        if (event.target.value === "currency") {
          numberFormat = {
            kind: "currency",
            currency: "USD"
          };
        } else if (event.target.value === "custom") {
          numberFormat = {
            kind: "custom",
            custom: {}
          };
        } else if (event.target.value) {
          const [prefix, id] = event.target.value.split(":");
          if (prefix === "preset") {
            numberFormat = {
              kind: "preset",
              preset: id
            };
          }
        }
        onChange(numberFormat);
      }
    },
    /* @__PURE__ */ React.createElement(MenuItem, { value: "plain" }, "Plain"),
    Array.from(NUMBER_FORMAT_PRESETS, ([type, preset]) => /* @__PURE__ */ React.createElement(MenuItem, { key: type, value: `preset:${type}` }, preset.label || type)),
    /* @__PURE__ */ React.createElement(MenuItem, { value: "currency" }, "Currency")
  ), /* @__PURE__ */ React.createElement(Box, { sx: { ml: 1, pl: 1, borderLeft: 1, borderColor: "divider" } }, value?.kind === "currency" ? /* @__PURE__ */ React.createElement(
    TextField,
    {
      fullWidth: true,
      label: "currency code",
      value: value.currency,
      disabled,
      onChange: (event) => {
        onChange({
          ...value,
          kind: "currency",
          currency: event.target.value
        });
      },
      error: !!value.currency && !ACCEPTABLE_CURRENCY_REGEX.test(value.currency),
      helperText: /* @__PURE__ */ React.createElement(React.Fragment, null, "ISO 4217 currency code. See the", " ", /* @__PURE__ */ React.createElement("a", { target: "_blank", href: CURRENCY_CODES_LIST_HELP_URL, rel: "noopener" }, "currency code list"), " ", "for available values.")
    }
  ) : null));
}
export {
  CURRENCY_CODES_LIST_HELP_URL,
  FormattedNumber,
  NUMBER_FORMAT_PRESETS,
  NUMBER_FORMAT_SCHEMA,
  NumberFormatEditor,
  createFormat
};
//# sourceMappingURL=numberFormat.js.map