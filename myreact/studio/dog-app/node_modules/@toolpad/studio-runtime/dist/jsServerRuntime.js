// src/jsServerRuntime.tsx
import * as vm from "vm";
import * as React from "react";
import { errorFrom } from "@toolpad/utils/errors";
function evalExpressionInContext(expression, globalScope = {}) {
  try {
    const value = vm.runInNewContext(expression, globalScope);
    return { value };
  } catch (rawError) {
    return { error: errorFrom(rawError) };
  }
}
function createServerJsRuntime(env) {
  return {
    getEnv() {
      if (env) {
        return env;
      }
      throw new Error(`Env variables are not supported in this context`);
    },
    evaluateExpression: (code, globalScope) => evalExpressionInContext(code, globalScope)
  };
}
function useServerJsRuntime() {
  return React.useMemo(() => {
    const processEnv = {};
    return createServerJsRuntime(processEnv);
  }, []);
}
export {
  createServerJsRuntime,
  useServerJsRuntime
};
//# sourceMappingURL=jsServerRuntime.js.map