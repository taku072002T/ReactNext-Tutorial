{"version":3,"sources":["../src/server.ts"],"sourcesContent":["/// <reference path=\"../public/serverModules.d.ts\" />\n\nimport { TOOLPAD_FUNCTION } from './constants';\nimport {\n  InferParameterType,\n  PaginationMode,\n  PrimitiveValueType,\n  PropValueType,\n  ToolpadDataProviderBase,\n} from './types';\nimport { ServerContext, getServerContext } from './serverRuntime';\n\n/**\n * The runtime configuration for a Toolpad Studio function. Describes the parameters it accepts and their\n * corresponding types.\n */\nexport interface CreateFunctionConfig<C> {\n  parameters: {\n    [K in keyof C]: PrimitiveValueType;\n  };\n}\n\ntype CreateFunctionConfigParameters<\n  C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>,\n> = FunctionResolverParams<C>['parameters'];\n\nexport interface FunctionResolverParams<\n  C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>,\n> {\n  parameters: {\n    [K in keyof C['parameters']]: InferParameterType<C['parameters'][K]>;\n  };\n}\n\nexport interface FunctionResolver<\n  C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>,\n  R,\n> {\n  (params: FunctionResolverParams<C>): Promise<R>;\n}\n\nexport interface ToolpadFunction<\n  C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>,\n  R,\n> extends FunctionResolver<C, R> {\n  [TOOLPAD_FUNCTION]: C;\n}\n\ntype MaybeLegacyParametersDefinition = PropValueType & {\n  typeDef?: PropValueType;\n  defaultValue?: any;\n};\n\n/**\n * @deprecated Directly export a function instead. This will be removed in a future release.\n * See: https://mui.com/toolpad/studio/reference/api/create-function/\n * Use this to define a function that will load the data for a Toolpad query.\n * You can define parameters for the function in the configuration object.\n * These parameters will be available in the Toolpad Studio editor when creating a query and can be bound to page state.\n * The return value of this function will appear as state on the page and can be bound to.\n * @param resolver The function that will load the data for the query.\n * @param config The configuration for the function.\n * override: Config\n */\nexport function createFunction<\n  C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>,\n  R,\n>(resolver: FunctionResolver<C, R>, config?: C) {\n  // TODO: Remove post beta\n  if (config?.parameters) {\n    for (const [name, argType] of Object.entries(config.parameters)) {\n      const maybeLegacyParamtype = argType as MaybeLegacyParametersDefinition;\n      if (maybeLegacyParamtype.typeDef) {\n        console.warn(`Detected deprecated parameter definition for \"${name}\".`);\n        Object.assign(maybeLegacyParamtype, maybeLegacyParamtype.typeDef);\n        if (!('default' in maybeLegacyParamtype)) {\n          maybeLegacyParamtype.default = maybeLegacyParamtype.defaultValue;\n        }\n        delete maybeLegacyParamtype.defaultValue;\n        delete maybeLegacyParamtype.typeDef;\n      }\n    }\n  }\n\n  return Object.assign(resolver, {\n    [TOOLPAD_FUNCTION]: config || { parameters: {} },\n  });\n}\n\n/**\n * @deprecated\n * createQuery is deprecated. Use createFunction instead.\n */\nexport const createQuery = createFunction;\n\nexport type { ServerContext };\n\n/**\n * Interact with the server context of a Toolpad Studio application.\n * This function is only callable from within a Toolpad Studio function.\n *\n * Demos:\n *\n * - [Custom Functions](https://mui.com/toolpad/studio/concepts/custom-functions/#request-context/)\n *\n * API:\n *\n * - [`getContext` API](https://mui.com/toolpad/studio/reference/api/get-context)\n *\n */\nexport function getContext(): ServerContext {\n  const ctx = getServerContext();\n  if (!ctx) {\n    throw new Error('getContext() must be called from within a Toolpad Studio function.');\n  }\n  return ctx;\n}\n\nexport const TOOLPAD_DATA_PROVIDER_MARKER = Symbol.for('TOOLPAD_DATA_PROVIDER_MARKER');\n\nexport interface ToolpadDataProvider<\n  R extends Record<string, unknown>,\n  P extends PaginationMode = 'index',\n> extends ToolpadDataProviderBase<R, P> {\n  [TOOLPAD_DATA_PROVIDER_MARKER]: true;\n}\n\n/**\n * Create a Toolpad Studio data provider. Data providers act as a bridge between Toolpad Studio and your data.\n *\n * Demos:\n *\n * - [Data providers](https://mui.com/toolpad/studio/concepts/data-providers/)\n *\n * API:\n *\n * - [`createDataProvider` API](https://mui.com/toolpad/studio/reference/api/create-data-provider/)\n *\n */\nexport function createDataProvider<\n  R extends Record<string, unknown>,\n  P extends PaginationMode = 'index',\n>(input: ToolpadDataProviderBase<R, P>): ToolpadDataProvider<R, P> {\n  return Object.assign(input, { [TOOLPAD_DATA_PROVIDER_MARKER]: true as const });\n}\n"],"mappings":";;;;;;;;;AAgEO,SAAS,eAGd,UAAkC,QAAY;AAE9C,MAAI,QAAQ,YAAY;AACtB,eAAW,CAAC,MAAM,OAAO,KAAK,OAAO,QAAQ,OAAO,UAAU,GAAG;AAC/D,YAAM,uBAAuB;AAC7B,UAAI,qBAAqB,SAAS;AAChC,gBAAQ,KAAK,iDAAiD,IAAI,IAAI;AACtE,eAAO,OAAO,sBAAsB,qBAAqB,OAAO;AAChE,YAAI,EAAE,aAAa,uBAAuB;AACxC,+BAAqB,UAAU,qBAAqB;AAAA,QACtD;AACA,eAAO,qBAAqB;AAC5B,eAAO,qBAAqB;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AAEA,SAAO,OAAO,OAAO,UAAU;AAAA,IAC7B,CAAC,gBAAgB,GAAG,UAAU,EAAE,YAAY,CAAC,EAAE;AAAA,EACjD,CAAC;AACH;AAMO,IAAM,cAAc;AAiBpB,SAAS,aAA4B;AAC1C,QAAM,MAAM,iBAAiB;AAC7B,MAAI,CAAC,KAAK;AACR,UAAM,IAAI,MAAM,oEAAoE;AAAA,EACtF;AACA,SAAO;AACT;AAEO,IAAM,+BAA+B,OAAO,IAAI,8BAA8B;AAqB9E,SAAS,mBAGd,OAAiE;AACjE,SAAO,OAAO,OAAO,OAAO,EAAE,CAAC,4BAA4B,GAAG,KAAc,CAAC;AAC/E;","names":[]}