{"version":3,"sources":["../src/AppHost.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useNonNullableContext } from '@toolpad/utils/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ToolpadPlan } from './appDom';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: false,\n      networkMode: 'always',\n    },\n    mutations: {\n      networkMode: 'always',\n    },\n  },\n});\n\nexport interface AppHost {\n  isPreview: boolean;\n  isCanvas: boolean;\n  plan: ToolpadPlan;\n}\n\nexport const AppHostContext = React.createContext<AppHost | null>(null);\n\nexport interface AppHostProviderProps extends Partial<AppHost> {\n  children?: React.ReactNode;\n}\n\nexport function AppHostProvider({\n  isPreview = false,\n  isCanvas = false,\n  plan = 'free',\n  children,\n}: AppHostProviderProps) {\n  const appHost = React.useMemo(() => ({ isPreview, isCanvas, plan }), [isPreview, isCanvas, plan]);\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppHostContext.Provider value={appHost}>{children}</AppHostContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nexport function useAppHost() {\n  return useNonNullableContext(AppHostContext);\n}\n"],"mappings":";AAAA,YAAY,WAAW;AACvB,SAAS,6BAA6B;AACtC,SAAS,aAAa,2BAA2B;AAG1C,IAAM,cAAc,IAAI,YAAY;AAAA,EACzC,gBAAgB;AAAA,IACd,SAAS;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,IACf;AAAA,IACA,WAAW;AAAA,MACT,aAAa;AAAA,IACf;AAAA,EACF;AACF,CAAC;AAQM,IAAM,iBAAuB,oBAA8B,IAAI;AAM/D,SAAS,gBAAgB;AAAA,EAC9B,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,OAAO;AAAA,EACP;AACF,GAAyB;AACvB,QAAM,UAAgB,cAAQ,OAAO,EAAE,WAAW,UAAU,KAAK,IAAI,CAAC,WAAW,UAAU,IAAI,CAAC;AAChG,SACE,oCAAC,uBAAoB,QAAQ,eAC3B,oCAAC,eAAe,UAAf,EAAwB,OAAO,WAAU,QAAS,CACrD;AAEJ;AAEO,SAAS,aAAa;AAC3B,SAAO,sBAAsB,cAAc;AAC7C;","names":[]}