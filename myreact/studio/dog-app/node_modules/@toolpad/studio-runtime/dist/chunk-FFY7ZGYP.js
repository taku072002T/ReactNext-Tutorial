import {
  createComponent
} from "./chunk-HD34CWNN.js";
import {
  TOOLPAD_COMPONENT
} from "./chunk-PPWSME3B.js";

// src/runtime.tsx
import * as React from "react";
import { ErrorBoundary } from "react-error-boundary";
import * as ReactIs from "react-is";
import { hasOwnProperty } from "@toolpad/utils/collections";
import { createProvidedContext } from "@toolpad/utils/react";
import { Stack } from "@mui/material";
var ResetNodeErrorsKeyContext = React.createContext(0);
var ResetNodeErrorsKeyProvider = ResetNodeErrorsKeyContext.Provider;
var ComponentsContext = React.createContext(null);
var NodeRuntimeContext = React.createContext({
  nodeId: null,
  nodeName: null
});
var CanvasEventsContext = React.createContext(null);
function NodeRuntimeWrapper({
  nodeId,
  nodeName,
  children,
  NodeError
}) {
  const resetNodeErrorsKey = React.useContext(ResetNodeErrorsKeyContext);
  const ErrorFallback = React.useCallback(
    ({ error }) => /* @__PURE__ */ React.createElement(NodeError, { error }),
    [NodeError]
  );
  const nodeRuntimeValue = React.useMemo(() => ({ nodeId, nodeName }), [nodeId, nodeName]);
  return /* @__PURE__ */ React.createElement(ErrorBoundary, { resetKeys: [resetNodeErrorsKey], fallbackRender: ErrorFallback }, /* @__PURE__ */ React.createElement(NodeRuntimeContext.Provider, { value: nodeRuntimeValue }, children));
}
function useNode() {
  const { nodeId, nodeName } = React.useContext(NodeRuntimeContext);
  const canvasEvents = React.useContext(CanvasEventsContext);
  return React.useMemo(() => {
    if (!nodeId || !canvasEvents) {
      return null;
    }
    const nodeRuntime = {
      nodeId,
      nodeName,
      updateAppDomConstProp: (prop, value) => {
        canvasEvents.emit("propUpdated", {
          nodeId,
          prop,
          value
        });
      },
      updateEditorNodeData: (prop, value) => {
        canvasEvents.emit("editorNodeDataUpdated", {
          nodeId,
          prop,
          value
        });
      }
    };
    return nodeRuntime;
  }, [canvasEvents, nodeId, nodeName]);
}
function Placeholder({ prop, children }) {
  const { nodeId } = React.useContext(NodeRuntimeContext);
  if (!nodeId) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  const count = React.Children.count(children);
  return count > 0 ? /* @__PURE__ */ React.createElement(React.Fragment, null, children) : /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        minHeight: 72,
        minWidth: 200
      },
      "data-toolpad-slot-name": prop,
      "data-toolpad-slot-parent": nodeId,
      "data-toolpad-slot-type": "single"
    }
  );
}
function Slots({ prop, children, hasLayout = false }) {
  const { nodeId } = React.useContext(NodeRuntimeContext);
  if (!nodeId) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  const count = React.Children.count(children);
  if (count <= 0) {
    return /* @__PURE__ */ React.createElement(Placeholder, { prop });
  }
  if (hasLayout) {
    return /* @__PURE__ */ React.createElement(
      Stack,
      {
        direction: "column",
        sx: {
          gap: 1
        },
        "data-toolpad-slot-name": prop,
        "data-toolpad-slot-parent": nodeId,
        "data-toolpad-slot-type": "layout"
      },
      children
    );
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
}
function isToolpadComponent(maybeComponent) {
  if (!ReactIs.isValidElementType(maybeComponent) || typeof maybeComponent === "string" || !hasOwnProperty(maybeComponent, TOOLPAD_COMPONENT)) {
    return false;
  }
  return true;
}
function getArgTypeDefaultValue(argType) {
  return argType.default ?? argType.defaultValue ?? void 0;
}
function createToolpadComponentThatThrows(error) {
  return createComponent(() => {
    throw error;
  });
}
var [useComponents, ComponentsContextProvider] = createProvidedContext("Components");
function useComponent(id) {
  const components = useComponents();
  return React.useMemo(() => {
    return components?.[id] ?? createToolpadComponentThatThrows(new Error(`Can't find component for "${id}"`));
  }, [components, id]);
}
var DEFAULT_DATA_PROVIDER_HOOK = (id) => ({
  dataProvider: null,
  isLoading: false,
  error: id ? new Error("This environment doesn't support data providers") : void 0
});
var UseDataProviderContext = React.createContext(
  DEFAULT_DATA_PROVIDER_HOOK
);

export {
  ResetNodeErrorsKeyProvider,
  ComponentsContext,
  NodeRuntimeContext,
  CanvasEventsContext,
  NodeRuntimeWrapper,
  useNode,
  Placeholder,
  Slots,
  isToolpadComponent,
  getArgTypeDefaultValue,
  createToolpadComponentThatThrows,
  useComponents,
  ComponentsContextProvider,
  useComponent,
  UseDataProviderContext
};
//# sourceMappingURL=chunk-FFY7ZGYP.js.map