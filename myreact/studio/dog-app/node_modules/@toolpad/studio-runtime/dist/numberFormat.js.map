{"version":3,"sources":["../src/numberFormat.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { JSONSchema7 } from 'json-schema';\nimport { TextField, MenuItem, SxProps, Stack, styled, Box } from '@mui/material';\n\nconst ACCEPTABLE_CURRENCY_REGEX = /^[a-zA-Z]{3}$/;\n\nexport const CURRENCY_CODES_LIST_HELP_URL =\n  'https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes';\n\nexport type NumberFormat =\n  | {\n      kind: 'preset';\n      preset: string;\n    }\n  | {\n      kind: 'currency';\n      currency?: string;\n    }\n  | {\n      kind: 'custom';\n      custom: Intl.NumberFormatOptions;\n    };\n\nexport const NUMBER_FORMAT_SCHEMA: JSONSchema7 = {\n  anyOf: [\n    {\n      type: 'object',\n      properties: {\n        kind: {\n          type: 'string',\n          const: 'preset',\n        },\n        preset: {\n          type: 'string',\n        },\n      },\n      required: ['kind', 'preset'],\n    },\n    {\n      type: 'object',\n      properties: {\n        kind: {\n          type: 'string',\n          const: 'currency',\n        },\n        currency: {\n          type: 'string',\n        },\n      },\n      required: ['kind', 'currency'],\n    },\n    {\n      type: 'object',\n      properties: {\n        kind: {\n          type: 'string',\n          const: 'custom',\n        },\n        custom: {\n          type: 'object',\n          properties: {\n            compactDisplay: { type: 'string', enum: ['short', 'long'] },\n            notation: {\n              type: 'string',\n              enum: ['standard', 'scientific', 'engineering', 'compact'],\n            },\n            signDisplay: { type: 'string', enum: ['auto', 'never', 'always', 'exceptZero'] },\n            unit: { type: 'string' },\n            unitDisplay: { type: 'string', enum: ['short', 'long', 'narrow'] },\n            currencyDisplay: { type: 'string' },\n            currencySign: { type: 'string' },\n          },\n          required: [],\n        },\n      },\n      required: ['kind', 'custom'],\n    },\n  ],\n};\n\nexport interface NumberFormatPreset {\n  label?: string;\n  options?: Intl.NumberFormatOptions;\n}\n\nexport const NUMBER_FORMAT_PRESETS = new Map<string, NumberFormatPreset>([\n  [\n    'bytes',\n    {\n      label: 'Bytes',\n      options: {\n        style: 'unit',\n        maximumSignificantDigits: 3,\n        notation: 'compact',\n        unit: 'byte',\n        unitDisplay: 'narrow',\n      },\n    },\n  ],\n  [\n    'percent',\n    {\n      label: 'Percent',\n      options: {\n        style: 'percent',\n      },\n    },\n  ],\n]);\n\ninterface NumberFormatterParams {\n  value: unknown;\n}\n\nexport interface NumberFormatter {\n  (params: NumberFormatterParams): string;\n}\n\nexport type PrettyNumberFormat = React.ComponentType<NumberFormatterParams>;\n\nexport function createFormat(numberFormat?: NumberFormat): Intl.NumberFormat {\n  if (!numberFormat) {\n    return new Intl.NumberFormat(undefined, {});\n  }\n  switch (numberFormat.kind) {\n    case 'preset': {\n      const preset = NUMBER_FORMAT_PRESETS.get(numberFormat.preset);\n      return new Intl.NumberFormat(undefined, preset?.options);\n    }\n    case 'custom': {\n      return new Intl.NumberFormat(undefined, numberFormat.custom);\n    }\n    case 'currency': {\n      const userInput = numberFormat.currency || 'USD';\n      return new Intl.NumberFormat(undefined, {\n        style: 'currency',\n        currency: ACCEPTABLE_CURRENCY_REGEX.test(userInput) ? userInput : 'USD',\n      });\n    }\n    default: {\n      return new Intl.NumberFormat();\n    }\n  }\n}\n\nexport interface FormattedNumberProps {\n  format?: Intl.NumberFormat;\n  children: number | string;\n}\n\nconst PrettyNumberFormatRoot = styled('span')({\n  '& .number-token-type-currency, & .number-token-type-percentSign': {\n    // This makes the currency/percent symbol a bit smaller than the number, but only on larger font sizes\n    fontSize: 'max(1rem, 0.8em)',\n  },\n});\n\nconst DEFAULT_FORMAT = new Intl.NumberFormat();\n\nexport function FormattedNumber({ children, format = DEFAULT_FORMAT }: FormattedNumberProps) {\n  const parts = React.useMemo(() => format.formatToParts(Number(children)), [children, format]);\n  return (\n    <PrettyNumberFormatRoot>\n      {parts.map((part, i) => (\n        <span key={i} className={`number-token-type-${part.type}`}>\n          {part.value}\n        </span>\n      ))}\n    </PrettyNumberFormatRoot>\n  );\n}\n\nfunction formatNumberOptionValue(numberFormat: NumberFormat | undefined) {\n  if (!numberFormat) {\n    return 'plain';\n  }\n  switch (numberFormat.kind) {\n    case 'preset':\n      return ['preset', numberFormat.preset].join(':');\n    case 'custom':\n      return 'custom';\n    case 'currency':\n      return 'currency';\n    default:\n      return 'plain';\n  }\n}\n\nexport interface NumberFormatEditorProps {\n  value?: NumberFormat;\n  onChange: (newValue?: NumberFormat) => void;\n  disabled?: boolean;\n  sx?: SxProps;\n  label?: string;\n}\n\nexport function NumberFormatEditor({\n  label,\n  disabled,\n  value,\n  onChange,\n  sx,\n}: NumberFormatEditorProps) {\n  return (\n    <Stack sx={sx} gap={1}>\n      <TextField\n        select\n        fullWidth\n        label={label ?? 'Number format'}\n        value={formatNumberOptionValue(value)}\n        disabled={disabled}\n        onChange={(event) => {\n          let numberFormat: NumberFormat | undefined;\n\n          if (event.target.value === 'currency') {\n            numberFormat = {\n              kind: 'currency',\n              currency: 'USD',\n            };\n          } else if (event.target.value === 'custom') {\n            numberFormat = {\n              kind: 'custom',\n              custom: {},\n            };\n          } else if (event.target.value) {\n            const [prefix, id] = event.target.value.split(':');\n\n            if (prefix === 'preset') {\n              numberFormat = {\n                kind: 'preset',\n                preset: id,\n              };\n            }\n          }\n\n          onChange(numberFormat);\n        }}\n      >\n        <MenuItem value=\"plain\">Plain</MenuItem>\n        {Array.from(NUMBER_FORMAT_PRESETS, ([type, preset]) => (\n          <MenuItem key={type} value={`preset:${type}`}>\n            {preset.label || type}\n          </MenuItem>\n        ))}\n        <MenuItem value=\"currency\">Currency</MenuItem>\n        {/* TODO: Add support for <MenuItem value=\"custom\">custom</MenuItem> */}\n      </TextField>\n\n      <Box sx={{ ml: 1, pl: 1, borderLeft: 1, borderColor: 'divider' }}>\n        {value?.kind === 'currency' ? (\n          <TextField\n            fullWidth\n            label=\"currency code\"\n            value={value.currency}\n            disabled={disabled}\n            onChange={(event) => {\n              onChange({\n                ...value,\n                kind: 'currency',\n                currency: event.target.value,\n              });\n            }}\n            error={!!value.currency && !ACCEPTABLE_CURRENCY_REGEX.test(value.currency)}\n            helperText={\n              <React.Fragment>\n                ISO 4217 currency code. See the{' '}\n                <a target=\"_blank\" href={CURRENCY_CODES_LIST_HELP_URL} rel=\"noopener\">\n                  currency code list\n                </a>{' '}\n                for available values.\n              </React.Fragment>\n            }\n          />\n        ) : null}\n      </Box>\n    </Stack>\n  );\n}\n"],"mappings":"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","names":[]}