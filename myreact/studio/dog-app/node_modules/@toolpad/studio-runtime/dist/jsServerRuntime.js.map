{"version":3,"sources":["../src/jsServerRuntime.tsx"],"sourcesContent":["import * as vm from 'vm';\nimport * as React from 'react';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport { BindingEvaluationResult, JsRuntime } from './types';\n\nfunction evalExpressionInContext(\n  expression: string,\n  globalScope: Record<string, unknown> = {},\n): BindingEvaluationResult {\n  try {\n    const value = vm.runInNewContext(expression, globalScope);\n    return { value };\n  } catch (rawError) {\n    return { error: errorFrom(rawError) };\n  }\n}\n\nexport function createServerJsRuntime(env?: Record<string, string | undefined>): JsRuntime {\n  return {\n    getEnv() {\n      if (env) {\n        return env;\n      }\n      throw new Error(`Env variables are not supported in this context`);\n    },\n    evaluateExpression: (code, globalScope) => evalExpressionInContext(code, globalScope),\n  };\n}\n\nexport function useServerJsRuntime(): JsRuntime {\n  return React.useMemo(() => {\n    // process.env is not available in the browser\n    const processEnv = {};\n    return createServerJsRuntime(processEnv);\n  }, []);\n}\n"],"mappings":";AAAA,YAAY,QAAQ;AACpB,YAAY,WAAW;AACvB,SAAS,iBAAiB;AAG1B,SAAS,wBACP,YACA,cAAuC,CAAC,GACf;AACzB,MAAI;AACF,UAAM,QAAW,mBAAgB,YAAY,WAAW;AACxD,WAAO,EAAE,MAAM;AAAA,EACjB,SAAS,UAAU;AACjB,WAAO,EAAE,OAAO,UAAU,QAAQ,EAAE;AAAA,EACtC;AACF;AAEO,SAAS,sBAAsB,KAAqD;AACzF,SAAO;AAAA,IACL,SAAS;AACP,UAAI,KAAK;AACP,eAAO;AAAA,MACT;AACA,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAAA,IACA,oBAAoB,CAAC,MAAM,gBAAgB,wBAAwB,MAAM,WAAW;AAAA,EACtF;AACF;AAEO,SAAS,qBAAgC;AAC9C,SAAa,cAAQ,MAAM;AAEzB,UAAM,aAAa,CAAC;AACpB,WAAO,sBAAsB,UAAU;AAAA,EACzC,GAAG,CAAC,CAAC;AACP;","names":[]}