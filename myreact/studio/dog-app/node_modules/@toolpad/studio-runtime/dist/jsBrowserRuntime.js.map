{"version":3,"sources":["../src/jsBrowserRuntime.tsx"],"sourcesContent":["import { errorFrom } from '@toolpad/utils/errors';\nimport { TOOLPAD_LOADING_MARKER } from './jsRuntime';\nimport { BindingEvaluationResult, JsRuntime } from './types';\n\nfunction getIframe(): HTMLIFrameElement {\n  if (typeof window === 'undefined') {\n    throw new Error(`Can't use browser JS runtime outside of a browser`);\n  }\n\n  const iframeId = 'toolpad-browser-runtime-iframe';\n  let iframe = document.getElementById(iframeId) as HTMLIFrameElement;\n\n  if (!iframe) {\n    iframe = document.createElement('iframe');\n    iframe.id = iframeId;\n    iframe.setAttribute('sandbox', 'allow-same-origin allow-scripts');\n    iframe.style.display = 'none';\n    document.documentElement.appendChild(iframe);\n  }\n  return iframe;\n}\n\nfunction createBrowserRuntime(): JsRuntime {\n  function evalCode(code: string, globalScope: Record<string, unknown>) {\n    const iframe: HTMLIFrameElement = getIframe();\n\n    // eslint-disable-next-line no-underscore-dangle\n    (iframe.contentWindow as any).__SCOPE = globalScope;\n    (iframe.contentWindow as any).console = window.console;\n\n    const result = (iframe.contentWindow as any).eval(`\n      (() => {\n        // See https://tc39.es/ecma262/multipage/global-object.html#sec-global-object\n        const ecmaGlobals = new Set([ 'globalThis', 'Infinity', 'NaN', 'undefined', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'AggregateError', 'Array', 'ArrayBuffer', 'BigInt', 'BigInt64Array', 'BigUint64Array', 'Boolean', 'DataView', 'Date', 'Error', 'EvalError', 'FinalizationRegistry', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'RegExp', 'Set', 'SharedArrayBuffer', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'URIError', 'WeakMap', 'WeakRef', 'WeakSet', 'Atomics', 'JSON', 'Math', 'Reflect' ]);\n        const allowedDomGlobals = new Set([ 'setTimeout', 'console', 'URL', 'URLSearchParams', 'Intl', 'Blob' ])\n\n        // NOTE: This is by no means intended to be a secure way to hide DOM globals \n        const globalThis = new Proxy(window.__SCOPE, {\n          has(target, prop) {\n            return (\n              (prop === 'globalThis') ||\n              Object.prototype.hasOwnProperty.call(target, prop) || \n              ((prop in window) && !(ecmaGlobals.has(prop) || allowedDomGlobals.has(prop)))\n            );\n          },\n          get(target, prop, receiver) {\n            if (prop === 'globalThis') {\n              return globalThis;\n            }\n            if (Object.prototype.hasOwnProperty.call(window.__SCOPE, prop)) {\n              return Reflect.get(...arguments);\n            }\n            if (prop === Symbol.unscopables) {\n              return undefined;\n            }\n            return undefined\n          },\n        });\n\n        with (globalThis) { \n          return (${code})\n        }\n      })()\n    `);\n\n    if (typeof result?.then === 'function') {\n      return Promise.resolve(result).then((value) => window.structuredClone(value));\n    }\n\n    return window.structuredClone(result);\n  }\n\n  function evaluateExpression(\n    code: string,\n    globalScope: Record<string, unknown>,\n  ): BindingEvaluationResult {\n    try {\n      const value = evalCode(code, globalScope);\n      return { value };\n    } catch (rawError) {\n      const error = errorFrom(rawError);\n      if (error?.message === TOOLPAD_LOADING_MARKER) {\n        return { loading: true };\n      }\n      return { error: error as Error };\n    }\n  }\n\n  return {\n    getEnv() {\n      throw new Error(`Env variables are not supported in this context`);\n    },\n    evaluateExpression,\n  };\n}\n\nconst browserRuntime = createBrowserRuntime();\nexport function getBrowserRuntime(): JsRuntime {\n  return browserRuntime;\n}\n\nexport function useBrowserJsRuntime(): JsRuntime {\n  return getBrowserRuntime();\n}\n"],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAI1B,SAAS,YAA+B;AACtC,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,IAAI,MAAM,mDAAmD;AAAA,EACrE;AAEA,QAAM,WAAW;AACjB,MAAI,SAAS,SAAS,eAAe,QAAQ;AAE7C,MAAI,CAAC,QAAQ;AACX,aAAS,SAAS,cAAc,QAAQ;AACxC,WAAO,KAAK;AACZ,WAAO,aAAa,WAAW,iCAAiC;AAChE,WAAO,MAAM,UAAU;AACvB,aAAS,gBAAgB,YAAY,MAAM;AAAA,EAC7C;AACA,SAAO;AACT;AAEA,SAAS,uBAAkC;AACzC,WAAS,SAAS,MAAc,aAAsC;AACpE,UAAM,SAA4B,UAAU;AAG5C,IAAC,OAAO,cAAsB,UAAU;AACxC,IAAC,OAAO,cAAsB,UAAU,OAAO;AAE/C,UAAM,SAAU,OAAO,cAAsB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA8BlC,IAAI;AAAA;AAAA;AAAA,KAGnB;AAED,QAAI,OAAO,QAAQ,SAAS,YAAY;AACtC,aAAO,QAAQ,QAAQ,MAAM,EAAE,KAAK,CAAC,UAAU,OAAO,gBAAgB,KAAK,CAAC;AAAA,IAC9E;AAEA,WAAO,OAAO,gBAAgB,MAAM;AAAA,EACtC;AAEA,WAAS,mBACP,MACA,aACyB;AACzB,QAAI;AACF,YAAM,QAAQ,SAAS,MAAM,WAAW;AACxC,aAAO,EAAE,MAAM;AAAA,IACjB,SAAS,UAAU;AACjB,YAAM,QAAQ,UAAU,QAAQ;AAChC,UAAI,OAAO,YAAY,wBAAwB;AAC7C,eAAO,EAAE,SAAS,KAAK;AAAA,MACzB;AACA,aAAO,EAAE,MAAsB;AAAA,IACjC;AAAA,EACF;AAEA,SAAO;AAAA,IACL,SAAS;AACP,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAM,iBAAiB,qBAAqB;AACrC,SAAS,oBAA+B;AAC7C,SAAO;AACT;AAEO,SAAS,sBAAiC;AAC/C,SAAO,kBAAkB;AAC3B;","names":[]}