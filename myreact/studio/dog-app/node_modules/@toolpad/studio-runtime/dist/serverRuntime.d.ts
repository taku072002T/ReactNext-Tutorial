import { IncomingMessage, ServerResponse } from 'node:http';
interface ServerContextSessionUser {
    name?: string | null;
    email?: string | null;
    avatar?: string | null;
    roles?: string[];
}
export interface ServerContext {
    /**
     * A dictionary mapping cookie name to cookie value.
     */
    cookies: Record<string, string>;
    /**
     * Use to set a cookie `name` with `value`.
     */
    setCookie: (name: string, value: string) => void;
    /**
     * Data about current authenticated session.
     */
    session: {
        user: ServerContextSessionUser;
    } | null;
}
export declare function getServerContext(): ServerContext | undefined;
export declare function createServerContext(req: IncomingMessage, res: ServerResponse): Promise<ServerContext>;
export declare function withContext<R = void>(ctx: ServerContext, doWork: () => Promise<R>): Promise<R>;
export {};
