import {
  getServerContext
} from "./chunk-VYKZSBAF.js";
import "./chunk-CSB72OYX.js";
import {
  TOOLPAD_FUNCTION
} from "./chunk-PPWSME3B.js";

// src/server.ts
function createFunction(resolver, config) {
  if (config?.parameters) {
    for (const [name, argType] of Object.entries(config.parameters)) {
      const maybeLegacyParamtype = argType;
      if (maybeLegacyParamtype.typeDef) {
        console.warn(`Detected deprecated parameter definition for "${name}".`);
        Object.assign(maybeLegacyParamtype, maybeLegacyParamtype.typeDef);
        if (!("default" in maybeLegacyParamtype)) {
          maybeLegacyParamtype.default = maybeLegacyParamtype.defaultValue;
        }
        delete maybeLegacyParamtype.defaultValue;
        delete maybeLegacyParamtype.typeDef;
      }
    }
  }
  return Object.assign(resolver, {
    [TOOLPAD_FUNCTION]: config || { parameters: {} }
  });
}
var createQuery = createFunction;
function getContext() {
  const ctx = getServerContext();
  if (!ctx) {
    throw new Error("getContext() must be called from within a Toolpad Studio function.");
  }
  return ctx;
}
var TOOLPAD_DATA_PROVIDER_MARKER = Symbol.for("TOOLPAD_DATA_PROVIDER_MARKER");
function createDataProvider(input) {
  return Object.assign(input, { [TOOLPAD_DATA_PROVIDER_MARKER]: true });
}
export {
  TOOLPAD_DATA_PROVIDER_MARKER,
  createDataProvider,
  createFunction,
  createQuery,
  getContext
};
//# sourceMappingURL=server.js.map