// src/dateFormat.tsx
import { MenuItem, Stack, TextField, styled } from "@mui/material";
import * as React from "react";
var DEFAULT_DATE_STYLE = "short";
var DEFAULT_TIME_STYLE = "short";
var DATE_STYLES = /* @__PURE__ */ new Map([
  ["short", { label: "Short" }],
  ["medium", { label: "Medium" }],
  ["long", { label: "Long" }],
  ["full", { label: "Full" }]
]);
var TIME_STYLES = /* @__PURE__ */ new Map([
  ["short", { label: "Short" }],
  ["medium", { label: "Medium" }],
  ["long", { label: "Long" }],
  ["full", { label: "Full" }]
]);
var DATE_FORMATS = new Map(
  ["short", "medium", "long", "full"].map((dateStyle) => [
    dateStyle,
    new Intl.DateTimeFormat(void 0, { dateStyle })
  ])
);
var TIME_FORMATS = new Map(
  ["short", "medium", "long", "full"].map((timeStyle) => [
    timeStyle,
    new Intl.DateTimeFormat(void 0, { timeStyle })
  ])
);
var DEMO_DATE = /* @__PURE__ */ new Date();
DEMO_DATE.setHours(13);
DEMO_DATE.setMinutes(28);
DEMO_DATE.setSeconds(54);
function createFormat(dateFormat) {
  if (!dateFormat) {
    return new Intl.DateTimeFormat(void 0, {});
  }
  switch (dateFormat.kind) {
    case "shorthand": {
      const { dateStyle, timeStyle } = dateFormat;
      return new Intl.DateTimeFormat(void 0, { dateStyle, timeStyle });
    }
    default: {
      return new Intl.DateTimeFormat();
    }
  }
}
var PrettyDateFormatRoot = styled("span")({});
var DEFAULT_FORMAT = new Intl.DateTimeFormat();
function FormattedDate({ children, format = DEFAULT_FORMAT }) {
  const parts = React.useMemo(() => format.formatToParts(children), [children, format]);
  return /* @__PURE__ */ React.createElement(PrettyDateFormatRoot, null, parts.map((part, i) => /* @__PURE__ */ React.createElement("span", { key: i, className: `date-token-type-${part.type}` }, part.value)));
}
function DateFormatEditor({
  label,
  disabled,
  value,
  onChange,
  sx,
  disableTimeFormat
}) {
  return /* @__PURE__ */ React.createElement(Stack, { sx, gap: 1 }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      select: true,
      fullWidth: true,
      label: label ?? "Date format",
      value: value?.dateStyle || DEFAULT_DATE_STYLE,
      disabled,
      onChange: (event) => {
        let dateFormat;
        if (event.target.value) {
          dateFormat = {
            kind: "shorthand",
            dateStyle: event.target.value,
            timeStyle: disableTimeFormat ? void 0 : value?.timeStyle || DEFAULT_TIME_STYLE
          };
        }
        onChange(dateFormat);
      }
    },
    Array.from(DATE_STYLES, ([type, preset]) => /* @__PURE__ */ React.createElement(MenuItem, { key: type, value: type }, DATE_FORMATS.get(type)?.format(DEMO_DATE) || preset.label || type))
  ), disableTimeFormat ? null : /* @__PURE__ */ React.createElement(
    TextField,
    {
      select: true,
      fullWidth: true,
      label: label ?? "Time format",
      value: value?.timeStyle || DEFAULT_TIME_STYLE,
      disabled,
      onChange: (event) => {
        let dateFormat;
        if (event.target.value) {
          dateFormat = {
            kind: "shorthand",
            dateStyle: value?.dateStyle || DEFAULT_DATE_STYLE,
            timeStyle: event.target.value
          };
        }
        onChange(dateFormat);
      }
    },
    Array.from(TIME_STYLES, ([type, preset]) => /* @__PURE__ */ React.createElement(MenuItem, { key: type, value: type }, TIME_FORMATS.get(type)?.format(DEMO_DATE) || preset.label || type))
  ));
}
export {
  DATE_STYLES,
  DateFormatEditor,
  FormattedDate,
  TIME_STYLES,
  createFormat
};
//# sourceMappingURL=dateFormat.js.map