import * as React from 'react';
import { Emitter } from '@toolpad/utils/events';
import { RuntimeEvents, ToolpadComponents, ToolpadComponent, ArgTypeDefinition } from './types';
import type { RuntimeEvent, RuntimeError, PaginationMode, ToolpadDataProviderBase, NodeId } from './types';
export declare const ResetNodeErrorsKeyProvider: React.Provider<number>;
export type Components = ToolpadComponents;
export declare const ComponentsContext: React.Context<Partial<Record<string, ToolpadComponent<any>>> | null>;
declare global {
    interface Window {
        __TOOLPAD_RUNTIME_EVENT__?: RuntimeEvent[] | ((event: RuntimeEvent) => void);
    }
}
export declare const NodeRuntimeContext: React.Context<{
    nodeId: NodeId | null;
    nodeName: string | null;
}>;
export declare const CanvasEventsContext: React.Context<Emitter<RuntimeEvents> | null>;
export interface NodeErrorProps {
    error: RuntimeError;
}
export interface NodeRuntimeWrapperProps {
    children: React.ReactElement;
    nodeId: NodeId;
    nodeName: string;
    NodeError: React.ComponentType<NodeErrorProps>;
}
export declare function NodeRuntimeWrapper({ nodeId, nodeName, children, NodeError, }: NodeRuntimeWrapperProps): React.JSX.Element;
export interface NodeRuntime<P> {
    nodeId: string | null;
    nodeName: string | null;
    updateAppDomConstProp: <K extends keyof P & string>(key: K, value: React.SetStateAction<P[K]>) => void;
    updateEditorNodeData: (key: string, value: any) => void;
}
export declare function useNode<P = {}>(): NodeRuntime<P> | null;
export interface PlaceholderProps {
    prop: string;
    children?: React.ReactNode;
}
export declare function Placeholder({ prop, children }: PlaceholderProps): React.JSX.Element;
export interface SlotsProps {
    prop: string;
    children?: React.ReactNode;
    hasLayout?: boolean;
}
export declare function Slots({ prop, children, hasLayout }: SlotsProps): React.JSX.Element;
export declare function isToolpadComponent(maybeComponent: unknown): maybeComponent is ToolpadComponent<any>;
export declare function getArgTypeDefaultValue<P extends object, K extends keyof P>(argType: ArgTypeDefinition<P, K>): P[K] | undefined;
export declare function createToolpadComponentThatThrows(error: Error): ToolpadComponent<object>;
declare const useComponents: () => Partial<Record<string, ToolpadComponent<any>>>, ComponentsContextProvider: React.ComponentType<React.ProviderProps<Partial<Record<string, ToolpadComponent<any>>>>>;
export { useComponents, ComponentsContextProvider };
export declare function useComponent(id: string): ToolpadComponent<any> | ToolpadComponent<object>;
export interface ToolpadDataProviderIntrospection {
    paginationMode: PaginationMode;
    hasDeleteRecord: boolean;
    hasUpdateRecord: boolean;
    hasCreateRecord: boolean;
}
export interface UseDataProviderHookResult<R extends Record<string, unknown>, P extends PaginationMode> {
    isLoading: boolean;
    error?: unknown;
    dataProvider: ToolpadDataProviderBase<R, P> | null;
}
export interface UseDataProviderHook {
    <R extends Record<string, unknown>, P extends PaginationMode>(id: string | null): UseDataProviderHookResult<R, P>;
}
export declare const UseDataProviderContext: React.Context<UseDataProviderHook>;
