import {
  createHarLog
} from "./chunk-V2BXJGCT.js";
import {
  styled_default2 as styled_default,
  useTheme
} from "./chunk-UDNLGK53.js";
import {
  fromHar
} from "./chunk-NJUHM74N.js";
import "./chunk-T6H2VCUJ.js";
import {
  require_react
} from "./chunk-4OKMCUX3.js";
import {
  __toESM
} from "./chunk-7LSNTUAC.js";

// node_modules/@toolpad/studio/dist/exports/HarViewer-JW34WI6T.mjs
var React = __toESM(require_react(), 1);
import "/Users/takutaku/workbench/ReactNext-Tutorial/myreact/studio/dog-app/node_modules/perf-cascade/dist/perf-cascade.css";
var HarViewerRoot = styled_default("div")({});
function fixLinks(elm) {
  elm.querySelectorAll("a").forEach((link) => link.setAttribute("target", "_blank"));
}
function forceDarkMode(elm, theme) {
  elm.querySelectorAll("svg").forEach((svg) => {
    svg.setAttribute("fill", "white");
    if (svg.classList.contains("left-fixed-holder")) {
      const fullLabel = svg.getElementsByClassName("label-full-bg");
      if (fullLabel && fullLabel.length > 0) {
        fullLabel[0].style.fill = theme.palette.primaryDark[500];
      }
    }
    if (svg.classList.contains("tooltip-holder")) {
      const tooltips = svg.getElementsByClassName("tooltip-payload");
      if (tooltips && tooltips.length > 0) {
        for (const tooltip of tooltips) {
          tooltip.style.backgroundColor = theme.palette.primaryDark[500];
        }
      }
    }
  });
}
function HarViewer({ value = createHarLog(), sx }) {
  const rootRef = React.useRef(null);
  const theme = useTheme();
  React.useEffect(() => {
    const root = rootRef.current;
    if (value && value.log.entries.length > 0 && root) {
      const svg = fromHar(value);
      fixLinks(svg);
      if (theme.palette.mode === "dark") {
        forceDarkMode(svg, theme);
      }
      const observer = new MutationObserver((entries) => {
        for (const entry of entries) {
          for (const node of entry.addedNodes) {
            if (node instanceof Element) {
              fixLinks(node);
              if (theme.palette.mode === "dark") {
                forceDarkMode(svg, theme);
              }
            }
          }
        }
      });
      observer.observe(svg, {
        subtree: true,
        childList: true
      });
      root.append(svg);
      return () => {
        observer.disconnect();
        svg.remove();
      };
    }
    return () => {
    };
  }, [value, theme]);
  return React.createElement(HarViewerRoot, { ref: rootRef, sx });
}
export {
  HarViewer as default
};
//# sourceMappingURL=HarViewer-JW34WI6T-UKANFCHQ.js.map
