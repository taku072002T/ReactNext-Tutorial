{
  "version": 3,
  "sources": ["../../../src/utils/browserOnly.ts", "../../../src/components/MonacoEditor.tsx"],
  "sourcesContent": ["// Warning message for modules that can only work in the browser.\n// Load it as the first import statement with\n//   import './utils/browserOnly';\n\nif (process.env.NODE_ENV !== 'production' && typeof window === 'undefined') {\n  throw new Error(`Browser-only module loaded outside of the browser`);\n}\n\nexport {};\n", "/// <reference types=\"vite/client\" />\n\n/**\n * NOTE: This file can't SSR (use lazyComponent to load it)\n */\nimport '../utils/browserOnly';\n\nimport * as React from 'react';\nimport * as monaco from 'monaco-editor';\nimport { styled, SxProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { nanoid } from 'nanoid/non-secure';\nimport invariant from 'invariant';\nimport {\n  conf as jsonBasicConf,\n  language as jsonBasicLanguage,\n} from 'monaco-editor/esm/vs/basic-languages/javascript/javascript';\nimport {\n  conf as typescriptBasicConf,\n  language as typescriptBasicLanguage,\n} from 'monaco-editor/esm/vs/basic-languages/typescript/typescript';\nimport {\n  conf as mdBasicConf,\n  language as mdBasicLanguage,\n} from 'monaco-editor/esm/vs/basic-languages/markdown/markdown';\nimport { useTheme, Theme, lighten, rgbToHex } from '@mui/material/styles';\n\nimport { getDesignTokens } from '../theme';\n\nexport interface ExtraLib {\n  content: string;\n  filePath?: string;\n}\n\nfunction getExtension(language: string): string {\n  switch (language) {\n    case 'typescript':\n      return '.tsx';\n    case 'json':\n      return '.json';\n    case 'javascript':\n      return '.jsx';\n    case 'markdown':\n      return '.md';\n    case 'css':\n      return '.css';\n    case 'html':\n      return '.html';\n    case 'plaintext':\n      return '.txt';\n    default:\n      return '.jsx';\n  }\n}\n\ndeclare global {\n  interface Window {\n    MonacoEnvironment?: monaco.Environment | undefined;\n  }\n}\n\nconst designTokensDark = getDesignTokens('dark');\n\ninvariant(\n  designTokensDark.palette?.background?.default &&\n    designTokensDark.palette?.background?.paper &&\n    designTokensDark.palette?.divider,\n  'dark theme tokens missing',\n);\n\nconst editorBackground = rgbToHex(lighten(designTokensDark.palette.background.default, 0.05));\nconst paperBackground = rgbToHex(designTokensDark.palette.background.paper);\nconst dividerColor = rgbToHex(designTokensDark.palette.divider);\n\nmonaco.editor.defineTheme('vs-toolpad-dark', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    // See https://code.visualstudio.com/api/references/theme-color\n    'editor.background': editorBackground,\n    'menu.background': paperBackground,\n    'menu.border': dividerColor,\n    'menu.separatorBackground': dividerColor,\n    'editorWidget.background': paperBackground,\n    'editorWidget.border': dividerColor,\n    'editor.lineHighlightBorder': dividerColor,\n  },\n});\n\nmonaco.editor.defineTheme('vs-toolpad-light', {\n  base: 'vs',\n  inherit: true,\n  rules: [],\n  colors: {},\n});\n\nfunction registerLanguage(\n  langId: string,\n  language: monaco.languages.IMonarchLanguage,\n  conf: monaco.languages.LanguageConfiguration,\n) {\n  monaco.languages.register({ id: langId });\n  monaco.languages.registerTokensProviderFactory(langId, {\n    create: async (): Promise<monaco.languages.IMonarchLanguage> => language,\n  });\n  monaco.languages.onLanguage(langId, async () => {\n    monaco.languages.setLanguageConfiguration(langId, conf);\n  });\n}\n\n/**\n * Monaco language services are singletons, we can't set language options per editor instance.\n * We're working around this limitiation by only considering diagnostics for the focused editor.\n * Unfocused editors will be configured with a syntax-coloring-only language which are registered below.\n * See https://github.com/microsoft/monaco-editor/issues/1105\n */\nregisterLanguage('jsonBasic', jsonBasicLanguage, jsonBasicConf);\nregisterLanguage('typescriptBasic', typescriptBasicLanguage, typescriptBasicConf);\nregisterLanguage('markdownBasic', mdBasicLanguage, mdBasicConf);\n\nconst JSON_DEFAULT_DIAGNOSTICS_OPTIONS: monaco.languages.json.DiagnosticsOptions = {};\n\nmonaco.languages.json.jsonDefaults.setDiagnosticsOptions(JSON_DEFAULT_DIAGNOSTICS_OPTIONS);\n\nconst TYPESCRIPT_DEFAULT_DIAGNOSTICS_OPTIONS: monaco.languages.typescript.DiagnosticsOptions = {\n  noSemanticValidation: false,\n  noSyntaxValidation: false,\n};\n\nmonaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions(\n  TYPESCRIPT_DEFAULT_DIAGNOSTICS_OPTIONS,\n);\n\nconst TYPESCRIPT_DEFAULT_COMPILER_OPTIONS: monaco.languages.typescript.CompilerOptions = {\n  target: monaco.languages.typescript.ScriptTarget.Latest,\n  allowNonTsExtensions: true,\n  moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n  module: monaco.languages.typescript.ModuleKind.ESNext,\n  noEmit: true,\n  esModuleInterop: true,\n  jsx: monaco.languages.typescript.JsxEmit.React,\n  reactNamespace: 'React',\n  allowJs: true,\n  lib: ['es2020'],\n  typeRoots: ['node_modules/@types'],\n  strictNullChecks: true,\n};\n\nmonaco.languages.typescript.typescriptDefaults.setCompilerOptions(\n  TYPESCRIPT_DEFAULT_COMPILER_OPTIONS,\n);\n\nconst classes = {\n  monacoHost: 'Toolpad_MonacoEditorMonacoHost',\n  overlay: 'Toolpad_MonacoEditorOverlay',\n  disabled: 'Toolpad_MonacoEditorDisabled',\n};\n\nconst EditorRoot = styled('div')(({ theme }) => ({\n  height: '100%',\n  position: 'relative',\n\n  [`& .${classes.monacoHost}`]: {\n    position: 'absolute',\n    inset: '0 0 0 0',\n  },\n\n  [`& .${classes.overlay}`]: {\n    position: 'absolute',\n    inset: '0 0 0 0',\n    background: theme.palette.background.default,\n    opacity: 0.5,\n    display: 'none',\n  },\n\n  [`&.${classes.disabled}`]: {\n    pointerEvents: 'none',\n  },\n\n  [`&.${classes.disabled} .${classes.overlay}`]: {\n    display: 'block',\n  },\n}));\n\nlet overflowWidgetsDomNode: HTMLDivElement | null = null;\nfunction getOverflowWidgetsDomNode(theme: Theme): HTMLDivElement {\n  if (!overflowWidgetsDomNode) {\n    overflowWidgetsDomNode = document.createElement('div');\n    // See https://github.com/microsoft/monaco-editor/issues/2233#issuecomment-913170212\n    overflowWidgetsDomNode.classList.add('monaco-editor');\n    overflowWidgetsDomNode.style.zIndex = String(theme.zIndex.tooltip + 1);\n    document.body.append(overflowWidgetsDomNode);\n  }\n\n  return overflowWidgetsDomNode;\n}\n\nexport interface MonacoEditorHandle {\n  editor: monaco.editor.IStandaloneCodeEditor;\n  monaco: typeof monaco;\n}\n\ntype EditorOptions = monaco.editor.IEditorOptions & monaco.editor.IGlobalEditorOptions;\n\ninterface MonacoEditorBaseProps {\n  value?: string;\n  onChange?: (newValue: string) => void;\n  disabled?: boolean;\n  sx?: SxProps;\n  autoFocus?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  options?: EditorOptions;\n  className?: string;\n  'data-testid'?: string;\n}\n\nexport type MonacoEditorProps = MonacoEditorBaseProps &\n  (\n    | {\n        language: 'typescript';\n        diagnostics?: monaco.languages.typescript.DiagnosticsOptions;\n        compilerOptions?: monaco.languages.typescript.CompilerOptions | undefined;\n        extraLibs?: ExtraLib[];\n      }\n    | {\n        language: 'json';\n        diagnostics?: monaco.languages.json.DiagnosticsOptions;\n        compilerOptions?: undefined;\n        extraLibs?: undefined;\n      }\n    | {\n        language: 'markdown';\n        diagnostics?: undefined;\n        compilerOptions?: undefined;\n        extraLibs?: undefined;\n      }\n    | {\n        language?: string | undefined;\n        diagnostics?: undefined;\n        compilerOptions?: undefined;\n        extraLibs?: undefined;\n      }\n  );\n\nexport default React.forwardRef<MonacoEditorHandle, MonacoEditorProps>(function MonacoEditor(\n  {\n    value,\n    onChange,\n    sx,\n    language = 'plaintext',\n    diagnostics,\n    compilerOptions,\n    extraLibs,\n    onFocus,\n    onBlur,\n    className,\n    disabled,\n    options,\n    autoFocus,\n    ...props\n  },\n  ref,\n) {\n  const rootRef = React.useRef<HTMLDivElement>(null);\n  const instanceRef = React.useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n  const theme = useTheme();\n  const monacoTheme = theme.palette.mode === 'dark' ? 'vs-toolpad-dark' : 'vs-toolpad-light';\n\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  React.useEffect(() => {\n    /**\n     * Update the language and diagnostics of the currently focused editor. Non-focused editors\n     * will get a syntax-coloring-only version of the language.\n     * This is our workaround for having different diagnostics options per editor instance.\n     * See https://github.com/microsoft/monaco-editor/issues/1105\n     */\n    const model = instanceRef.current?.getModel();\n    if (!model) {\n      return;\n    }\n\n    if (language === 'json') {\n      if (isFocused) {\n        monaco.editor.setModelLanguage(model, 'json');\n        monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n          ...JSON_DEFAULT_DIAGNOSTICS_OPTIONS,\n          ...(diagnostics as monaco.languages.json.DiagnosticsOptions),\n        });\n      } else {\n        monaco.editor.setModelLanguage(model, 'jsonBasic');\n      }\n    } else if (language === 'typescript') {\n      if (isFocused) {\n        monaco.editor.setModelLanguage(model, 'typescript');\n        monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n          ...TYPESCRIPT_DEFAULT_DIAGNOSTICS_OPTIONS,\n          ...(diagnostics as monaco.languages.typescript.DiagnosticsOptions),\n        });\n        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n          ...TYPESCRIPT_DEFAULT_COMPILER_OPTIONS,\n          ...compilerOptions,\n        });\n        monaco.languages.typescript.typescriptDefaults.setExtraLibs(extraLibs || []);\n      } else {\n        monaco.editor.setModelLanguage(model, 'typescriptBasic');\n      }\n    } else {\n      monaco.editor.setModelLanguage(model, language);\n    }\n  }, [isFocused, language, diagnostics, extraLibs, compilerOptions]);\n\n  React.useEffect(() => {\n    invariant(rootRef.current, 'Ref not attached');\n    const extraOptions: EditorOptions = {\n      readOnly: disabled,\n      theme: monacoTheme,\n      scrollbar: {\n        alwaysConsumeMouseWheel: false,\n        ...options?.scrollbar,\n      },\n      ...options,\n    };\n\n    let instance = instanceRef.current;\n\n    if (instance) {\n      instance.updateOptions(extraOptions);\n\n      const model = instance.getModel();\n      if (typeof value === 'string' && model) {\n        const actualValue = model.getValue();\n\n        if (value !== actualValue) {\n          // Used to restore cursor position\n          const state = instance.saveViewState();\n\n          instance.executeEdits(null, [\n            {\n              range: model.getFullModelRange(),\n              text: value,\n            },\n          ]);\n\n          if (state) {\n            instance.restoreViewState(state);\n          }\n        }\n      }\n    } else {\n      const pathUri = monaco.Uri.parse(`/scripts/${nanoid(7)}${getExtension(language)}`);\n      const model = monaco.editor.createModel(value || '', language, pathUri);\n\n      instance = monaco.editor.create(rootRef.current, {\n        model,\n        language,\n        minimap: { enabled: false },\n        accessibilitySupport: 'off',\n        tabSize: 2,\n        automaticLayout: true,\n        fixedOverflowWidgets: true,\n        // See https://github.com/microsoft/monaco-editor/issues/181\n        overflowWidgetsDomNode: getOverflowWidgetsDomNode(theme),\n        ...extraOptions,\n      });\n\n      instanceRef.current = instance;\n\n      instance.onDidFocusEditorWidget(() => setIsFocused(true));\n      instance.onDidBlurEditorWidget(() => setIsFocused(false));\n\n      if (autoFocus && !disabled) {\n        instance.focus();\n      }\n    }\n  }, [language, value, options, disabled, autoFocus, theme, monacoTheme]);\n\n  React.useEffect(() => {\n    const editor = instanceRef.current;\n\n    const onDidChangeModelContentSub = editor?.onDidChangeModelContent(() => {\n      const editorValue = editor.getValue();\n\n      if (onChange && value !== editorValue) {\n        onChange(editorValue);\n      }\n    });\n\n    return () => onDidChangeModelContentSub?.dispose();\n  }, [onChange, value]);\n\n  React.useEffect(() => {\n    const editor = instanceRef.current;\n\n    if (onFocus) {\n      const onDidFocusEditorTextSub = editor?.onDidFocusEditorText(onFocus);\n      return () => onDidFocusEditorTextSub?.dispose();\n    }\n    return () => {};\n  }, [onFocus]);\n\n  React.useEffect(() => {\n    const editor = instanceRef.current;\n    if (onBlur) {\n      const onDidBlurEditorTextSub = editor?.onDidBlurEditorText(onBlur);\n      return () => onDidBlurEditorTextSub?.dispose();\n    }\n    return () => {};\n  }, [onBlur]);\n\n  React.useEffect(() => {\n    return () => {\n      instanceRef.current?.getModel()?.dispose();\n      instanceRef.current?.dispose();\n      instanceRef.current = null;\n    };\n  }, []);\n\n  React.useImperativeHandle(ref, () => {\n    return {\n      get editor() {\n        const editor = instanceRef.current;\n        if (!editor) {\n          throw new Error('Editor not created yet');\n        }\n        return editor;\n      },\n      get monaco() {\n        return monaco;\n      },\n    };\n  }, []);\n\n  return (\n    <EditorRoot className={clsx({ [classes.disabled]: disabled }, className)} sx={sx} {...props}>\n      <div className={classes.monacoHost} ref={rootRef} />\n      <div className={classes.overlay} />\n    </EditorRoot>\n  );\n});\n"],
  "mappings": "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",
  "names": ["language", "invariant", "conf", "_a", "editor", "_b", "_c"]
}
