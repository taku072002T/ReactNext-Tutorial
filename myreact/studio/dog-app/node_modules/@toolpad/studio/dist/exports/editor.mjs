import {
  DOCUMENTATION_URL,
  FEATURE_FLAG_GLOBAL_FUNCTIONS,
  HTTP_NO_BODY,
  UPGRADE_URL,
  VERSION_CHECK_INTERVAL,
  createRuntimeState,
  getAuthenticationHeaders,
  insecureHash,
  parseBaseUrl,
  parseFunctionId,
  parseLegacyFunctionId,
  serializeFunctionId,
  transformLegacyFunctionId,
  tryFormatExpression
} from "./chunk-MNVDTQN5.mjs";
import {
  createHarLog,
  mergeHar
} from "./chunk-UZE2EYMX.mjs";
import {
  CanvasHooksContext,
  LAYOUT_DIRECTION_BOTH,
  LAYOUT_DIRECTION_HORIZONTAL,
  LAYOUT_DIRECTION_VERTICAL,
  RenderedPage,
  ToolpadAppProvider,
  ToolpadAppRoutes,
  createRpcApi,
  createToolpadAppTheme,
  getBindingType,
  getBindingValue,
  layoutBoxArgTypes
} from "./chunk-AH4RJKC7.mjs";
import {
  FORM_COMPONENT_ID,
  PAGE_COLUMN_COMPONENT_ID,
  PAGE_ROW_COMPONENT_ID,
  SPACER_COMPONENT_ID,
  STACK_COMPONENT_ID,
  getElementNodeComponentId,
  isFormComponent,
  isPageColumn,
  isPageLayoutComponent,
  isPageRow
} from "./chunk-7HXI5QAG.mjs";
import {
  getDesignTokens,
  getMetaThemeColor,
  getThemedComponents
} from "./chunk-67ZCLAHI.mjs";
import {
  __export,
  __reExport
} from "./chunk-IEP6GGEX.mjs";

// src/toolpad/Toolpad.tsx
import { CircularProgress as CircularProgress4, Box as Box38, styled as styled48, CssBaseline, Button as Button24, Stack as Stack26, Tooltip as Tooltip19 } from "@mui/material";
import * as React111 from "react";
import { ErrorBoundary } from "react-error-boundary";
import { BrowserRouter, Routes, Route, useLocation as useLocation4 } from "react-router-dom";
import OpenInNewIcon3 from "@mui/icons-material/OpenInNew";
import CloudDoneIcon from "@mui/icons-material/CloudDone";
import SyncIcon from "@mui/icons-material/Sync";
import SyncProblemIcon from "@mui/icons-material/SyncProblem";
import { QueryClient as QueryClient2, QueryClientProvider } from "@tanstack/react-query";
import useBoolean9 from "@toolpad/utils/hooks/useBoolean";

// src/toolpad/AppEditor/index.tsx
import * as React101 from "react";
import { styled as styled44 } from "@mui/material";
import { useNavigate, useLocation as useLocation2 } from "react-router-dom";

// src/toolpad/AppEditor/PageEditor/index.tsx
import * as React73 from "react";
import { styled as styled33 } from "@mui/material";
import usePageTitle from "@toolpad/utils/hooks/usePageTitle";
import * as appDom21 from "@toolpad/studio-runtime/appDom";

// src/components/resizablePanels.tsx
var resizablePanels_exports = {};
__export(resizablePanels_exports, {
  PanelResizeHandle: () => PanelResizeHandle
});
__reExport(resizablePanels_exports, react_resizable_panels_star);
import { styled } from "@mui/material";
import {
  PanelResizeHandle as PanelResizeHandleOrig
} from "react-resizable-panels";
import * as react_resizable_panels_star from "react-resizable-panels";
var RESIZE_HANDLE_OFFSET = 3;
var PanelResizeHandle = styled(PanelResizeHandleOrig)(
  ({ theme }) => ({
    backgroundClip: "padding-box",
    zIndex: 1,
    display: "flex",
    backgroundColor: theme.palette.divider,
    borderStyle: "solid",
    borderColor: "rgba(255, 255, 255, 0)",
    "&:hover": {
      borderColor: theme.palette.divider
    },
    transition: "all 250ms ease",
    '&[data-panel-group-direction="horizontal"]': {
      width: 2 * RESIZE_HANDLE_OFFSET + 1,
      marginLeft: -RESIZE_HANDLE_OFFSET,
      marginRight: -RESIZE_HANDLE_OFFSET,
      borderLeftWidth: RESIZE_HANDLE_OFFSET,
      borderRightWidth: RESIZE_HANDLE_OFFSET
    },
    '&[data-panel-group-direction="vertical"]': {
      height: 2 * RESIZE_HANDLE_OFFSET + 1,
      marginTop: -RESIZE_HANDLE_OFFSET,
      marginBottom: -RESIZE_HANDLE_OFFSET,
      borderTopWidth: RESIZE_HANDLE_OFFSET,
      borderBottomWidth: RESIZE_HANDLE_OFFSET
    }
  })
);

// src/toolpad/AppEditor/PageEditor/RenderPanel/RenderPanel.tsx
import * as React11 from "react";
import { styled as styled8 } from "@mui/material";
import useEventCallback3 from "@mui/utils/useEventCallback";
import * as appDom6 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/EditorCanvasHost.tsx
import * as React4 from "react";
import { styled as styled2, useEventCallback as useEventCallback2 } from "@mui/material";
import {
  CanvasEventsContext,
  AppHostProvider,
  useAppHost,
  queryClient
} from "@toolpad/studio-runtime";
import createCache from "@emotion/cache";
import { CacheProvider } from "@emotion/react";
import * as ReactDOM from "react-dom";
import { Emitter as Emitter2 } from "@toolpad/utils/events";
import { update as update2 } from "@toolpad/utils/immutability";
import { throttle } from "lodash-es";
import invariant3 from "invariant";
import * as appDom2 from "@toolpad/studio-runtime/appDom";

// src/project.tsx
import { Emitter } from "@toolpad/utils/events";
import { useQueryClient, useSuspenseQuery } from "@tanstack/react-query";
import * as React from "react";
import { useNonNullableContext } from "@toolpad/utils/react";
import invariant from "invariant";
async function fetchAppDevManifest(url) {
  const response = await fetch(`${url}/__toolpad_dev__/manifest.json`);
  if (!response.ok) {
    throw new Error(`Failed to fetch app dev manifest: ${response.status}`);
  }
  return response.text();
}
function createProject(url, serializedManifest, queryClient3) {
  const manifest = JSON.parse(serializedManifest);
  const events = new Emitter();
  const ws = new WebSocket(manifest.wsUrl);
  ws.addEventListener("error", () => console.error(`Websocket failed to connect "${ws.url}"`));
  ws.addEventListener("open", () => {
    console.log("Socket connected");
  });
  ws.addEventListener("message", (event) => {
    const message = JSON.parse(event.data);
    switch (message.kind) {
      case "projectEvent": {
        events.emit(message.event, message.payload);
        break;
      }
      default:
        throw new Error(`Unknown message kind: ${message.kind}`);
    }
  });
  const api = createRpcApi(queryClient3, `${url}/__toolpad_dev__/rpc`);
  const unsubExternalChange = events.subscribe("externalChange", () => {
    api.invalidateQueries("loadDom", []);
  });
  const unsubFunctionsChanged = events.subscribe("functionsChanged", () => {
    api.invalidateQueries("introspect", []);
  });
  const dispose = () => {
    if (ws.readyState === ws.OPEN) {
      ws.close();
    } else {
      ws.onopen = () => {
        ws.close();
      };
    }
    unsubExternalChange();
    unsubFunctionsChanged();
  };
  return {
    url,
    rootDir: manifest.rootDir,
    api,
    events,
    dispose
  };
}
var ProjectContext = React.createContext(void 0);
function ProjectProvider({ url, children, fallback }) {
  const { data: manifest } = useSuspenseQuery({
    queryKey: ["app-dev-manifest", url],
    queryFn: () => fetchAppDevManifest(url)
  });
  invariant(manifest, "manifest should be defined, we're using suspense");
  const queryClient3 = useQueryClient();
  const [project, setProject] = React.useState();
  React.useEffect(() => {
    const newProject = createProject(url, manifest, queryClient3);
    setProject(newProject);
    return () => {
      newProject.dispose();
    };
  }, [url, manifest, queryClient3]);
  return /* @__PURE__ */ React.createElement(ProjectContext.Provider, { value: project }, project ? children : fallback);
}
function useProject() {
  return useNonNullableContext(ProjectContext);
}

// src/utils/geometry.ts
function absolutePositionCss({ x, y, width, height }) {
  return { left: x, top: y, width, height };
}
function isHorizontalFlow(flowDirection) {
  return flowDirection === "row" || flowDirection === "row-reverse";
}
function isVerticalFlow(flowDirection) {
  return flowDirection === "column" || flowDirection === "column-reverse";
}
function isReverseFlow(flowDirection) {
  return flowDirection === "row-reverse" || flowDirection === "column-reverse";
}
function getRelativeBoundingRect(containerElm, childElm) {
  const containerRect = containerElm.getBoundingClientRect();
  const childRect = childElm.getBoundingClientRect();
  return {
    x: childRect.x - containerRect.x,
    y: childRect.y - containerRect.y,
    width: childRect.width,
    height: childRect.height
  };
}
function getRelativeOuterRect(containerElm, childElm) {
  const { x, y, width, height } = getRelativeBoundingRect(containerElm, childElm);
  const styles = window.getComputedStyle(childElm);
  const parseMarginStyle = (style) => style === "auto" ? 0 : parseFloat(style);
  let offsetLeft = parseMarginStyle(styles.marginLeft);
  let offsetRight = parseMarginStyle(styles.marginRight);
  let offsetTop = parseMarginStyle(styles.marginTop);
  let offsetBottom = parseMarginStyle(styles.marginBottom);
  if (styles.boxSizing === "content-box") {
    offsetLeft += parseFloat(styles.paddingLeft) + parseFloat(styles.borderLeftWidth);
    offsetRight += parseFloat(styles.paddingRight) + parseFloat(styles.borderRightWidth);
    offsetTop += parseFloat(styles.paddingTop) + parseFloat(styles.borderTopWidth);
    offsetBottom += parseFloat(styles.paddingBottom) + parseFloat(styles.borderBottomWidth);
  }
  return {
    x: x - offsetLeft,
    y: y - offsetTop,
    width: width + offsetLeft + offsetRight,
    height: height + offsetTop + offsetBottom
  };
}
function rectContainsPoint(rect, x, y) {
  return rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y;
}
var RECTANGLE_EDGE_TOP = "top";
var RECTANGLE_EDGE_BOTTOM = "bottom";
var RECTANGLE_EDGE_LEFT = "left";
var RECTANGLE_EDGE_RIGHT = "right";
function getRectanglePointActiveEdge(rect, x, y) {
  const { height: rectHeight, width: rectWidth } = rect;
  if (x < 0 || x > rectWidth || y < 0 || y > rectHeight) {
    return null;
  }
  const isOverFirstDiagonal = y < rectHeight / rectWidth * x;
  const isOverSecondDiagonal = y < -1 * (rectHeight / rectWidth) * x + rectHeight;
  if (isOverFirstDiagonal && isOverSecondDiagonal) {
    return RECTANGLE_EDGE_TOP;
  }
  if (isOverFirstDiagonal) {
    return RECTANGLE_EDGE_RIGHT;
  }
  if (isOverSecondDiagonal) {
    return RECTANGLE_EDGE_LEFT;
  }
  return RECTANGLE_EDGE_BOTTOM;
}

// src/toolpad/AppState.tsx
import * as React3 from "react";
import { createProvidedContext } from "@toolpad/utils/react";
import invariant2 from "invariant";
import { debounce } from "lodash-es";
import { useLocation } from "react-router-dom";
import { mapValues } from "@toolpad/utils/collections";
import useDebouncedHandler from "@toolpad/utils/hooks/useDebouncedHandler";
import useEventCallback from "@mui/utils/useEventCallback";
import { omit, update } from "@toolpad/utils/immutability";
import * as appDom from "@toolpad/studio-runtime/appDom";

// src/projectApi.tsx
function useProjectApi() {
  const project = useProject();
  return project.api;
}

// src/utils/useShortcut.ts
import * as React2 from "react";
function useShortcut({ key, metaKey = false, disabled = false, shiftKey = false, preventDefault = true }, handler) {
  React2.useEffect(() => {
    if (disabled) {
      return () => {
      };
    }
    const handleKeydown = (event) => {
      if (event.key.toLowerCase() === key && (event.metaKey === metaKey || event.ctrlKey === metaKey) && event.shiftKey === shiftKey) {
        handler(event);
        if (preventDefault) {
          event.preventDefault();
        }
      }
    };
    document.addEventListener("keydown", handleKeydown);
    return () => document.removeEventListener("keydown", handleKeydown);
  }, [key, metaKey, shiftKey, handler, disabled, preventDefault]);
}

// src/utils/fields.ts
var SINGLE_ACTION_INPUT_TYPES = ["checkbox", "radio", "range", "color"];
function hasFieldFocus(documentTarget = document) {
  const activeElement = documentTarget.activeElement;
  if (!activeElement) {
    return false;
  }
  const { nodeName, contentEditable } = activeElement;
  const type = activeElement.getAttribute("type") || "";
  const focusedInput = nodeName === "INPUT" && !SINGLE_ACTION_INPUT_TYPES.includes(type);
  const focusedTextarea = nodeName === "TEXTAREA";
  const focusedContentEditable = contentEditable === "true";
  return focusedInput || focusedTextarea || focusedContentEditable;
}

// src/utils/domView.ts
import { matchPath } from "react-router-dom";
var PREFIX = "/editor";
function getPathnameFromView(view) {
  switch (view.kind) {
    case "page":
      return view.name ? `${PREFIX}/app/pages/${view.name}` : `${PREFIX}/app/pages`;
    default:
      throw new Error(`Unknown view "${view.kind}".`);
  }
}
function getViewFromPathname(pathname) {
  const pageRouteMatch = matchPath(`${PREFIX}/app/pages/:pageName`, pathname);
  if (pageRouteMatch?.params.pageName) {
    return {
      kind: "page",
      name: pageRouteMatch.params.pageName,
      selectedNodeId: null,
      pageViewTab: "page"
    };
  }
  return null;
}

// src/toolpad/AppState.tsx
function getNodeHashes(dom) {
  return mapValues(dom.nodes, (node) => insecureHash(JSON.stringify(omit(node, "id"))));
}
function domReducer(dom, action) {
  switch (action.type) {
    case "UPDATE": {
      return action.updater ? action.updater(dom) : dom;
    }
    default:
      return dom;
  }
}
var UNDO_HISTORY_LIMIT = 100;
function appStateReducer(state, action) {
  if (state.dom) {
    const newDom = domReducer(state.dom, action);
    const hasUnsavedDomChanges = newDom !== state.dom;
    state = update(state, {
      dom: newDom,
      unsavedDomChanges: hasUnsavedDomChanges ? state.unsavedDomChanges + 1 : state.unsavedDomChanges
    });
  }
  switch (action.type) {
    case "DOM_SAVING": {
      return update(state, {
        savingDom: true,
        saveDomError: null
      });
    }
    case "DOM_SAVED": {
      return update(state, {
        savedDom: action.savedDom,
        savingDom: false,
        saveDomError: null,
        unsavedDomChanges: 0
      });
    }
    case "DOM_SAVING_ERROR": {
      return update(state, {
        savingDom: false,
        saveDomError: action.error
      });
    }
    case "DOM_SERVER_UPDATE": {
      if (state.unsavedDomChanges > 0) {
        return state;
      }
      return update(state, { dom: action.dom, savedDom: action.dom });
    }
    case "UPDATE_HISTORY": {
      const updatedUndoStack = [
        ...state.undoStack,
        {
          dom: state.dom,
          view: state.currentView,
          timestamp: Date.now()
        }
      ];
      if (updatedUndoStack.length > UNDO_HISTORY_LIMIT) {
        updatedUndoStack.shift();
      }
      return update(state, {
        undoStack: updatedUndoStack,
        redoStack: []
      });
    }
    case "UNDO": {
      const undoStack = [...state.undoStack];
      const redoStack = [...state.redoStack];
      if (undoStack.length < 2) {
        return state;
      }
      const currentState = undoStack.pop();
      const previousStackEntry = undoStack[undoStack.length - 1];
      if (!previousStackEntry || !currentState) {
        return state;
      }
      redoStack.push(currentState);
      return update(state, {
        dom: previousStackEntry.dom,
        currentView: previousStackEntry.view,
        undoStack,
        redoStack
      });
    }
    case "REDO": {
      const undoStack = [...state.undoStack];
      const redoStack = [...state.redoStack];
      const nextStackEntry = redoStack.pop();
      if (!nextStackEntry) {
        return state;
      }
      undoStack.push(nextStackEntry);
      return update(state, {
        dom: nextStackEntry.dom,
        currentView: nextStackEntry.view,
        undoStack,
        redoStack
      });
    }
    case "SELECT_NODE": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: {
            ...state.currentView,
            selectedNodeId: action.nodeId,
            pageViewTab: "component"
          }
        });
      }
      return state;
    }
    case "DESELECT_NODE": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: { ...state.currentView, selectedNodeId: null, pageViewTab: "page" }
        });
      }
      return state;
    }
    case "HOVER_NODE": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: { ...state.currentView, hoveredNodeId: action.nodeId }
        });
      }
      return state;
    }
    case "BLUR_HOVER_NODE": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: { ...state.currentView, hoveredNodeId: null }
        });
      }
      return state;
    }
    case "SET_VIEW":
    case "UPDATE": {
      if (!action.view) {
        return state;
      }
      let newView = action.view;
      if (action.view.kind === "page") {
        if (typeof action.view.selectedNodeId === "undefined") {
          const isSameNode = action.view.name === state.currentView.name;
          newView = {
            ...action.view,
            selectedNodeId: state.currentView.kind === "page" && isSameNode ? state.currentView.selectedNodeId : null
          };
        }
        if (action.view.selectedNodeId && typeof action.view.pageViewTab === "undefined") {
          newView = {
            ...action.view,
            pageViewTab: "component"
          };
        }
      }
      return update(state, {
        currentView: newView
      });
    }
    case "SET_PAGE_VIEW_TAB": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: { ...state.currentView, pageViewTab: action.tab }
        });
      }
      return state;
    }
    case "SET_HAS_UNSAVED_CHANGES": {
      return update(state, {
        hasUnsavedChanges: action.hasUnsavedChanges
      });
    }
    case "SAVE_QUERY_DRAFT": {
      if (state.currentView.kind === "page" && state.currentView.view?.kind === "query") {
        const queryTabs = state.currentView.queryPanel?.queryTabs || [];
        const currentTabIndex = state.currentView.queryPanel?.currentTabIndex;
        if (currentTabIndex !== void 0 && queryTabs) {
          let newDom = state.dom;
          let nodeName = action.draft.name;
          let target = action.draft;
          try {
            appDom.getNode(state.dom, action.draft.id);
          } catch (err) {
            if (state.currentView?.name) {
              const pageNode = appDom.getPageByName(state.dom, state.currentView.name);
              if (pageNode) {
                newDom = appDom.addNode(state.dom, action.draft, pageNode, "queries");
                const createdNode = appDom.getNode(newDom, action.draft.id, "query");
                nodeName = createdNode.name;
                newDom = appDom.saveNode(newDom, createdNode);
                target = createdNode;
              }
            }
          }
          newDom = appDom.saveNode(newDom, target);
          return update(state, {
            currentView: {
              ...state.currentView,
              queryPanel: {
                ...state.currentView.queryPanel,
                queryTabs: state.currentView?.queryPanel?.queryTabs?.map((tab, index) => {
                  if (index === currentTabIndex) {
                    return {
                      ...tab,
                      draft: target,
                      meta: {
                        ...tab.meta,
                        name: nodeName
                      },
                      saved: target
                    };
                  }
                  return tab;
                })
              }
            },
            dom: newDom
          });
        }
      }
      return state;
    }
    case "UPDATE_QUERY_DRAFT": {
      if (state.currentView.kind === "page" && state.currentView.view?.kind === "query") {
        const queryTabs = state.currentView.queryPanel?.queryTabs || [];
        const currentTabIndex = state.currentView.queryPanel?.currentTabIndex;
        if (currentTabIndex !== void 0 && queryTabs) {
          return update(state, {
            currentView: {
              ...state.currentView,
              queryPanel: {
                ...state.currentView.queryPanel,
                queryTabs: state.currentView?.queryPanel?.queryTabs?.map((tab, index) => {
                  if (index === currentTabIndex) {
                    if (action.updater && tab.draft) {
                      return {
                        ...tab,
                        draft: action.updater(tab.draft)
                      };
                    }
                  }
                  return tab;
                })
              }
            }
          });
        }
      }
      return state;
    }
    case "CREATE_QUERY_TAB": {
      if (state.currentView.kind !== "page" || !state.currentView.name) {
        return state;
      }
      const draftNode = appDom.createNode(state.dom, "query", {
        name: action.mode === "mutation" ? "action" : "query",
        attributes: {
          query: action.dataSource?.getInitialQueryValue(),
          mode: action.mode ?? void 0,
          connectionId: null,
          dataSource: action?.dataSourceId
        }
      });
      const newView = { ...state.currentView };
      if (state.currentView.queryPanel?.queryTabs) {
        newView.view = { kind: "query", nodeId: draftNode.id };
        newView.queryPanel = {
          queryTabs: [
            ...state.currentView.queryPanel.queryTabs,
            {
              meta: {
                id: draftNode.id,
                name: draftNode.name,
                dataSource: action.dataSourceId,
                mode: draftNode.attributes?.mode
              },
              saved: draftNode,
              draft: draftNode,
              toolsTabType: "preview",
              isPreviewLoading: false
            }
          ],
          currentTabIndex: state.currentView.queryPanel.queryTabs.length
        };
      } else {
        newView.view = { kind: "query", nodeId: draftNode.id };
        newView.queryPanel = {
          queryTabs: [
            {
              meta: {
                id: draftNode.id,
                name: draftNode.name,
                dataSource: action.dataSourceId,
                mode: draftNode.attributes?.mode
              },
              saved: draftNode,
              draft: draftNode,
              isPreviewLoading: false,
              toolsTabType: "preview"
            }
          ],
          currentTabIndex: 0
        };
      }
      return update(state, {
        currentView: newView
      });
    }
    case "OPEN_QUERY_TAB": {
      if (state.currentView.kind !== "page" || !state.currentView.name) {
        return state;
      }
      if (state.currentView.name) {
        if (state.currentView?.view?.kind === "query" && action.queryId === state.currentView.view?.nodeId) {
          return state;
        }
        const selectedQueryTabIndex = state?.currentView?.queryPanel?.queryTabs?.findIndex(
          (tab) => {
            return tab.meta.id === action.queryId;
          }
        );
        if (selectedQueryTabIndex !== void 0 && selectedQueryTabIndex > -1) {
          return update(state, {
            currentView: update(state.currentView, {
              view: { kind: "query", nodeId: action.queryId },
              queryPanel: update(state.currentView.queryPanel, {
                currentTabIndex: selectedQueryTabIndex
              })
            })
          });
        }
        let newTabIndex;
        let newTabs;
        const pageNode = appDom.getPageByName(state.dom, state.currentView.name);
        if (pageNode) {
          const queries = appDom.getChildNodes(state.dom, pageNode).queries ?? [];
          if (queries.length) {
            const selectedQuery = queries?.find((query) => query?.id === action.queryId);
            const newTab = {
              meta: {
                id: action.queryId,
                name: selectedQuery?.name,
                dataSource: selectedQuery?.attributes?.dataSource,
                mode: selectedQuery?.attributes?.mode
              },
              saved: selectedQuery,
              draft: selectedQuery,
              toolsTabType: "preview",
              isPreviewLoading: false
            };
            if (!state.currentView?.queryPanel?.queryTabs || state?.currentView?.queryPanel?.queryTabs?.length === 0) {
              newTabIndex = 0;
              newTabs = [newTab];
            } else {
              newTabIndex = state.currentView?.queryPanel.queryTabs.length;
              newTabs = [...state.currentView.queryPanel.queryTabs, newTab];
            }
            return update(state, {
              currentView: {
                ...state.currentView,
                view: { kind: "query", nodeId: action.queryId },
                queryPanel: {
                  currentTabIndex: newTabIndex,
                  queryTabs: newTabs
                }
              }
            });
          }
        }
      }
      return state;
    }
    case "UPDATE_QUERY_TAB": {
      if (state.currentView.kind !== "page" || !state.currentView.name) {
        return state;
      }
      return update(state, {
        currentView: {
          ...state.currentView,
          queryPanel: {
            ...state.currentView.queryPanel,
            queryTabs: state.currentView.queryPanel?.queryTabs?.map((tab, index) => {
              if (index === state.currentView.queryPanel?.currentTabIndex) {
                return action.updater ? action.updater(tab) : tab;
              }
              return tab;
            })
          }
        }
      });
    }
    case "CLOSE_QUERY_TAB": {
      if (state.currentView.kind !== "page" || !state.currentView.name) {
        return state;
      }
      const tabs = state.currentView.queryPanel?.queryTabs;
      const newView = { ...state.currentView };
      const newTabs = tabs?.filter((tab) => tab.meta.id !== action.queryId);
      let newDom = state.dom;
      if (tabs && action.queryId !== void 0) {
        if (tabs.length === 1) {
          newView.view = void 0;
          newView.queryPanel = {
            queryTabs: void 0,
            currentTabIndex: void 0
          };
        }
      }
      const currentTabIndex = state.currentView.queryPanel?.currentTabIndex;
      if (currentTabIndex !== void 0 && action.queryId && action.queryIndex !== void 0) {
        if (action.queryIndex !== currentTabIndex) {
          const newTabIndex = currentTabIndex > action.queryIndex ? currentTabIndex - 1 : currentTabIndex;
          newView.queryPanel = {
            queryTabs: newTabs,
            currentTabIndex: newTabIndex
          };
        } else {
          const queryIds = tabs?.map((tab) => tab.meta.id);
          const replacementQueryId = queryIds?.[action.queryIndex === 0 ? currentTabIndex + 1 : currentTabIndex - 1];
          const replacementTabIndex = action.queryIndex === 0 ? currentTabIndex : currentTabIndex - 1;
          if (replacementQueryId) {
            newView.view = { kind: "query", nodeId: replacementQueryId };
            newView.queryPanel = {
              queryTabs: newTabs,
              currentTabIndex: replacementTabIndex
            };
          }
        }
      }
      if (action.deleteQuery) {
        newDom = appDom.removeNode(state.dom, action.queryId);
      }
      return update(state, {
        dom: newDom,
        currentView: newView
      });
    }
    case "CLOSE_QUERY_PANEL": {
      if (state.currentView.kind === "page") {
        return update(state, {
          currentView: {
            ...state.currentView,
            view: void 0,
            queryPanel: void 0
          }
        });
      }
      return state;
    }
    default:
      return state;
  }
}
function createDomApi(dispatch) {
  return {
    update(updater) {
      dispatch({
        type: "UPDATE",
        updater
      });
    },
    setNodeName(nodeId, name) {
      dispatch({
        type: "UPDATE",
        updater(dom) {
          const node = appDom.getNode(dom, nodeId);
          return appDom.setNodeName(dom, node, name);
        }
      });
    },
    saveNode(node) {
      dispatch({
        type: "UPDATE",
        updater(dom) {
          return appDom.saveNode(dom, node);
        }
      });
    }
  };
}
function createAppStateApi(dispatch, scheduleTextInputHistoryUpdate) {
  return {
    update(updater, view) {
      dispatch({
        type: "UPDATE",
        updater,
        view
      });
    },
    undo() {
      scheduleTextInputHistoryUpdate?.flush();
      dispatch({ type: "UNDO" });
    },
    redo() {
      dispatch({ type: "REDO" });
    },
    setView(view) {
      dispatch({
        type: "SET_VIEW",
        view
      });
    },
    setPageViewTab(tab) {
      dispatch({
        type: "SET_PAGE_VIEW_TAB",
        tab
      });
    },
    selectNode(nodeId) {
      dispatch({
        type: "SELECT_NODE",
        nodeId
      });
    },
    hoverNode(nodeId) {
      dispatch({
        type: "HOVER_NODE",
        nodeId
      });
    },
    blurHoverNode() {
      dispatch({
        type: "BLUR_HOVER_NODE"
      });
    },
    deselectNode() {
      dispatch({
        type: "DESELECT_NODE"
      });
    },
    setHasUnsavedChanges(hasUnsavedChanges) {
      dispatch({
        type: "SET_HAS_UNSAVED_CHANGES",
        hasUnsavedChanges
      });
    },
    openQueryTab(queryId) {
      dispatch({
        type: "OPEN_QUERY_TAB",
        queryId
      });
    },
    createQueryTab(dataSource3, dataSourceId, mode) {
      dispatch({
        type: "CREATE_QUERY_TAB",
        dataSource: dataSource3,
        dataSourceId,
        mode
      });
    },
    updateQueryTab(updater) {
      dispatch({
        type: "UPDATE_QUERY_TAB",
        updater
      });
    },
    closeQueryTab(queryId, queryIndex, deleteQuery) {
      dispatch({
        type: "CLOSE_QUERY_TAB",
        queryId,
        queryIndex,
        deleteQuery
      });
    },
    closeQueryPanel() {
      dispatch({
        type: "CLOSE_QUERY_PANEL"
      });
    },
    updateQueryDraft(updater) {
      dispatch({
        type: "UPDATE_QUERY_DRAFT",
        updater
      });
    },
    saveQueryDraft(draft) {
      dispatch({
        type: "SAVE_QUERY_DRAFT",
        draft
      });
    }
  };
}
var [useAppStateContext, AppStateProvider] = createProvidedContext("AppState");
function useAppState() {
  return useAppStateContext();
}
var DomApiContext = React3.createContext(createDomApi(() => void 0));
function useDomApi() {
  return React3.useContext(DomApiContext);
}
var AppStateApiContext = React3.createContext(createAppStateApi(() => void 0));
function useAppStateApi() {
  return React3.useContext(AppStateApiContext);
}
var previousUnsavedChanges = 0;
function logUnsavedChanges(unsavedChanges) {
  const hasUnsavedChanges = unsavedChanges >= 1;
  if (!hasUnsavedChanges && previousUnsavedChanges > 0) {
    console.log(`${previousUnsavedChanges} changes saved.`);
  }
  previousUnsavedChanges = unsavedChanges;
}
var UNDOABLE_ACTIONS = /* @__PURE__ */ new Set([
  "UPDATE",
  "SET_VIEW",
  "SET_PAGE_VIEW_TAB",
  "SELECT_NODE",
  "DESELECT_NODE",
  "UPDATE_QUERY_DRAFT",
  "OPEN_QUERY_TAB",
  "CREATE_QUERY_TAB",
  "CLOSE_QUERY_TAB"
]);
function isCancellableAction(action) {
  return Boolean(
    action.type === "SET_VIEW" || action.type === "UPDATE" && action.view || action.type === "UPDATE_QUERY_DRAFT" && action.updater
  );
}
function AppProvider({ appUrl, children }) {
  const projectApi = useProjectApi();
  const { data: dom } = projectApi.useSuspenseQuery("loadDom", []);
  invariant2(dom, "Suspense should load the dom");
  const location = useLocation();
  const app = appDom.getApp(dom);
  const { pages = [] } = appDom.getChildNodes(dom, app);
  const firstPage = pages.length > 0 ? pages[0] : null;
  const initialView = getViewFromPathname(location.pathname) || {
    kind: "page",
    name: firstPage?.name,
    selectedNodeId: null,
    pageViewTab: "page"
  };
  const [state, dispatch] = React3.useReducer(appStateReducer, {
    // DOM state
    dom,
    // base path of the running application
    appUrl,
    // DOM loader state
    savingDom: false,
    unsavedDomChanges: 0,
    saveDomError: null,
    savedDom: dom,
    // App state
    currentView: initialView,
    undoStack: [
      {
        dom,
        view: initialView,
        timestamp: Date.now()
      }
    ],
    redoStack: [],
    hasUnsavedChanges: false
  });
  React3.useEffect(() => {
    dispatch({
      type: "DOM_SERVER_UPDATE",
      dom
    });
  }, [dom]);
  const scheduleTextInputHistoryUpdate = React3.useMemo(
    () => debounce(() => {
      dispatch({ type: "UPDATE_HISTORY" });
    }, 500),
    []
  );
  const dispatchWithHistory = useEventCallback((action) => {
    if (state.hasUnsavedChanges && isCancellableAction(action)) {
      const ok = window.confirm(
        "You have unsaved changes. Are you sure you want to navigate away? All changes will be discarded."
      );
      if (!ok) {
        return;
      }
    }
    dispatch(action);
    if (UNDOABLE_ACTIONS.has(action.type)) {
      if (hasFieldFocus()) {
        scheduleTextInputHistoryUpdate();
      } else {
        dispatch({ type: "UPDATE_HISTORY" });
      }
    }
  });
  const domApi = React3.useMemo(() => createDomApi(dispatchWithHistory), [dispatchWithHistory]);
  const appStateApi = React3.useMemo(
    () => createAppStateApi(dispatchWithHistory, scheduleTextInputHistoryUpdate),
    [dispatchWithHistory, scheduleTextInputHistoryUpdate]
  );
  const handleSave = React3.useCallback(() => {
    if (!state.dom || state.savingDom || state.savedDom === state.dom) {
      return;
    }
    const domToSave = state.dom;
    dispatch({ type: "DOM_SAVING" });
    const domDiff = appDom.createDiff(state.savedDom, domToSave);
    projectApi.methods.applyDomDiff(domDiff).then(() => {
      dispatch({ type: "DOM_SAVED", savedDom: domToSave });
    }).catch((err) => {
      dispatch({ type: "DOM_SAVING_ERROR", error: err.message });
    });
  }, [projectApi, state]);
  const debouncedHandleSave = useDebouncedHandler(handleSave, 100);
  React3.useEffect(() => {
    debouncedHandleSave();
  }, [state.dom, debouncedHandleSave]);
  React3.useEffect(() => {
    logUnsavedChanges(state.unsavedDomChanges);
    if (state.unsavedDomChanges <= 0 && !state.hasUnsavedChanges) {
      return () => {
      };
    }
    const onBeforeUnload = (event) => {
      event.preventDefault();
      event.returnValue = `You have unsaved changes. Are you sure you want to navigate away?`;
    };
    window.addEventListener("beforeunload", onBeforeUnload);
    return () => window.removeEventListener("beforeunload", onBeforeUnload);
  }, [state.hasUnsavedChanges, state.unsavedDomChanges]);
  useShortcut({ key: "s", metaKey: true }, handleSave);
  return /* @__PURE__ */ React3.createElement(AppStateProvider, { value: state }, /* @__PURE__ */ React3.createElement(AppStateApiContext.Provider, { value: appStateApi }, /* @__PURE__ */ React3.createElement(DomApiContext.Provider, { value: domApi }, children)));
}

// src/runtime/constants.ts
var FONTS_URL = "https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap";

// src/utils/dom.ts
function scrollIntoViewIfNeeded(target, options2) {
  if (target.getBoundingClientRect().bottom > window.innerHeight) {
    target.scrollIntoView(options2 ?? false);
  }
  if (target.getBoundingClientRect().top < 0) {
    target.scrollIntoView(options2);
  }
}

// src/toolpad/AppEditor/PageEditor/EditorCanvasHost.tsx
function updateNodeInfo(nodeInfo, rootElm) {
  const nodeElm = rootElm.querySelector(`[data-toolpad-node-id="${nodeInfo.nodeId}"]`);
  if (!nodeElm) {
    return nodeInfo;
  }
  const rect = getRelativeOuterRect(rootElm, nodeElm);
  const slotElms = rootElm.querySelectorAll(`[data-toolpad-slot-parent="${nodeInfo.nodeId}"]`);
  const slots = {};
  for (const slotElm of slotElms) {
    const slotName = slotElm.getAttribute("data-toolpad-slot-name");
    const slotType = slotElm.getAttribute("data-toolpad-slot-type");
    invariant3(slotName, "Slot name not found");
    invariant3(slotType, "Slot type not found");
    if (slots[slotName]) {
      continue;
    }
    const slotRect = slotType === "single" ? getRelativeBoundingRect(rootElm, slotElm) : getRelativeBoundingRect(rootElm, slotElm);
    const display = window.getComputedStyle(slotElm).display;
    let flowDirection = "row";
    if (slotType === "layout") {
      flowDirection = "column";
    } else if (display === "grid") {
      const gridAutoFlow = window.getComputedStyle(slotElm).gridAutoFlow;
      flowDirection = gridAutoFlow === "row" ? "column" : "row";
    } else if (display === "flex") {
      flowDirection = window.getComputedStyle(slotElm).flexDirection;
    }
    slots[slotName] = {
      type: slotType,
      rect: slotRect,
      flowDirection
    };
  }
  return { ...nodeInfo, rect, slots };
}
function Overlay(props) {
  const { children, container } = props;
  const cache = React4.useMemo(
    () => createCache({
      key: `toolpad-editor-overlay`,
      prepend: true,
      container
    }),
    [container]
  );
  cache.compat = true;
  return /* @__PURE__ */ React4.createElement(CacheProvider, { value: cache }, children);
}
var CanvasRoot = styled2("div")({
  width: "100%",
  position: "relative"
});
var CanvasFrame = styled2("iframe")({
  border: "none",
  position: "absolute",
  width: "100%",
  height: "100%"
});
function EditorCanvasHost({
  pageName,
  className,
  runtimeState,
  base,
  savedNodes,
  overlay,
  onInit
}) {
  const project = useProject();
  const [canvasEvents, setCanvasEvents] = React4.useState(null);
  const [editorOverlayRoot, setEditorOverlayRoot] = React4.useState(null);
  const [portal, setPortal] = React4.useState(null);
  const appStateApi = useAppStateApi();
  const handleIframeLoad = useEventCallback2((event) => {
    invariant3(event.currentTarget.contentDocument, "iframe contentDocument is not available");
    const root = event.currentTarget.contentDocument.getElementById("root");
    invariant3(root, "root element not found");
    const iframeWindow = event.currentTarget.contentWindow;
    invariant3(iframeWindow, "Iframe not attached");
    const handleKeyDown = (keyDownEvent) => {
      const isZ = !!keyDownEvent.key && keyDownEvent.key.toLowerCase() === "z";
      const undoShortcut = isZ && (keyDownEvent.metaKey || keyDownEvent.ctrlKey);
      const redoShortcut = undoShortcut && keyDownEvent.shiftKey;
      if (redoShortcut) {
        keyDownEvent.preventDefault();
        appStateApi.redo();
      } else if (undoShortcut) {
        keyDownEvent.preventDefault();
        appStateApi.undo();
      }
    };
    iframeWindow.addEventListener("keydown", handleKeyDown);
    iframeWindow.addEventListener("unload", () => {
      iframeWindow.removeEventListener("keydown", handleKeyDown);
    });
    setPortal(root);
  });
  const viewState = React4.useRef({ nodes: {} });
  const canvasHooks = React4.useMemo(
    () => ({
      overlayRef: setEditorOverlayRoot,
      savedNodes,
      registerNode: (node, props, componentConfig) => {
        viewState.current.nodes[node.id] = {
          nodeId: node.id,
          props,
          componentConfig
        };
        return () => {
          delete viewState.current.nodes[node.id];
        };
      }
    }),
    [savedNodes]
  );
  const appRootCleanupRef = React4.useRef();
  const projectEventSubscriptionRef = React4.useRef();
  const onAppRoot = React4.useCallback(
    (appRoot) => {
      appRootCleanupRef.current?.();
      appRootCleanupRef.current = void 0;
      if (!appRoot) {
        return;
      }
      const bridge = {
        canvasEvents: new Emitter2(),
        canvasCommands: {
          isReady: () => true,
          getPageViewState: () => {
            let nodes = viewState.current.nodes;
            for (const [nodeId, nodeInfo] of Object.entries(nodes)) {
              nodes = update2(nodes, {
                [nodeId]: updateNodeInfo(nodeInfo, appRoot)
              });
            }
            return { nodes };
          },
          getViewCoordinates: (clientX, clientY) => {
            const rect = appRoot.getBoundingClientRect();
            if (rectContainsPoint(rect, clientX, clientY)) {
              return { x: clientX - rect.x, y: clientY - rect.y };
            }
            return null;
          },
          invalidateQueries: () => {
            queryClient.invalidateQueries();
          },
          scrollComponent: (nodeId) => {
            if (!appRoot) {
              return;
            }
            const node = appRoot.querySelector(`[data-node-id='${nodeId}']`);
            if (node) {
              scrollIntoViewIfNeeded(node, { behavior: "instant", block: "center", inline: "end" });
            }
          }
        }
      };
      const handleScreenUpdate = throttle(
        () => {
          bridge?.canvasEvents.emit("screenUpdate", {});
        },
        50,
        { trailing: true }
      );
      projectEventSubscriptionRef.current = project.events.subscribe("queriesInvalidated", () => {
        queryClient.invalidateQueries();
      });
      const mutationObserver = new MutationObserver(handleScreenUpdate);
      mutationObserver.observe(appRoot, {
        attributes: true,
        childList: true,
        subtree: true,
        characterData: true
      });
      const resizeObserver = new ResizeObserver(handleScreenUpdate);
      resizeObserver.observe(appRoot);
      appRoot.querySelectorAll("*").forEach((elm) => resizeObserver.observe(elm));
      appRootCleanupRef.current = () => {
        handleScreenUpdate.cancel();
        mutationObserver.disconnect();
        resizeObserver.disconnect();
      };
      onInit?.(bridge);
      setCanvasEvents(bridge.canvasEvents);
    },
    [onInit, project.events]
  );
  React4.useEffect(
    () => () => {
      appRootCleanupRef.current?.();
      appRootCleanupRef.current = void 0;
      projectEventSubscriptionRef.current?.();
      projectEventSubscriptionRef.current = void 0;
    },
    []
  );
  const page = appDom2.getPageByName(runtimeState.dom, pageName);
  const appHost = useAppHost();
  return /* @__PURE__ */ React4.createElement(CanvasRoot, { className }, /* @__PURE__ */ React4.createElement(
    CanvasFrame,
    {
      name: "data-toolpad-canvas",
      srcDoc: `
          <!doctype html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <title>Toolpad</title>
              <link rel="preload" href="${FONTS_URL}" as="style" onload="this.onload=null;this.rel='stylesheet'">
              <noscript><link rel="stylesheet" href="${FONTS_URL}"></noscript>
              <link
                rel="stylesheet"
                href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
              />
            </head>
            <body className="notranslate">
              <div id="root"></div>
            </body>
          </html>
        `,
      onLoad: handleIframeLoad
    }
  ), page && portal ? ReactDOM.createPortal(
    /* @__PURE__ */ React4.createElement(Overlay, { container: portal }, /* @__PURE__ */ React4.createElement(CanvasHooksContext.Provider, { value: canvasHooks }, /* @__PURE__ */ React4.createElement(CanvasEventsContext.Provider, { value: canvasEvents }, /* @__PURE__ */ React4.createElement(AppHostProvider, { ...appHost, isCanvas: true, isPreview: true }, /* @__PURE__ */ React4.createElement(ToolpadAppProvider, { rootRef: onAppRoot, basename: base, state: runtimeState }, /* @__PURE__ */ React4.createElement(RenderedPage, { page })))))),
    portal
  ) : null, editorOverlayRoot ? ReactDOM.createPortal(
    /* @__PURE__ */ React4.createElement(Overlay, { container: editorOverlayRoot }, overlay),
    editorOverlayRoot
  ) : null);
}

// src/toolpad/AppEditor/PageEditor/PageEditorProvider.tsx
import * as React5 from "react";
import { update as update3, updateOrCreate } from "@toolpad/utils/immutability";
var DROP_ZONE_TOP = "top";
var DROP_ZONE_BOTTOM = "bottom";
var DROP_ZONE_LEFT = "left";
var DROP_ZONE_RIGHT = "right";
var DROP_ZONE_CENTER = "center";
function createPageEditorState(nodeId) {
  return {
    type: "page",
    nodeId,
    newNode: null,
    draggedNodeId: null,
    isDraggingOver: false,
    dragOverNodeId: null,
    dragOverSlotParentProp: null,
    dragOverZone: null,
    draggedEdge: null,
    viewState: { nodes: {} },
    pageState: {},
    globalScopeMeta: {},
    bindings: {},
    nodeData: {},
    vm: {
      scopes: {},
      bindingScopes: {}
    }
  };
}
function pageEditorReducer(state, action) {
  switch (action.type) {
    case "REPLACE": {
      return action.state;
    }
    case "PAGE_NEW_NODE_DRAG_START": {
      if (state.newNode) {
        return state;
      }
      return update3(state, {
        newNode: action.newNode
      });
    }
    case "PAGE_EXISTING_NODE_DRAG_START": {
      return update3(state, {
        draggedNodeId: action.node.id
      });
    }
    case "PAGE_EDGE_DRAG_START": {
      const { nodeId, edge } = action.edgeDragState;
      return update3(state, {
        draggedNodeId: nodeId,
        draggedEdge: edge
      });
    }
    case "PAGE_DRAG_END":
      return update3(state, {
        newNode: null,
        draggedNodeId: null,
        isDraggingOver: false,
        dragOverNodeId: null,
        dragOverSlotParentProp: null,
        dragOverZone: null,
        draggedEdge: null
      });
    case "PAGE_NODE_DRAG_OVER": {
      const { nodeId, parentProp, zone } = action.dragOverState;
      return update3(state, {
        isDraggingOver: true,
        dragOverNodeId: nodeId,
        dragOverSlotParentProp: parentProp,
        dragOverZone: zone
      });
    }
    case "PAGE_VIEW_STATE_UPDATE": {
      const { viewState } = action;
      return update3(state, {
        viewState
      });
    }
    case "PAGE_STATE_UPDATE": {
      const { pageState, globalScopeMeta } = action;
      return update3(state, {
        pageState,
        globalScopeMeta
      });
    }
    case "NODE_DATA_UPDATE": {
      const { nodeId, prop, value } = action;
      return update3(state, {
        nodeData: update3(state.nodeData, {
          [nodeId]: updateOrCreate(state.nodeData[nodeId], {
            [prop]: value
          })
        })
      });
    }
    case "PAGE_BINDINGS_UPDATE": {
      const { bindings } = action;
      return update3(state, {
        bindings
      });
    }
    case "VM_UPDATE": {
      const { vm } = action;
      return update3(state, { vm });
    }
    default:
      return state;
  }
}
function createPageEditorApi(dispatch) {
  return {
    replace: (state) => dispatch({ type: "REPLACE", state }),
    newNodeDragStart(newNode) {
      dispatch({ type: "PAGE_NEW_NODE_DRAG_START", newNode });
    },
    existingNodeDragStart(node) {
      dispatch({ type: "PAGE_EXISTING_NODE_DRAG_START", node });
    },
    edgeDragStart({ nodeId, edge }) {
      dispatch({
        type: "PAGE_EDGE_DRAG_START",
        edgeDragState: { nodeId, edge }
      });
    },
    dragEnd() {
      dispatch({ type: "PAGE_DRAG_END" });
    },
    nodeDragOver({
      nodeId,
      parentProp,
      zone
    }) {
      dispatch({
        type: "PAGE_NODE_DRAG_OVER",
        dragOverState: { nodeId, parentProp, zone }
      });
    },
    pageViewStateUpdate(viewState) {
      dispatch({
        type: "PAGE_VIEW_STATE_UPDATE",
        viewState
      });
    },
    pageStateUpdate(pageState, globalScopeMeta) {
      dispatch({
        type: "PAGE_STATE_UPDATE",
        pageState,
        globalScopeMeta
      });
    },
    nodeDataUpdate(nodeId, prop, value) {
      dispatch({
        type: "NODE_DATA_UPDATE",
        nodeId,
        prop,
        value
      });
    },
    pageBindingsUpdate(bindings) {
      dispatch({
        type: "PAGE_BINDINGS_UPDATE",
        bindings
      });
    },
    vmUpdate(vm) {
      dispatch({
        type: "VM_UPDATE",
        vm
      });
    }
  };
}
var PageEditorContext = React5.createContext(null);
function usePageEditorState() {
  const state = React5.useContext(PageEditorContext);
  if (!state) {
    throw new Error(`Missing PageEditorContext`);
  }
  return state;
}
var PageEditorApiContext = React5.createContext(
  createPageEditorApi(() => void 0)
);
function PageEditorProvider({ children, nodeId }) {
  const initialState = createPageEditorState(nodeId);
  const [state, dispatch] = React5.useReducer(pageEditorReducer, initialState);
  const api = React5.useMemo(() => createPageEditorApi(dispatch), []);
  React5.useEffect(() => {
    api.replace(createPageEditorState(nodeId));
  }, [api, nodeId]);
  return /* @__PURE__ */ React5.createElement(PageEditorContext.Provider, { value: state }, /* @__PURE__ */ React5.createElement(PageEditorApiContext.Provider, { value: api }, children));
}
function usePageEditorApi() {
  return React5.useContext(PageEditorApiContext);
}

// src/toolpad/AppEditor/PageEditor/RenderPanel/RenderOverlay.tsx
import * as React10 from "react";
import { styled as styled7 } from "@mui/material";
import clsx2 from "clsx";
import invariant5 from "invariant";
import { omit as omit2 } from "@toolpad/utils/immutability";
import * as appDom5 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/RenderPanel/NodeHud.tsx
import * as React6 from "react";
import DragIndicatorIcon from "@mui/icons-material/DragIndicator";
import DeleteIcon from "@mui/icons-material/Delete";
import ContentCopy from "@mui/icons-material/ContentCopy";
import { IconButton, styled as styled3, Tooltip } from "@mui/material";
var HINT_POSITION_TOP = "top";
var HINT_POSITION_BOTTOM = "bottom";
var HUD_HEIGHT = 30;
function stopPropagationHandler(event) {
  event.stopPropagation();
}
var nodeHudClasses = {
  selected: "NodeHud_Selected",
  hovered: "NodeHud_Hovered",
  selectionHint: "NodeHud_SelectionHint"
};
var NodeHudWrapper = styled3("div", {
  shouldForwardProp: (prop) => prop !== "isOutlineVisible" && prop !== "isHoverable"
})(({ isOutlineVisible, isHoverable, theme }) => {
  const defaultOutline = `1px dotted ${isOutlineVisible ? theme.palette.primary[500] : "transparent"}`;
  return {
    // capture mouse events
    pointerEvents: "initial",
    position: "absolute",
    userSelect: "none",
    outline: defaultOutline,
    zIndex: 80,
    [`&:hover, &.${nodeHudClasses.hovered}`]: {
      outline: `2px dashed ${isHoverable ? theme.palette.primary[500] : defaultOutline}`
    },
    [`.${nodeHudClasses.selected}`]: {
      position: "absolute",
      height: "100%",
      width: "100%",
      outline: `2px solid ${theme.palette.primary[500]}`,
      left: 0,
      top: 0,
      zIndex: 80
    }
  };
});
var SelectionHintWrapper = styled3("div", {
  shouldForwardProp: (prop) => prop !== "hintPosition"
})(({ hintPosition, theme }) => ({
  position: "absolute",
  [`.${nodeHudClasses.selectionHint}`]: {
    // capture mouse events
    pointerEvents: "initial",
    cursor: "grab",
    display: "flex",
    position: "absolute",
    alignItems: "center",
    right: -1,
    background: theme.palette.primary[500],
    color: "white",
    fontSize: 11,
    padding: `0 0 0 8px`,
    height: HUD_HEIGHT,
    zIndex: 1e3,
    ...hintPosition === HINT_POSITION_TOP ? { top: 0, transform: "translate(0, -100%)" } : {
      bottom: 0,
      transform: "translate(0, 100%)"
    }
  }
}));
var DraggableEdgeWrapper = styled3("div")({
  userSelect: "none",
  position: "absolute",
  zIndex: 90
});
var DraggableEdge = styled3("div", {
  shouldForwardProp: (prop) => prop !== "edge"
})(({ edge }) => {
  let dynamicStyles = {};
  if (edge === RECTANGLE_EDGE_RIGHT) {
    dynamicStyles = {
      cursor: "ew-resize",
      top: 0,
      right: -10,
      height: "100%",
      width: 22
    };
  }
  if (edge === RECTANGLE_EDGE_LEFT) {
    dynamicStyles = {
      cursor: "ew-resize",
      top: 0,
      left: -10,
      height: "100%",
      width: 22
    };
  }
  if (edge === RECTANGLE_EDGE_BOTTOM) {
    dynamicStyles = {
      cursor: "ns-resize",
      bottom: -10,
      height: 22,
      left: 0,
      width: "100%"
    };
  }
  if (edge === RECTANGLE_EDGE_TOP) {
    dynamicStyles = {
      cursor: "ns-resize",
      top: -10,
      height: 22,
      left: 0,
      width: "100%"
    };
  }
  return {
    ...dynamicStyles,
    position: "absolute",
    pointerEvents: "initial",
    zIndex: 90
  };
});
var ResizePreview = styled3("div")(({ theme }) => ({
  backgroundColor: theme.palette.primary[500],
  opacity: 0.2,
  zIndex: 90
}));
function NodeHud({
  node,
  rect,
  selectedNodeRect,
  isSelected,
  isInteractive = false,
  onNodeDragStart,
  draggableEdges = [],
  onEdgeDragStart,
  onDelete,
  isResizing = false,
  resizePreviewElementRef,
  onDuplicate,
  isOutlineVisible = false,
  isHoverable = true,
  isHovered = false
}) {
  let hintPosition = HINT_POSITION_BOTTOM;
  if (rect.y > HUD_HEIGHT) {
    hintPosition = HINT_POSITION_TOP;
  }
  const interactiveNodeClipPath = React6.useMemo(
    () => isInteractive && selectedNodeRect ? `
            polygon(
              -100% -100%, 
              200% -100%,
              200% 200%,
              -100% 200%,
              -100% ${selectedNodeRect.y - rect.y}px,
              ${selectedNodeRect.x - rect.x}px ${selectedNodeRect.y - rect.y}px, 
              ${selectedNodeRect.x - rect.x}px 
              ${selectedNodeRect.y + selectedNodeRect.height - rect.y}px,
              ${selectedNodeRect.x + selectedNodeRect.width - rect.x}px
              ${selectedNodeRect.y + selectedNodeRect.height - rect.y}px, 
              ${selectedNodeRect.x + selectedNodeRect.width - rect.x}px 
              ${selectedNodeRect.y - rect.y}px,
              -100% ${selectedNodeRect.y - rect.y}px
          )` : "",
    [isInteractive, rect, selectedNodeRect]
  );
  return /* @__PURE__ */ React6.createElement(React6.Fragment, null, /* @__PURE__ */ React6.createElement(
    NodeHudWrapper,
    {
      "data-node-id": node.id,
      style: {
        ...absolutePositionCss(rect),
        ...interactiveNodeClipPath ? {
          clipPath: interactiveNodeClipPath
        } : {}
      },
      className: isHovered ? nodeHudClasses.hovered : "",
      isOutlineVisible,
      isHoverable
    },
    isSelected ? /* @__PURE__ */ React6.createElement("span", { className: nodeHudClasses.selected }) : null,
    isResizing ? /* @__PURE__ */ React6.createElement(ResizePreview, { ref: resizePreviewElementRef, style: absolutePositionCss(rect) }) : null
  ), isSelected ? /* @__PURE__ */ React6.createElement(
    SelectionHintWrapper,
    {
      style: absolutePositionCss(rect),
      hintPosition,
      "data-testid": "node-hud-selection"
    },
    /* @__PURE__ */ React6.createElement(
      "div",
      {
        draggable: true,
        "data-testid": "node-hud-tag",
        className: nodeHudClasses.selectionHint,
        onDragStart: onNodeDragStart,
        role: "presentation",
        onClick: stopPropagationHandler,
        onMouseDown: stopPropagationHandler,
        onMouseUp: stopPropagationHandler
      },
      node.name,
      /* @__PURE__ */ React6.createElement(DragIndicatorIcon, { color: "inherit" }),
      /* @__PURE__ */ React6.createElement(IconButton, { "aria-label": "Duplicate", color: "inherit", onMouseUp: onDuplicate }, /* @__PURE__ */ React6.createElement(Tooltip, { title: "Duplicate", enterDelay: 400 }, /* @__PURE__ */ React6.createElement(ContentCopy, { color: "inherit" }))),
      /* @__PURE__ */ React6.createElement(IconButton, { "aria-label": "Remove", color: "inherit", onMouseUp: onDelete }, /* @__PURE__ */ React6.createElement(Tooltip, { title: "Remove", enterDelay: 400 }, /* @__PURE__ */ React6.createElement(DeleteIcon, { color: "inherit" })))
    )
  ) : null, onEdgeDragStart ? /* @__PURE__ */ React6.createElement(DraggableEdgeWrapper, { style: absolutePositionCss(rect) }, draggableEdges.map((edge) => /* @__PURE__ */ React6.createElement(
    DraggableEdge,
    {
      key: `${node.id}-edge-${edge}`,
      edge,
      onMouseDown: onEdgeDragStart(edge)
    }
  ))) : null);
}

// src/toolpad/AppEditor/PageEditor/RenderPanel/OverlayGrid.tsx
import * as React7 from "react";
import { styled as styled4 } from "@mui/material";
import Grid from "@mui/material/Grid2";
import invariant4 from "invariant";
var GRID_NUMBER_OF_COLUMNS = 12;
var GRID_COLUMN_GAP = 1;
var GridContainer = styled4("div")({
  pointerEvents: "none",
  position: "absolute",
  zIndex: 1
});
var StyledGrid = styled4(Grid)({
  height: "100%"
});
var StyledGridColumn = styled4("div")(({ theme }) => ({
  backgroundColor: theme.palette.grey[400],
  height: "100%",
  opacity: 0.2
}));
var OverlayGrid = React7.forwardRef(
  function OverlayGrid2(props, forwardedRef) {
    const gridRef = React7.useRef(null);
    const { dom } = useAppState();
    const { viewState, nodeId: pageNodeId } = usePageEditorState();
    const { nodes: nodesInfo } = viewState;
    const pageNode = nodesInfo[pageNodeId];
    const appTheme = React7.useMemo(() => createToolpadAppTheme(dom), [dom]);
    React7.useImperativeHandle(forwardedRef, () => {
      const gridElement = gridRef.current;
      invariant4(gridElement, "Overlay grid ref not bound");
      let columnEdges = [];
      const gridColumnContainers = Array.from(gridElement.children);
      const gridColumnEdges = gridColumnContainers.map((container) => {
        const containerRect = container.firstElementChild?.getBoundingClientRect();
        return containerRect ? [Math.round(containerRect.x), Math.round(containerRect.x + containerRect.width)] : [];
      });
      columnEdges = gridColumnEdges.flat();
      return {
        gridElement: gridRef.current,
        getMinColumnWidth() {
          return columnEdges[1] - columnEdges[0];
        },
        getLeftColumnEdges() {
          return columnEdges.filter((column, index) => index % 2 === 0);
        },
        getRightColumnEdges() {
          return columnEdges.filter((column, index) => index % 2 === 1);
        }
      };
    }, []);
    const pageChildrenSlotRect = pageNode?.slots?.children?.rect;
    return pageChildrenSlotRect ? /* @__PURE__ */ React7.createElement(GridContainer, { style: { ...absolutePositionCss(pageChildrenSlotRect), height: "100%" } }, /* @__PURE__ */ React7.createElement(StyledGrid, { ref: gridRef, container: true, columnSpacing: appTheme.spacing(GRID_COLUMN_GAP) }, [...Array(GRID_NUMBER_OF_COLUMNS)].map((column, index) => /* @__PURE__ */ React7.createElement(Grid, { key: index, size: { xs: 1 } }, /* @__PURE__ */ React7.createElement(StyledGridColumn, null))))) : null;
  }
);

// src/toolpad/AppEditor/PageEditor/RenderPanel/NodeDropArea.tsx
import * as React8 from "react";
import clsx from "clsx";
import { styled as styled5 } from "@mui/material";
import Typography from "@mui/material/Typography";
import * as appDom3 from "@toolpad/studio-runtime/appDom";
var dropAreaHighlightClasses = {
  highlightedTop: "DropArea_HighlightedTop",
  highlightedRight: "DropArea_HighlightedRight",
  highlightedBottom: "DropArea_HighlightedBottom",
  highlightedLeft: "DropArea_HighlightedLeft",
  highlightedCenter: "DropArea_HighlightedCenter"
};
var StyledNodeDropArea = styled5("div", {
  shouldForwardProp: (prop) => prop !== "highlightRelativeRect"
})(({ highlightRelativeRect = {}, theme }) => {
  const {
    x: highlightRelativeX = 0,
    y: highlightRelativeY = 0,
    width: highlightWidth = "100%",
    height: highlightHeight = "100%"
  } = highlightRelativeRect;
  return {
    pointerEvents: "none",
    position: "absolute",
    [`&.${dropAreaHighlightClasses.highlightedTop}`]: {
      "&::after": {
        backgroundColor: theme.palette.primary[500],
        content: "''",
        position: "absolute",
        height: 2,
        width: highlightWidth,
        top: -1,
        left: highlightRelativeX
      }
    },
    [`&.${dropAreaHighlightClasses.highlightedRight}`]: {
      "&::after": {
        backgroundColor: theme.palette.primary[500],
        content: "''",
        position: "absolute",
        height: highlightHeight,
        width: 2,
        top: highlightRelativeY,
        right: -1
      }
    },
    [`&.${dropAreaHighlightClasses.highlightedBottom}`]: {
      "&::after": {
        backgroundColor: theme.palette.primary[500],
        content: "''",
        position: "absolute",
        height: 2,
        width: highlightWidth,
        bottom: -1,
        left: highlightRelativeX
      }
    },
    [`&.${dropAreaHighlightClasses.highlightedLeft}`]: {
      "&::after": {
        backgroundColor: theme.palette.primary[500],
        content: "''",
        position: "absolute",
        height: highlightHeight,
        width: 2,
        left: -1,
        top: highlightRelativeY
      }
    },
    [`&.${dropAreaHighlightClasses.highlightedCenter}`]: {
      border: `2px solid ${theme.palette.primary[500]}`
    }
  };
});
var EmptySlot = styled5("div")(({ theme }) => ({
  alignItems: "center",
  border: `2px dotted ${theme.palette.primary[500]}`,
  color: theme.palette.primary[500],
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  position: "absolute",
  textAlign: "center"
}));
function getChildNodeHighlightedZone(parentFlowDirection) {
  switch (parentFlowDirection) {
    case "row":
      return DROP_ZONE_RIGHT;
    case "column":
      return DROP_ZONE_BOTTOM;
    case "row-reverse":
      return DROP_ZONE_LEFT;
    case "column-reverse":
      return DROP_ZONE_TOP;
    default:
      return null;
  }
}
function getHighlightedZoneOverlayClass(highlightedZone) {
  switch (highlightedZone) {
    case DROP_ZONE_TOP:
      return dropAreaHighlightClasses.highlightedTop;
    case DROP_ZONE_RIGHT:
      return dropAreaHighlightClasses.highlightedRight;
    case DROP_ZONE_BOTTOM:
      return dropAreaHighlightClasses.highlightedBottom;
    case DROP_ZONE_LEFT:
      return dropAreaHighlightClasses.highlightedLeft;
    case DROP_ZONE_CENTER:
      return dropAreaHighlightClasses.highlightedCenter;
    default:
      return null;
  }
}
function NodeDropArea({
  node,
  parentProp,
  dropAreaRect,
  availableDropZones
}) {
  const { dom } = useAppState();
  const { dragOverNodeId, dragOverSlotParentProp, dragOverZone, viewState } = usePageEditorState();
  const { nodes: nodesInfo } = viewState;
  const dropAreaNodeInfo = nodesInfo[node.id];
  const dropAreaNodeRect = dropAreaNodeInfo?.rect || null;
  const dropAreaNodeSlots = dropAreaNodeInfo?.slots;
  const slotRect = dropAreaNodeSlots && parentProp && dropAreaNodeSlots[parentProp]?.rect || null;
  const dropAreaNodeParent = appDom3.getParent(dom, node);
  const dropAreaNodeParentInfo = dropAreaNodeParent && nodesInfo[dropAreaNodeParent.id];
  const dropAreaNodeParentRect = dropAreaNodeParentInfo?.rect || null;
  const dropAreaNodeParentSlots = dropAreaNodeParentInfo?.slots;
  const dropAreaNodeParentSlot = dropAreaNodeParentSlots && parentProp && dropAreaNodeParentSlots[parentProp];
  const isPageNode = appDom3.isPage(node);
  const isPageChild = dropAreaNodeParent ? appDom3.isPage(dropAreaNodeParent) : false;
  const isPageRowNode = appDom3.isElement(node) && isPageRow(node);
  const isPageChildElement = isPageChild && appDom3.isElement(node) && !isPageRow(node);
  const isPageRowChild = dropAreaNodeParent ? appDom3.isElement(dropAreaNodeParent) && isPageRow(dropAreaNodeParent) : false;
  const dropAreaNodeChildNodes = React8.useMemo(
    () => appDom3.getChildNodes(dom, node),
    [dom, node]
  );
  const dropAreaSlotChildNodes = parentProp ? dropAreaNodeChildNodes[parentProp] || [] : [];
  const isEmptySlot = dropAreaSlotChildNodes.length === 0;
  const highlightedZone = React8.useMemo(() => {
    if (dragOverZone && !availableDropZones.includes(dragOverZone)) {
      return null;
    }
    if (isPageNode && parentProp && !isEmptySlot) {
      return null;
    }
    const dropAreaParentParent = dropAreaNodeParent && appDom3.getParent(dom, dropAreaNodeParent);
    const pageAwareParentProp = isPageChild ? "children" : parentProp;
    if (dragOverZone === DROP_ZONE_TOP && !parentProp) {
      if (dropAreaNodeParent && dropAreaNodeParent.id === dragOverNodeId && appDom3.isPage(dropAreaNodeParent) && pageAwareParentProp) {
        const pageFirstChild = appDom3.getNodeFirstChild(dom, dropAreaNodeParent, "children");
        const isPageFirstChild = pageFirstChild ? node.id === pageFirstChild.id : false;
        return isPageFirstChild ? DROP_ZONE_TOP : null;
      }
    }
    if (dragOverZone === DROP_ZONE_LEFT || dragOverZone === DROP_ZONE_RIGHT) {
      if (dropAreaNodeParent && dropAreaParentParent && dropAreaNodeParent.id === dragOverNodeId && appDom3.isElement(dropAreaNodeParent) && isPageRowChild && appDom3.isPage(dropAreaParentParent) && !parentProp) {
        const parentHighlightedChild = dragOverZone === DROP_ZONE_LEFT ? appDom3.getNodeFirstChild(dom, dropAreaNodeParent, "children") : appDom3.getNodeLastChild(dom, dropAreaNodeParent, "children");
        const isParentHighlightedChild = parentHighlightedChild ? node.id === parentHighlightedChild.id : false;
        return isParentHighlightedChild ? dragOverZone : null;
      }
      if (dropAreaNodeParent && isPageRowNode && isPageChild) {
        return null;
      }
    }
    if (dragOverZone === DROP_ZONE_CENTER) {
      if (dropAreaNodeParent && dropAreaNodeParent.id === dragOverNodeId && (pageAwareParentProp === dragOverSlotParentProp || !parentProp)) {
        const parentLastChild = appDom3.isPage(dropAreaNodeParent) || appDom3.isElement(dropAreaNodeParent) ? appDom3.getNodeLastChild(dom, dropAreaNodeParent, pageAwareParentProp || "children") : null;
        const isParentLastChild = parentLastChild ? node.id === parentLastChild.id : false;
        const parentSlots = dropAreaNodeParentInfo?.slots || null;
        const parentFlowDirection = parentSlots && parentSlots[pageAwareParentProp || "children"]?.flowDirection;
        return parentFlowDirection && isParentLastChild ? getChildNodeHighlightedZone(parentFlowDirection) : null;
      }
      if (node.id === dragOverNodeId && pageAwareParentProp && pageAwareParentProp === dragOverSlotParentProp && parentProp) {
        if (isPageNode) {
          return DROP_ZONE_CENTER;
        }
        const nodeChildren = pageAwareParentProp && appDom3.isElement(node) && dropAreaNodeChildNodes[pageAwareParentProp] || [];
        return nodeChildren.length === 0 ? DROP_ZONE_CENTER : null;
      }
    }
    return node.id === dragOverNodeId && parentProp === dragOverSlotParentProp ? dragOverZone : null;
  }, [
    dragOverZone,
    availableDropZones,
    isPageNode,
    parentProp,
    isEmptySlot,
    dropAreaNodeParent,
    dom,
    isPageChild,
    node,
    dragOverNodeId,
    dragOverSlotParentProp,
    isPageRowChild,
    isPageRowNode,
    dropAreaNodeParentInfo?.slots,
    dropAreaNodeChildNodes
  ]);
  const highlightedZoneOverlayClass = highlightedZone && getHighlightedZoneOverlayClass(highlightedZone);
  const isHorizontalContainerChild = dropAreaNodeParentSlot ? isHorizontalFlow(dropAreaNodeParentSlot.flowDirection) : false;
  const isVerticalContainerChild = dropAreaNodeParentSlot ? isVerticalFlow(dropAreaNodeParentSlot.flowDirection) : false;
  const highlightParentRect = slotRect || dropAreaNodeParentRect;
  if (!dropAreaNodeRect) {
    return null;
  }
  const highlightHeight = isHorizontalContainerChild && highlightParentRect && dropAreaNodeParentRect ? highlightParentRect.height : dropAreaNodeRect.height;
  const highlightWidth = !isPageChild && isVerticalContainerChild && highlightParentRect && dropAreaNodeParentRect ? highlightParentRect.width : dropAreaNodeRect.width;
  const highlightRelativeX = (!isPageChild && isVerticalContainerChild && highlightParentRect && dropAreaNodeParentRect ? highlightParentRect.x : dropAreaNodeRect.x) - dropAreaRect.x;
  const highlightRelativeY = (isHorizontalContainerChild && highlightParentRect && dropAreaNodeParentRect ? highlightParentRect.y : dropAreaNodeRect.y) - dropAreaRect.y;
  const isHighlightingCenter = highlightedZone === DROP_ZONE_CENTER;
  const highlightRect = isHighlightingCenter && isEmptySlot && slotRect ? slotRect : {
    ...dropAreaRect,
    x: isPageChildElement ? dropAreaNodeRect.x : dropAreaRect.x,
    width: isPageChildElement ? dropAreaNodeRect.width : dropAreaRect.width
  };
  const highlightRelativeRect = {
    x: isPageChildElement ? 0 : highlightRelativeX,
    y: highlightRelativeY,
    width: highlightWidth,
    height: highlightHeight
  };
  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement(
    StyledNodeDropArea,
    {
      style: absolutePositionCss(highlightRect),
      className: clsx(
        highlightedZoneOverlayClass ? {
          [highlightedZoneOverlayClass]: !isHighlightingCenter || isEmptySlot
        } : {}
      ),
      highlightRelativeRect
    }
  ), isEmptySlot && slotRect ? /* @__PURE__ */ React8.createElement(EmptySlot, { style: absolutePositionCss(slotRect) }, /* @__PURE__ */ React8.createElement(Typography, { variant: "subtitle2" }, "Drop component here")) : null);
}

// src/PinholeOverlay.tsx
import * as React9 from "react";
import { styled as styled6 } from "@mui/material";
var PinholeOverlayRoot = styled6("div")({
  pointerEvents: "none !important",
  position: "relative",
  "> div": {
    pointerEvents: "initial !important",
    position: "absolute",
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    background: "#000",
    opacity: 0
  }
});
var PinholeOverlay = React9.forwardRef(function PinholeOverlay2({ className, onClick, pinhole }, ref) {
  const left = React9.useRef(null);
  const topLeft = React9.useRef(null);
  const top = React9.useRef(null);
  const topRight = React9.useRef(null);
  const right = React9.useRef(null);
  const bottomRight = React9.useRef(null);
  const bottom = React9.useRef(null);
  const bottomLeft = React9.useRef(null);
  React9.useLayoutEffect(() => {
    if (left.current) {
      left.current.style.top = pinhole ? `${pinhole.y}px` : "0";
      left.current.style.width = pinhole ? `${pinhole.x}px` : "unset";
      left.current.style.height = pinhole ? `${pinhole.height}px` : "unset";
    }
    if (topLeft.current) {
      topLeft.current.style.width = pinhole ? `${pinhole.x}px` : "unset";
      topLeft.current.style.height = pinhole ? `${pinhole.y}px` : "unset";
    }
    if (top.current) {
      top.current.style.left = pinhole ? `${pinhole.x}px` : "0";
      top.current.style.width = pinhole ? `${pinhole.width}px` : "unset";
      top.current.style.height = pinhole ? `${pinhole.y}px` : "unset";
    }
    if (topRight.current) {
      topRight.current.style.left = pinhole ? `${pinhole.x + pinhole.width}px` : "0";
      topRight.current.style.height = pinhole ? `${pinhole.y}px` : "unset";
    }
    if (right.current) {
      right.current.style.top = pinhole ? `${pinhole.y}px` : "0";
      right.current.style.left = pinhole ? `${pinhole.x + pinhole.width}px` : "0";
      right.current.style.height = pinhole ? `${pinhole.height}px` : "unset";
    }
    if (bottomRight.current) {
      bottomRight.current.style.left = pinhole ? `${pinhole.x + pinhole.width}px` : "0";
      bottomRight.current.style.top = pinhole ? `${pinhole.y + pinhole.height}px` : "unset";
    }
    if (bottom.current) {
      bottom.current.style.left = pinhole ? `${pinhole.x}px` : "0";
      bottom.current.style.width = pinhole ? `${pinhole.width}px` : "unset";
      bottom.current.style.top = pinhole ? `${pinhole.y + pinhole.height}px` : "unset";
    }
    if (bottomLeft.current) {
      bottomLeft.current.style.width = pinhole ? `${pinhole.x}px` : "0";
      bottomLeft.current.style.top = pinhole ? `${pinhole.y + pinhole.height}px` : "unset";
    }
  }, [pinhole]);
  const handleClick = React9.useCallback(
    (event) => {
      if (onClick) {
        onClick(event);
      }
    },
    [onClick]
  );
  return /* @__PURE__ */ React9.createElement(PinholeOverlayRoot, { ref, className }, pinhole ? /* @__PURE__ */ React9.createElement(React9.Fragment, null, /* @__PURE__ */ React9.createElement("div", { key: "left", ref: left, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "topLeft", ref: topLeft, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "top", ref: top, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "topRight", ref: topRight, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "right", ref: right, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "bottomRight", ref: bottomRight, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "bottom", ref: bottom, onClick: handleClick }), /* @__PURE__ */ React9.createElement("div", { key: "bottomLeft", ref: bottomLeft, onClick: handleClick })) : (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    /* @__PURE__ */ React9.createElement("div", { key: "full", onClick: handleClick })
  ));
});

// src/toolpad/AppEditor/pageLayout.ts
import * as appDom4 from "@toolpad/studio-runtime/appDom";
function deleteOrphanedLayoutNodes(domBeforeChange, domAfterChange, movedOrDeletedNode, moveTargetNodeId = null) {
  let updatedDom = domAfterChange;
  let orphanedLayoutNodeIds = [];
  const movedOrDeletedNodeParentProp = movedOrDeletedNode.parentProp;
  const parent = appDom4.getParent(domBeforeChange, movedOrDeletedNode);
  const parentParent = parent && appDom4.getParent(domBeforeChange, parent);
  const parentParentParent = parentParent && appDom4.getParent(domBeforeChange, parentParent);
  const parentChildren = parent && movedOrDeletedNodeParentProp ? appDom4.getChildNodes(domBeforeChange, parent)[movedOrDeletedNodeParentProp] : [];
  const isOnlyLayoutContainerChild = parent && appDom4.isElement(parent) && isPageLayoutComponent(parent) && parentChildren.length === 1;
  const isParentOnlyLayoutContainerChild = parentParent && parent.parentProp && appDom4.isElement(parentParent) && isPageLayoutComponent(parentParent) && appDom4.getChildNodes(domBeforeChange, parentParent)[parent.parentProp].length === 1;
  const isSecondLastLayoutContainerChild = parent && appDom4.isElement(parent) && isPageLayoutComponent(parent) && parentChildren.length === 2;
  if (isSecondLastLayoutContainerChild) {
    if (parent.parentIndex && parentParent) {
      const lastContainerChild = parentChildren.filter(
        (child) => child.id !== movedOrDeletedNode.id
      )[0];
      if (lastContainerChild.parentProp && parentParent.parentIndex && moveTargetNodeId !== lastContainerChild.id) {
        if (moveTargetNodeId !== parent.id && (appDom4.isPage(parentParent) || appDom4.isElement(parentParent) && getElementNodeComponentId(lastContainerChild) !== getElementNodeComponentId(parentParent))) {
          updatedDom = appDom4.moveNode(
            updatedDom,
            lastContainerChild,
            parentParent,
            lastContainerChild.parentProp || "children",
            parent.parentIndex
          );
          if (isPageColumn(parent)) {
            updatedDom = appDom4.setNodeNamespacedProp(
              updatedDom,
              lastContainerChild,
              "layout",
              "columnSize",
              parent.layout?.columnSize || 1
            );
          }
          if (isPageColumn(lastContainerChild) && appDom4.isPage(parentParent)) {
            updatedDom = appDom4.spreadNode(updatedDom, lastContainerChild);
          }
          orphanedLayoutNodeIds = [...orphanedLayoutNodeIds, parent.id];
        }
        if (parentParentParent && appDom4.isElement(parentParentParent) && isPageLayoutComponent(parentParentParent) && isParentOnlyLayoutContainerChild) {
          updatedDom = appDom4.moveNode(
            updatedDom,
            lastContainerChild,
            parentParentParent,
            lastContainerChild.parentProp,
            parentParent.parentIndex
          );
          if (isPageColumn(parentParent)) {
            updatedDom = appDom4.setNodeNamespacedProp(
              updatedDom,
              lastContainerChild,
              "layout",
              "columnSize",
              parentParent.layout?.columnSize || 1
            );
          }
          orphanedLayoutNodeIds = [...orphanedLayoutNodeIds, parentParent.id];
        }
      }
    }
  }
  if (isOnlyLayoutContainerChild) {
    if (isParentOnlyLayoutContainerChild && moveTargetNodeId !== parentParent.id) {
      orphanedLayoutNodeIds = [...orphanedLayoutNodeIds, parentParent.id];
    }
    orphanedLayoutNodeIds = [...orphanedLayoutNodeIds, parent.id];
  }
  orphanedLayoutNodeIds.forEach((nodeId) => {
    updatedDom = appDom4.removeMaybeNode(updatedDom, nodeId);
  });
  return updatedDom;
}
function normalizePageRowColumnSizes(dom, pageNode) {
  const allPageNodes = appDom4.getDescendants(dom, pageNode);
  allPageNodes.forEach((node) => {
    if (appDom4.isElement(node) && isPageRow(node)) {
      const nodeChildren = appDom4.getChildNodes(dom, node).children;
      const nodeChildrenCount = nodeChildren.length;
      const columnSizes = nodeChildren.map((child) => child.layout?.columnSize || 1);
      const totalColumnsSize = columnSizes.reduce((acc, size) => acc + size, 0);
      if (totalColumnsSize.toFixed(4) !== nodeChildrenCount.toFixed(4)) {
        const normalizedLayoutColumnSizes = columnSizes.map(
          (size) => size * nodeChildren.length / totalColumnsSize
        );
        nodeChildren.forEach((child, childIndex) => {
          dom = appDom4.setNodeNamespacedProp(
            dom,
            child,
            "layout",
            "columnSize",
            normalizedLayoutColumnSizes[childIndex]
          );
        });
      }
    }
  });
  return dom;
}
function removePageLayoutNode(dom, node) {
  const pageNode = appDom4.getPageAncestor(dom, node);
  let updatedDom = dom;
  updatedDom = appDom4.removeMaybeNode(updatedDom, node.id);
  updatedDom = deleteOrphanedLayoutNodes(dom, updatedDom, node);
  if (pageNode) {
    updatedDom = normalizePageRowColumnSizes(updatedDom, pageNode);
  }
  return updatedDom;
}

// src/toolpad/AppEditor/PageEditor/RenderPanel/RenderOverlay.tsx
var VERTICAL_RESIZE_SNAP_UNITS = 4;
var overlayClasses = {
  hud: "Toolpad_Hud",
  nodeHud: "Toolpad_NodeHud",
  container: "Toolpad_Container",
  hudOverlay: "Toolpad_HudOverlay",
  nodeDrag: "Toolpad_NodeDrag",
  resizeHorizontal: "Toolpad_ResizeHorizontal",
  resizeVertical: "Toolpad_ResizeVertical"
};
var OverlayRoot = styled7("div")({
  pointerEvents: "none",
  width: "100%",
  height: "100%",
  "&:focus": {
    outline: "none"
  },
  [`&.${overlayClasses.nodeDrag}`]: {
    cursor: "copy"
  },
  [`&.${overlayClasses.resizeHorizontal}`]: {
    cursor: "ew-resize"
  },
  [`&.${overlayClasses.resizeVertical}`]: {
    cursor: "ns-resize"
  },
  [`.${overlayClasses.hudOverlay}`]: {
    position: "absolute",
    inset: "0 0 0 0"
  }
});
function findAreaAt(areaRects, x, y) {
  const rectEntries = Object.entries(areaRects);
  for (let i = rectEntries.length - 1; i >= 0; i -= 1) {
    const areaRectEntry = rectEntries[i];
    const areaId = areaRectEntry[0];
    const areaRect = areaRectEntry[1];
    if (rectContainsPoint(areaRect, x, y)) {
      return areaId;
    }
  }
  return null;
}
function hasFreeNodeSlots(nodeInfo) {
  return Object.keys(nodeInfo.slots || []).length > 0;
}
function getRectangleEdgeDropZone(edge) {
  switch (edge) {
    case RECTANGLE_EDGE_TOP:
      return DROP_ZONE_TOP;
    case RECTANGLE_EDGE_RIGHT:
      return DROP_ZONE_RIGHT;
    case RECTANGLE_EDGE_BOTTOM:
      return DROP_ZONE_BOTTOM;
    case RECTANGLE_EDGE_LEFT:
      return DROP_ZONE_LEFT;
    default:
      return null;
  }
}
function getDropAreaId(nodeId, parentProp) {
  return `${nodeId}:${parentProp}`;
}
function getDropAreaNodeId(dropAreaId) {
  return dropAreaId.split(":")[0];
}
function getDropAreaParentProp(dropAreaId) {
  return dropAreaId.split(":")[1] || null;
}
function RenderOverlay({ bridge }) {
  const { dom } = useAppState();
  const { currentView } = useAppState();
  const selectedNodeId = currentView.kind === "page" ? currentView.selectedNodeId : null;
  const hoveredNodeId = currentView.kind === "page" ? currentView.hoveredNodeId : null;
  const domApi = useDomApi();
  const appStateApi = useAppStateApi();
  const api = usePageEditorApi();
  const {
    viewState,
    nodeId: pageNodeId,
    newNode,
    draggedNodeId,
    draggedEdge,
    dragOverNodeId,
    dragOverSlotParentProp,
    dragOverZone,
    isDraggingOver
  } = usePageEditorState();
  const { nodes: nodesInfo } = viewState;
  const pageNode = appDom5.getNode(dom, pageNodeId, "page");
  const pageNodes = React10.useMemo(() => {
    return [pageNode, ...appDom5.getDescendants(dom, pageNode)];
  }, [dom, pageNode]);
  const selectedNode = selectedNodeId && appDom5.getMaybeNode(dom, selectedNodeId);
  const overlayRef = React10.useRef(null);
  const draggedNode = React10.useMemo(
    () => newNode || draggedNodeId && appDom5.getNode(dom, draggedNodeId, "element"),
    [dom, draggedNodeId, newNode]
  );
  const selectionRects = React10.useMemo(() => {
    const rects = {};
    pageNodes.forEach((node) => {
      const nodeInfo = nodesInfo[node.id];
      const nodeRect = nodeInfo?.rect || null;
      if (nodeRect) {
        rects[node.id] = nodeRect;
      }
    });
    return rects;
  }, [nodesInfo, pageNodes]);
  const selectNode = React10.useCallback(
    (nodeId) => {
      if (selectedNodeId !== nodeId) {
        appStateApi.selectNode(nodeId);
      }
    },
    [appStateApi, selectedNodeId]
  );
  const deselectNode = React10.useCallback(() => {
    if (selectedNodeId) {
      appStateApi.deselectNode();
    }
  }, [appStateApi, selectedNodeId]);
  const handleNodeMouseUp = React10.useCallback(
    (event) => {
      const cursorPos = bridge?.canvasCommands.getViewCoordinates(event.clientX, event.clientY);
      if (!cursorPos || draggedNodeId) {
        return;
      }
      const newSelectedNodeId = findAreaAt(selectionRects, cursorPos.x, cursorPos.y);
      const newSelectedNode = newSelectedNodeId && appDom5.getMaybeNode(dom, newSelectedNodeId);
      if (newSelectedNode && appDom5.isElement(newSelectedNode)) {
        selectNode(newSelectedNodeId);
      } else {
        deselectNode();
      }
    },
    [bridge, deselectNode, dom, draggedNodeId, selectNode, selectionRects]
  );
  const handleNodeDelete = React10.useCallback(
    (nodeId) => (event) => {
      if (event) {
        event.stopPropagation();
      }
      appStateApi.update(
        (draft) => {
          const toRemove = appDom5.getNode(draft, nodeId);
          if (appDom5.isElement(toRemove)) {
            draft = removePageLayoutNode(draft, toRemove);
          }
          return draft;
        },
        currentView.kind === "page" ? {
          ...currentView,
          selectedNodeId: null
        } : currentView
      );
    },
    [appStateApi, currentView]
  );
  const selectedRect = selectedNode && !newNode && nodesInfo[selectedNode.id]?.rect || null;
  const interactiveNodes = React10.useMemo(() => {
    if (!selectedNode) {
      return /* @__PURE__ */ new Set();
    }
    return new Set(
      [...appDom5.getPageAncestors(dom, selectedNode), selectedNode].map(
        (interactiveNode) => interactiveNode.id
      )
    );
  }, [dom, selectedNode]);
  const handleNodeDragStart = React10.useCallback(
    (node) => (event) => {
      event.stopPropagation();
      if (appDom5.isElement(node)) {
        event.dataTransfer.dropEffect = "move";
        selectNode(node.id);
        api.existingNodeDragStart(node);
      }
    },
    [api, selectNode]
  );
  const handleNodeDuplicate = React10.useCallback(
    (node) => (event) => {
      event.stopPropagation();
      domApi.update((draft) => {
        draft = appDom5.duplicateNode(draft, node);
        draft = normalizePageRowColumnSizes(draft, pageNode);
        return draft;
      });
    },
    [domApi, pageNode]
  );
  const getNodeDraggableHorizontalEdges = React10.useCallback(
    (node) => {
      const nodeParentProp = node.parentProp;
      const parent = appDom5.getParent(dom, node);
      const isFirstChild = parent && appDom5.isElement(parent) && nodeParentProp ? appDom5.getNodeFirstChild(dom, parent, nodeParentProp)?.id === node.id : false;
      const isLastChild = parent && appDom5.isElement(parent) && nodeParentProp ? appDom5.getNodeLastChild(dom, parent, nodeParentProp)?.id === node.id : false;
      const isPageRowChild = parent ? appDom5.isElement(parent) && isPageRow(parent) : false;
      const isDraggableLeft = isPageRowChild ? !isFirstChild : false;
      const isDraggableRight = isPageRowChild ? !isLastChild : false;
      return [
        ...isDraggableLeft ? [RECTANGLE_EDGE_LEFT] : [],
        ...isDraggableRight ? [RECTANGLE_EDGE_RIGHT] : []
      ];
    },
    [dom]
  );
  const handleEdgeDragStart = React10.useCallback(
    (node) => (edge) => (event) => {
      event.stopPropagation();
      const parent = appDom5.getParent(dom, node);
      const isPageColumnChild = parent ? appDom5.isElement(parent) && isPageColumn(parent) : false;
      const isResizingVertically = edge === RECTANGLE_EDGE_TOP || edge === RECTANGLE_EDGE_BOTTOM;
      const nodeToResize = parent && isPageColumnChild && !isResizingVertically ? parent : node;
      api.edgeDragStart({ nodeId: nodeToResize.id, edge });
      selectNode(nodeToResize.id);
    },
    [api, dom, selectNode]
  );
  const handleKeyDown = React10.useCallback(
    (event) => {
      if (selectedNodeId && event.key === "Backspace") {
        handleNodeDelete(selectedNodeId)();
      }
    },
    [handleNodeDelete, selectedNodeId]
  );
  const isEmptyPage = pageNodes.length <= 1;
  const availableDropTargets = React10.useMemo(() => {
    if (!draggedNode) {
      return [];
    }
    let excludedNodes = /* @__PURE__ */ new Set();
    if (selectedNode && !newNode) {
      excludedNodes = /* @__PURE__ */ new Set([
        selectedNode,
        ...appDom5.getDescendants(dom, selectedNode)
      ]);
    }
    if (isFormComponent(draggedNode)) {
      const formNodes = appDom5.getComponentTypeNodes(dom, FORM_COMPONENT_ID);
      const formNodeDescendants = formNodes.map((formNode) => appDom5.getDescendants(dom, formNode)).flat();
      formNodeDescendants.forEach(excludedNodes.add, excludedNodes);
    }
    return pageNodes.filter((n) => !excludedNodes.has(n));
  }, [dom, draggedNode, newNode, pageNodes, selectedNode]);
  const availableDropTargetIds = React10.useMemo(
    () => new Set(availableDropTargets.map((n) => n.id)),
    [availableDropTargets]
  );
  const availableDropZones = React10.useMemo(() => {
    const dragOverNode = dragOverNodeId && appDom5.getNode(dom, dragOverNodeId);
    const dragOverNodeInfo = dragOverNodeId && nodesInfo[dragOverNodeId];
    const dragOverNodeParentProp = dragOverNode?.parentProp;
    const dragOverNodeSlots = dragOverNodeInfo?.slots;
    const dragOverSlot = dragOverNodeSlots && dragOverSlotParentProp && dragOverNodeSlots[dragOverSlotParentProp];
    const dragOverParent = dragOverNode && appDom5.getParent(dom, dragOverNode);
    const dragOverParentInfo = dragOverParent && nodesInfo[dragOverParent.id];
    const dragOverParentFreeSlots = dragOverParentInfo?.slots;
    const dragOverParentFreeSlot = dragOverParentFreeSlots && dragOverNodeParentProp && dragOverParentFreeSlots[dragOverNodeParentProp];
    const isDraggingOverLayoutChild = dragOverParent && dragOverParentFreeSlot ? appDom5.isPage(dragOverParent) || dragOverParentFreeSlot.type === "layout" : false;
    const isDraggingOverPageRowChild = dragOverParent && appDom5.isElement(dragOverParent) ? isPageRow(dragOverParent) : false;
    const isDraggingOverPageColumnChild = dragOverParent && appDom5.isElement(dragOverParent) ? isPageColumn(dragOverParent) : false;
    const isDraggingOverHorizontalContainerChild = dragOverParentFreeSlot ? isHorizontalFlow(dragOverParentFreeSlot.flowDirection) : false;
    const isDraggingOverVerticalContainerChild = dragOverParentFreeSlot ? isVerticalFlow(dragOverParentFreeSlot.flowDirection) : false;
    const hasChildHorizontalDropZones = !isDraggingOverVerticalContainerChild || isDraggingOverLayoutChild || isDraggingOverPageColumnChild;
    const hasChildVerticalDropZones = !isDraggingOverHorizontalContainerChild || isDraggingOverLayoutChild || isDraggingOverPageRowChild;
    if (draggedNode && dragOverNode) {
      if (appDom5.isPage(dragOverNode)) {
        return [...isEmptyPage ? [] : [DROP_ZONE_TOP], DROP_ZONE_CENTER];
      }
      if (dragOverNodeInfo && !hasFreeNodeSlots(dragOverNodeInfo) && !dragOverParentFreeSlot) {
        return [];
      }
      const isDraggingPageRow = draggedNode ? isPageRow(draggedNode) : false;
      const isDraggingPageColumn = draggedNode ? isPageColumn(draggedNode) : false;
      const isDraggingOverHorizontalContainer = dragOverSlot && isHorizontalFlow(dragOverSlot.flowDirection);
      const isDraggingOverVerticalContainer = dragOverSlot && isVerticalFlow(dragOverSlot.flowDirection);
      const isDraggingOverPageRow = appDom5.isElement(dragOverNode) && isPageRow(dragOverNode);
      if (isDraggingPageRow) {
        return [
          ...hasChildVerticalDropZones ? [DROP_ZONE_TOP, DROP_ZONE_BOTTOM] : [],
          ...isDraggingOverVerticalContainer ? [DROP_ZONE_CENTER] : []
        ];
      }
      if (isDraggingPageColumn) {
        return [
          ...hasChildHorizontalDropZones ? [DROP_ZONE_RIGHT, DROP_ZONE_LEFT] : [],
          ...isDraggingOverPageRow && hasChildVerticalDropZones ? [DROP_ZONE_TOP, DROP_ZONE_BOTTOM] : [],
          ...isDraggingOverHorizontalContainer ? [DROP_ZONE_CENTER] : []
        ];
      }
      if (isDraggingOverHorizontalContainer) {
        return [
          DROP_ZONE_TOP,
          DROP_ZONE_BOTTOM,
          DROP_ZONE_CENTER,
          ...isDraggingOverLayoutChild ? [DROP_ZONE_LEFT, DROP_ZONE_RIGHT] : []
        ];
      }
      if (isDraggingOverVerticalContainer) {
        return [DROP_ZONE_RIGHT, DROP_ZONE_LEFT, DROP_ZONE_CENTER];
      }
    }
    return [
      ...hasChildHorizontalDropZones ? [DROP_ZONE_RIGHT, DROP_ZONE_LEFT] : [],
      ...hasChildVerticalDropZones ? [DROP_ZONE_TOP, DROP_ZONE_BOTTOM] : []
    ];
  }, [dom, dragOverNodeId, dragOverSlotParentProp, draggedNode, isEmptyPage, nodesInfo]);
  const dropAreaRects = React10.useMemo(() => {
    const rects = {};
    pageNodes.forEach((node) => {
      const nodeId = node.id;
      const nodeInfo = nodesInfo[nodeId];
      const nodeRect = nodeInfo?.rect;
      const nodeParentProp = node.parentProp;
      const nodeSlots = nodeInfo?.slots || [];
      const nodeSlotEntries = Object.entries(nodeSlots);
      const hasFreeSlots = nodeSlotEntries.length > 0;
      const baseRects = [
        nodeRect,
        ...nodeSlotEntries.map(([, slot]) => slot ? slot.rect : null).filter(Boolean)
      ];
      baseRects.forEach((baseRect, baseRectIndex) => {
        const parent = appDom5.getParent(dom, node);
        const parentInfo = parent && nodesInfo[parent.id];
        const parentRect = parentInfo?.rect;
        const parentProp = hasFreeSlots ? Object.keys(nodeSlots)[baseRectIndex - 1] : null;
        let parentAwareBaseRect = baseRect;
        const isPageChild = parent ? appDom5.isPage(parent) : false;
        if (nodeInfo && parentInfo && baseRect && (isPageChild || appDom5.isElement(parent)) && hasFreeNodeSlots(parentInfo)) {
          const parentChildren = nodeParentProp ? appDom5.getChildNodes(dom, parent)[nodeParentProp] : [];
          const parentChildrenCount = parentChildren.length;
          const isFirstChild = parentChildrenCount > 0 ? parentChildren[0].id === node.id : true;
          const isLastChild = parentChildren.length > 0 ? parentChildren[parentChildrenCount - 1].id === node.id : true;
          let gapCount = 2;
          if (isFirstChild || isLastChild) {
            gapCount = 1;
          }
          if (isFirstChild && isLastChild) {
            gapCount = 0;
          }
          const parentSlots = parentInfo?.slots;
          const parentSlot = parentSlots && nodeParentProp && parentSlots[nodeParentProp] || null;
          const isParentVerticalContainer = parentSlot ? isVerticalFlow(parentSlot.flowDirection) : false;
          const isParentHorizontalContainer = parentSlot ? isHorizontalFlow(parentSlot.flowDirection) : false;
          const isParentReverseContainer = parentSlot ? isReverseFlow(parentSlot.flowDirection) : false;
          let parentGap = 0;
          if (nodesInfo && gapCount > 0) {
            const firstChildInfo = nodesInfo[parentChildren[0].id];
            const secondChildInfo = nodesInfo[parentChildren[1].id];
            const firstChildRect = firstChildInfo?.rect;
            const secondChildRect = secondChildInfo?.rect;
            if (firstChildRect && secondChildRect) {
              if (isParentHorizontalContainer) {
                parentGap = (isParentReverseContainer ? firstChildRect.x - secondChildRect.x - secondChildRect.width : secondChildRect.x - firstChildRect.x - firstChildRect.width) / 2;
              }
              if (isParentVerticalContainer) {
                parentGap = (isParentReverseContainer ? firstChildRect.y - secondChildRect.y - secondChildRect.height : secondChildRect.y - firstChildRect.y - firstChildRect.height) / 2;
              }
            }
          }
          const hasPositionGap = isParentReverseContainer ? isLastChild : isFirstChild;
          if (isParentVerticalContainer) {
            parentAwareBaseRect = {
              x: isPageChild ? 0 : baseRect.x,
              y: hasPositionGap ? baseRect.y : baseRect.y - parentGap,
              width: isPageChild && parentRect ? parentRect.x * 2 + parentRect.width : baseRect.width,
              height: baseRect.height + gapCount * parentGap
            };
          }
          if (isParentHorizontalContainer) {
            parentAwareBaseRect = {
              ...baseRect,
              x: hasPositionGap ? baseRect.x : baseRect.x - parentGap,
              width: baseRect.width + gapCount * parentGap
            };
          }
          if (parentAwareBaseRect) {
            if (parentProp) {
              rects[getDropAreaId(nodeId, parentProp)] = parentAwareBaseRect;
            } else {
              rects[nodeId] = parentAwareBaseRect;
            }
          }
        } else if (parentProp && baseRect) {
          rects[getDropAreaId(nodeId, parentProp)] = baseRect;
        } else if (baseRect) {
          rects[nodeId] = baseRect;
        }
      });
    });
    return rects;
  }, [dom, nodesInfo, pageNodes]);
  const getDropAreaRect = React10.useCallback(
    (nodeId, parentProp) => {
      if (parentProp) {
        const dropAreaId = getDropAreaId(nodeId, parentProp);
        return dropAreaRects[dropAreaId];
      }
      return dropAreaRects[nodeId];
    },
    [dropAreaRects]
  );
  const handleNodeDragOver = React10.useCallback(
    (event) => {
      event.preventDefault();
      const cursorPos = bridge?.canvasCommands.getViewCoordinates(event.clientX, event.clientY);
      if (!cursorPos || !draggedNode) {
        return;
      }
      const activeDropAreaId = findAreaAt(dropAreaRects, cursorPos.x, cursorPos.y);
      const activeDropNodeId = activeDropAreaId && getDropAreaNodeId(activeDropAreaId) || pageNode.id;
      const activeDropNode = appDom5.getNode(dom, activeDropNodeId);
      const activeDropNodeInfo = nodesInfo[activeDropNodeId];
      const activeDropNodeRect = activeDropNodeInfo?.rect;
      const activeDropNodeParent = appDom5.getParent(dom, activeDropNode);
      const activeDropNodeSiblings = appDom5.getSiblings(dom, activeDropNode);
      const isDraggingOverPage = appDom5.isPage(activeDropNode);
      const isDraggingOverElement = appDom5.isElement(activeDropNode);
      const activeDropSlotParentProp = isDraggingOverPage ? "children" : activeDropAreaId && getDropAreaParentProp(activeDropAreaId);
      const isDraggingOverContainer = activeDropNodeInfo ? hasFreeNodeSlots(activeDropNodeInfo) && activeDropSlotParentProp : false;
      let activeDropZone = null;
      const activeDropNodeSlots = activeDropNodeInfo?.slots || null;
      const activeDropSlot = activeDropNodeSlots && activeDropSlotParentProp && activeDropNodeSlots[activeDropSlotParentProp];
      const activeDropNodeChildren = activeDropSlotParentProp && (isDraggingOverPage || appDom5.isElement(activeDropNode)) && appDom5.getChildNodes(dom, activeDropNode)[activeDropSlotParentProp] || [];
      const isDraggingOverEmptyContainer = activeDropNodeInfo ? isDraggingOverContainer && activeDropNodeChildren.length === 0 : false;
      const activeDropAreaRect = isDraggingOverContainer && activeDropSlotParentProp ? getDropAreaRect(activeDropNodeId, activeDropSlotParentProp) : getDropAreaRect(activeDropNodeId);
      if (activeDropAreaRect) {
        const relativeX = cursorPos.x - activeDropAreaRect.x;
        const relativeY = cursorPos.y - activeDropAreaRect.y;
        activeDropZone = isDraggingOverEmptyContainer ? DROP_ZONE_CENTER : getRectangleEdgeDropZone(
          getRectanglePointActiveEdge(activeDropAreaRect, relativeX, relativeY)
        );
        if (isDraggingOverPage) {
          if (activeDropNodeRect && relativeY < 0 && !isEmptyPage) {
            activeDropZone = DROP_ZONE_TOP;
          } else {
            activeDropZone = DROP_ZONE_CENTER;
          }
        }
        const edgeDetectionMargin = 10;
        if (isDraggingOverElement && activeDropNodeInfo) {
          const isDraggingOverPageChild = activeDropNodeParent ? appDom5.isPage(activeDropNodeParent) : false;
          if (!activeDropSlot || isHorizontalFlow(activeDropSlot.flowDirection)) {
            if (isDraggingOverPageChild && activeDropNodeRect && relativeX <= activeDropNodeRect.x) {
              activeDropZone = DROP_ZONE_LEFT;
            } else if (isDraggingOverPageChild && activeDropNodeRect && relativeX >= activeDropNodeRect.x + activeDropNodeRect.width) {
              activeDropZone = DROP_ZONE_RIGHT;
            } else if (relativeY <= edgeDetectionMargin && !isDraggingOverEmptyContainer) {
              activeDropZone = DROP_ZONE_TOP;
            } else if (activeDropAreaRect.height - relativeY <= edgeDetectionMargin && !isDraggingOverEmptyContainer) {
              activeDropZone = DROP_ZONE_BOTTOM;
            } else if (activeDropSlot) {
              activeDropZone = DROP_ZONE_CENTER;
            }
          }
          if (activeDropSlot && !isDraggingOverEmptyContainer && isVerticalFlow(activeDropSlot.flowDirection)) {
            if (relativeX <= edgeDetectionMargin) {
              activeDropZone = DROP_ZONE_LEFT;
            } else if (activeDropAreaRect.width - relativeX <= edgeDetectionMargin) {
              activeDropZone = DROP_ZONE_RIGHT;
            } else {
              activeDropZone = DROP_ZONE_CENTER;
            }
          }
        }
      }
      const hasChangedDropArea = activeDropNodeId !== dragOverNodeId || activeDropSlotParentProp !== dragOverSlotParentProp || activeDropZone !== dragOverZone;
      if (activeDropZone && hasChangedDropArea && availableDropTargetIds.has(activeDropNodeId)) {
        const isDragOverParentPageRow = activeDropNodeParent && appDom5.isElement(activeDropNodeParent) && isPageRow(activeDropNodeParent);
        const activeDropNodeParentParent = activeDropNodeParent && appDom5.getParent(dom, activeDropNodeParent);
        const activeDropNodeParentParentInfo = activeDropNodeParentParent && nodesInfo[activeDropNodeParentParent.id];
        const hasActiveDropNodeParentParentSlot = !!(activeDropNodeParentParentInfo?.slots && activeDropNodeParentParentInfo?.slots[activeDropSlotParentProp || "children"]);
        const hasDragOverParentRowOverride = isDragOverParentPageRow && hasActiveDropNodeParentParentSlot && activeDropNodeSiblings.length === 0 && (activeDropZone === DROP_ZONE_TOP || activeDropZone === DROP_ZONE_BOTTOM);
        api.nodeDragOver({
          nodeId: hasDragOverParentRowOverride ? activeDropNodeParent.id : activeDropNodeId,
          parentProp: activeDropSlotParentProp,
          zone: activeDropZone
        });
      }
    },
    [
      bridge,
      draggedNode,
      dropAreaRects,
      pageNode.id,
      dom,
      nodesInfo,
      getDropAreaRect,
      dragOverNodeId,
      dragOverSlotParentProp,
      dragOverZone,
      availableDropTargetIds,
      isEmptyPage,
      api
    ]
  );
  const handleNodeDrop = React10.useCallback(
    (event) => {
      const cursorPos = bridge?.canvasCommands.getViewCoordinates(event.clientX, event.clientY);
      if (!draggedNode || !cursorPos || !dragOverNodeId || !dragOverZone || !availableDropZones.includes(dragOverZone)) {
        return;
      }
      let dragOverNode = appDom5.getNode(dom, dragOverNodeId);
      if (!appDom5.isElement(dragOverNode) && !appDom5.isPage(dragOverNode)) {
        return;
      }
      const dragOverNodeInfo = nodesInfo[dragOverNodeId];
      const dragOverNodeParentProp = dragOverNode?.parentProp || null;
      if (!dragOverNodeParentProp) {
        return;
      }
      const dragOverNodeSlots = dragOverNodeInfo?.slots || null;
      const dragOverSlot = dragOverNodeSlots && dragOverSlotParentProp && dragOverNodeSlots[dragOverSlotParentProp] || null;
      const isDraggingOverLayout = dragOverNode && dragOverSlot ? appDom5.isPage(dragOverNode) || dragOverSlot.type === "layout" : false;
      const isDraggingOverElement = appDom5.isElement(dragOverNode);
      appStateApi.update(
        (draft) => {
          let parent = appDom5.getParent(draft, dragOverNode);
          const originalParent = parent;
          const originalParentInfo = parent && nodesInfo[parent.id];
          const originalParentFreeSlots = originalParentInfo?.slots;
          const originalParentFreeSlot = originalParentFreeSlots && dragOverNodeParentProp && originalParentFreeSlots[dragOverNodeParentProp];
          const isOriginalParentLayout = originalParent && originalParentFreeSlot ? appDom5.isPage(originalParent) || originalParentFreeSlot.type === "layout" : false;
          const isOriginalParentRow = originalParent && appDom5.isElement(originalParent) ? isPageRow(originalParent) : false;
          const isOriginalParentColumn = originalParent && appDom5.isElement(originalParent) ? isPageColumn(originalParent) : false;
          const isMovingNode = selectedNodeId && !newNode;
          let addOrMoveNode = appDom5.addNode;
          if (isMovingNode) {
            addOrMoveNode = appDom5.moveNode;
          }
          if (isDraggingOverLayout && dragOverSlotParentProp) {
            const newParentIndex = dragOverZone === DROP_ZONE_TOP ? appDom5.getNewFirstParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp) : appDom5.getNewLastParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp);
            draft = addOrMoveNode(
              draft,
              draggedNode,
              dragOverNode,
              dragOverSlotParentProp,
              newParentIndex
            );
          }
          if (isDraggingOverElement && parent && (appDom5.isPage(parent) || appDom5.isElement(parent))) {
            const isDraggingOverRow = isDraggingOverElement && isPageRow(dragOverNode);
            const isDraggingOverHorizontalContainer = dragOverSlot ? isHorizontalFlow(dragOverSlot.flowDirection) : false;
            const isDraggingOverVerticalContainer = dragOverSlot ? isVerticalFlow(dragOverSlot.flowDirection) : false;
            if (dragOverZone === DROP_ZONE_CENTER && dragOverSlotParentProp) {
              draft = addOrMoveNode(draft, draggedNode, dragOverNode, dragOverSlotParentProp);
            }
            if ([DROP_ZONE_TOP, DROP_ZONE_BOTTOM].includes(dragOverZone)) {
              if (!isDraggingOverVerticalContainer) {
                const newParentIndex = dragOverZone === DROP_ZONE_TOP ? appDom5.getNewParentIndexBeforeNode(
                  draft,
                  dragOverNode,
                  dragOverNodeParentProp
                ) : appDom5.getNewParentIndexAfterNode(
                  draft,
                  dragOverNode,
                  dragOverNodeParentProp
                );
                if (isDraggingOverRow && !isPageRow(draggedNode)) {
                  draft = addOrMoveNode(
                    draft,
                    draggedNode,
                    parent,
                    dragOverNodeParentProp,
                    newParentIndex
                  );
                }
                if (isOriginalParentRow) {
                  const columnContainer = appDom5.createElement(
                    draft,
                    PAGE_COLUMN_COMPONENT_ID,
                    {},
                    {
                      columnSize: dragOverNode.layout?.columnSize || 1
                    }
                  );
                  draft = appDom5.setNodeNamespacedProp(
                    draft,
                    dragOverNode,
                    "layout",
                    "columnSize",
                    1
                  );
                  dragOverNode = appDom5.getNode(draft, dragOverNodeId);
                  draft = appDom5.addNode(
                    draft,
                    columnContainer,
                    parent,
                    dragOverNodeParentProp,
                    appDom5.getNewParentIndexAfterNode(draft, dragOverNode, dragOverNodeParentProp)
                  );
                  parent = columnContainer;
                  if (dragOverZone === DROP_ZONE_BOTTOM) {
                    draft = appDom5.moveNode(draft, dragOverNode, parent, dragOverNodeParentProp);
                  }
                }
                if (!isDraggingOverRow || isPageRow(draggedNode)) {
                  draft = addOrMoveNode(
                    draft,
                    draggedNode,
                    parent,
                    dragOverNodeParentProp,
                    newParentIndex
                  );
                }
                if (isOriginalParentRow && !isDraggingOverVerticalContainer && dragOverZone === DROP_ZONE_TOP) {
                  draft = appDom5.moveNode(draft, dragOverNode, parent, dragOverNodeParentProp);
                }
              }
              if (dragOverSlotParentProp && isDraggingOverVerticalContainer) {
                const isDraggingOverDirectionStart = dragOverZone === (dragOverSlot?.flowDirection === "column" ? DROP_ZONE_TOP : DROP_ZONE_BOTTOM);
                const newParentIndex = isDraggingOverDirectionStart ? appDom5.getNewFirstParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp) : appDom5.getNewLastParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp);
                draft = addOrMoveNode(
                  draft,
                  draggedNode,
                  dragOverNode,
                  dragOverSlotParentProp,
                  newParentIndex
                );
              }
            }
            if ([DROP_ZONE_RIGHT, DROP_ZONE_LEFT].includes(dragOverZone)) {
              if (!isDraggingOverHorizontalContainer) {
                const hasNewPageRow = isOriginalParentLayout || isOriginalParentColumn;
                if (hasNewPageRow) {
                  const rowContainer = appDom5.createElement(draft, PAGE_ROW_COMPONENT_ID, {
                    justifyContent: originalParentInfo?.props.alignItems || "start"
                  });
                  draft = appDom5.addNode(
                    draft,
                    rowContainer,
                    parent,
                    dragOverNodeParentProp,
                    appDom5.getNewParentIndexAfterNode(draft, dragOverNode, dragOverNodeParentProp)
                  );
                  parent = rowContainer;
                  if (dragOverZone === DROP_ZONE_RIGHT) {
                    draft = appDom5.moveNode(draft, dragOverNode, parent, "children");
                  }
                }
                const newParentIndex = dragOverZone === DROP_ZONE_RIGHT ? appDom5.getNewParentIndexAfterNode(draft, dragOverNode, dragOverNodeParentProp) : appDom5.getNewParentIndexBeforeNode(
                  draft,
                  dragOverNode,
                  dragOverNodeParentProp
                );
                draft = addOrMoveNode(
                  draft,
                  draggedNode,
                  parent,
                  hasNewPageRow ? "children" : dragOverNodeParentProp,
                  newParentIndex
                );
                if (hasNewPageRow && dragOverZone === DROP_ZONE_LEFT) {
                  draft = appDom5.moveNode(draft, dragOverNode, parent, "children");
                }
              }
              if (dragOverSlotParentProp && isDraggingOverHorizontalContainer) {
                const isDraggingOverDirectionStart = dragOverZone === (dragOverSlot?.flowDirection === "row" ? DROP_ZONE_LEFT : DROP_ZONE_RIGHT);
                const newParentIndex = isDraggingOverDirectionStart ? appDom5.getNewFirstParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp) : appDom5.getNewLastParentIndexInNode(draft, dragOverNode, dragOverSlotParentProp);
                draft = addOrMoveNode(
                  draft,
                  draggedNode,
                  dragOverNode,
                  dragOverSlotParentProp,
                  newParentIndex
                );
              }
            }
            const draggedNodeParent = isMovingNode ? appDom5.getParent(draft, draggedNode) : null;
            if (draggedNode.layout?.columnSize && draggedNodeParent && originalParent && draggedNodeParent.id !== originalParent.id) {
              draft = appDom5.setNodeNamespacedProp(draft, draggedNode, "layout", "columnSize", 1);
            }
          }
          if (isMovingNode) {
            draft = deleteOrphanedLayoutNodes(dom, draft, draggedNode, dragOverNodeId);
          }
          return normalizePageRowColumnSizes(draft, pageNode);
        },
        currentView.kind === "page" ? { ...omit2(currentView, "pageViewTab"), selectedNodeId: newNode?.id || draggedNodeId } : currentView
      );
      api.dragEnd();
      if (newNode) {
        const overlayElement = overlayRef.current;
        invariant5(overlayElement, "Overlay ref not bound");
        overlayElement.focus();
      }
    },
    [
      api,
      appStateApi,
      availableDropZones,
      bridge?.canvasCommands,
      currentView,
      dom,
      dragOverNodeId,
      dragOverSlotParentProp,
      dragOverZone,
      draggedNode,
      draggedNodeId,
      newNode,
      nodesInfo,
      pageNode,
      selectedNodeId
    ]
  );
  const handleNodeDragEnd = React10.useCallback(
    (event) => {
      event.preventDefault();
      api.dragEnd();
    },
    [api]
  );
  React10.useEffect(() => {
    const handleNodeDragOverDefault = (event) => {
      event.preventDefault();
    };
    window.addEventListener("dragover", handleNodeDragOverDefault);
    window.addEventListener("dragend", handleNodeDragEnd);
    return () => {
      window.removeEventListener("dragover", handleNodeDragOverDefault);
      window.removeEventListener("dragend", handleNodeDragEnd);
    };
  }, [handleNodeDragEnd]);
  const scrollSelectedNode = React10.useCallback(() => {
    if (!selectedNode) {
      return;
    }
    bridge?.canvasCommands.scrollComponent(selectedNode.id);
  }, [bridge?.canvasCommands, selectedNode]);
  React10.useEffect(() => {
    scrollSelectedNode();
  }, [scrollSelectedNode]);
  const resizePreviewElementRef = React10.useRef(null);
  const overlayGridRef = React10.useRef({
    gridElement: null,
    getMinColumnWidth: () => 0,
    getLeftColumnEdges: () => [],
    getRightColumnEdges: () => []
  });
  const handleEdgeDragOver = React10.useCallback(
    (event) => {
      if (!draggedNode) {
        return;
      }
      const resizePreviewElement = resizePreviewElementRef.current;
      const draggedNodeInfo = nodesInfo[draggedNode.id];
      const draggedNodeRect = draggedNodeInfo?.rect;
      const parent = draggedNode && appDom5.getParent(dom, draggedNode);
      const parentInfo = parent ? nodesInfo[parent.id] : null;
      const parentRect = parentInfo?.rect;
      const cursorPos = bridge?.canvasCommands.getViewCoordinates(event.clientX, event.clientY);
      const previousSibling = appDom5.getSiblingBeforeNode(dom, draggedNode, "children");
      const previousSiblingInfo = previousSibling && nodesInfo[previousSibling.id];
      const previousSiblingRect = previousSiblingInfo?.rect;
      if (draggedNodeRect && parentRect && resizePreviewElement && cursorPos) {
        if (draggedEdge === RECTANGLE_EDGE_LEFT || draggedEdge === RECTANGLE_EDGE_RIGHT) {
          let snappedToGridCursorRelativePosX = cursorPos.x - draggedNodeRect.x;
          const activeSnapGridColumnEdges = draggedEdge === RECTANGLE_EDGE_LEFT ? overlayGridRef.current.getLeftColumnEdges() : overlayGridRef.current.getRightColumnEdges();
          const minGridColumnWidth = overlayGridRef.current.getMinColumnWidth();
          for (const gridColumnEdge of activeSnapGridColumnEdges) {
            if (Math.abs(gridColumnEdge - cursorPos.x) <= minGridColumnWidth) {
              snappedToGridCursorRelativePosX = gridColumnEdge - draggedNodeRect.x;
            }
          }
          if (draggedEdge === RECTANGLE_EDGE_LEFT && cursorPos.x > Math.max(parentRect.x, previousSiblingRect?.x || 0) + minGridColumnWidth && cursorPos.x < draggedNodeRect.x + draggedNodeRect.width - minGridColumnWidth) {
            const updatedTransformScale = 1 - snappedToGridCursorRelativePosX / draggedNodeRect.width;
            resizePreviewElement.style.transformOrigin = "100% 50%";
            resizePreviewElement.style.transform = `scaleX(${updatedTransformScale})`;
          }
          const nextSibling = appDom5.getSiblingAfterNode(dom, draggedNode, "children");
          const nextSiblingInfo = nextSibling && nodesInfo[nextSibling.id];
          const nextSiblingRect = nextSiblingInfo?.rect;
          if (draggedEdge === RECTANGLE_EDGE_RIGHT && cursorPos.x > draggedNodeRect.x + minGridColumnWidth && cursorPos.x < Math.min(
            parentRect.x + parentRect.width,
            nextSiblingRect ? nextSiblingRect.x + nextSiblingRect.width : 0
          ) - minGridColumnWidth) {
            const updatedTransformScale = snappedToGridCursorRelativePosX / draggedNodeRect.width;
            resizePreviewElement.style.transformOrigin = "0 50%";
            resizePreviewElement.style.transform = `scaleX(${updatedTransformScale})`;
          }
        }
        const defaultMinimumResizableHeight = 16;
        const minimumVerticalResizeHeight = draggedNodeInfo.componentConfig?.minimumLayoutHeight ?? defaultMinimumResizableHeight;
        const previousSiblingMinimumVerticalResizeHeight = previousSiblingInfo?.componentConfig?.minimumLayoutHeight ?? defaultMinimumResizableHeight;
        if (draggedEdge === RECTANGLE_EDGE_BOTTOM && cursorPos.y > draggedNodeRect.y + minimumVerticalResizeHeight) {
          const snappedToGridCursorRelativePosY = Math.ceil((cursorPos.y - draggedNodeRect.y) / VERTICAL_RESIZE_SNAP_UNITS) * VERTICAL_RESIZE_SNAP_UNITS;
          const updatedTransformScale = snappedToGridCursorRelativePosY / draggedNodeRect.height;
          resizePreviewElement.style.transformOrigin = "50% 0";
          resizePreviewElement.style.transform = `scaleY(${updatedTransformScale})`;
        }
        if (draggedEdge === RECTANGLE_EDGE_TOP && cursorPos.y < draggedNodeRect.y + draggedNodeRect.height - minimumVerticalResizeHeight && (!previousSiblingRect || cursorPos.y > draggedNodeRect.y - previousSiblingRect.height + previousSiblingMinimumVerticalResizeHeight)) {
          const snappedToGridCursorRelativePosY = Math.ceil(
            (draggedNodeRect.y + draggedNodeRect.height - cursorPos.y) / VERTICAL_RESIZE_SNAP_UNITS
          ) * VERTICAL_RESIZE_SNAP_UNITS;
          const updatedTransformScale = snappedToGridCursorRelativePosY / draggedNodeRect.height;
          resizePreviewElement.style.transformOrigin = "50% 100%";
          resizePreviewElement.style.transform = `scaleY(${updatedTransformScale})`;
        }
      }
    },
    [bridge, dom, draggedEdge, draggedNode, nodesInfo]
  );
  const handleEdgeDragEnd = React10.useCallback(
    (event) => {
      event.preventDefault();
      if (!draggedNode) {
        return;
      }
      const draggedNodeInfo = nodesInfo[draggedNode.id];
      const draggedNodeRect = draggedNodeInfo?.rect;
      const resizePreviewElement = resizePreviewElementRef.current;
      const resizePreviewRect = resizePreviewElement?.getBoundingClientRect();
      if (draggedNodeRect && resizePreviewRect) {
        domApi.update((draft) => {
          const previousSibling = appDom5.getSiblingBeforeNode(draft, draggedNode, "children");
          let previousSiblingInfo = null;
          let previousSiblingRect = null;
          if (previousSibling) {
            previousSiblingInfo = nodesInfo[previousSibling.id];
            previousSiblingRect = previousSiblingInfo?.rect;
          }
          if (draggedEdge === RECTANGLE_EDGE_LEFT || draggedEdge === RECTANGLE_EDGE_RIGHT) {
            if (draggedEdge === RECTANGLE_EDGE_LEFT) {
              if (previousSibling && previousSiblingRect) {
                const totalResizedColumnsSize = (draggedNode.layout?.columnSize || 1) + (previousSibling.layout?.columnSize || 1);
                const totalResizedColumnsWidth = draggedNodeRect.width + previousSiblingRect.width;
                const updatedDraggedNodeColumnSize = resizePreviewRect.width / totalResizedColumnsWidth * totalResizedColumnsSize;
                const updatedPreviousSiblingColumnSize = totalResizedColumnsSize - updatedDraggedNodeColumnSize;
                draft = appDom5.setNodeNamespacedProp(
                  draft,
                  draggedNode,
                  "layout",
                  "columnSize",
                  updatedDraggedNodeColumnSize
                );
                draft = appDom5.setNodeNamespacedProp(
                  draft,
                  previousSibling,
                  "layout",
                  "columnSize",
                  updatedPreviousSiblingColumnSize
                );
              }
            }
            if (draggedEdge === RECTANGLE_EDGE_RIGHT) {
              const nextSibling = appDom5.getSiblingAfterNode(draft, draggedNode, "children");
              if (nextSibling) {
                const nextSiblingInfo = nodesInfo[nextSibling.id];
                const nextSiblingRect = nextSiblingInfo?.rect;
                if (nextSiblingRect) {
                  const totalResizedColumnsSize = (draggedNode.layout?.columnSize || 1) + (nextSibling.layout?.columnSize || 1);
                  const totalResizedColumnsWidth = draggedNodeRect.width + nextSiblingRect.width;
                  const updatedDraggedNodeColumnSize = resizePreviewRect.width / totalResizedColumnsWidth * totalResizedColumnsSize;
                  const updatedNextSiblingColumnSize = totalResizedColumnsSize - updatedDraggedNodeColumnSize;
                  draft = appDom5.setNodeNamespacedProp(
                    draft,
                    draggedNode,
                    "layout",
                    "columnSize",
                    updatedDraggedNodeColumnSize
                  );
                  draft = appDom5.setNodeNamespacedProp(
                    draft,
                    nextSibling,
                    "layout",
                    "columnSize",
                    updatedNextSiblingColumnSize
                  );
                }
              }
            }
          }
          if (draggedEdge === RECTANGLE_EDGE_BOTTOM || draggedEdge === RECTANGLE_EDGE_TOP) {
            const isValidTopResize = draggedEdge === RECTANGLE_EDGE_TOP && previousSibling && previousSiblingRect && !isPageRow(previousSibling);
            if (draggedEdge === RECTANGLE_EDGE_BOTTOM || isValidTopResize) {
              draft = appDom5.setNodeNamespacedProp(
                draft,
                draggedNode,
                "layout",
                "height",
                resizePreviewRect.height
              );
            }
            if (isValidTopResize && previousSiblingRect) {
              draft = appDom5.setNodeNamespacedProp(
                draft,
                previousSibling,
                "layout",
                "height",
                previousSiblingRect.height + (draggedNodeRect.height - resizePreviewRect.height)
              );
            }
          }
          return draft;
        });
      }
      api.dragEnd();
    },
    [api, domApi, draggedEdge, draggedNode, nodesInfo]
  );
  return /* @__PURE__ */ React10.createElement(
    OverlayRoot,
    {
      "data-testid": "page-overlay",
      ref: overlayRef,
      className: clsx2({
        [overlayClasses.nodeDrag]: isDraggingOver,
        [overlayClasses.resizeHorizontal]: draggedEdge === RECTANGLE_EDGE_LEFT || draggedEdge === RECTANGLE_EDGE_RIGHT,
        [overlayClasses.resizeVertical]: draggedEdge === RECTANGLE_EDGE_TOP || draggedEdge === RECTANGLE_EDGE_BOTTOM
      }),
      tabIndex: 0,
      onKeyDown: handleKeyDown,
      ...draggedEdge ? {
        onMouseMove: handleEdgeDragOver,
        onMouseUp: handleEdgeDragEnd
      } : {
        onDragOver: handleNodeDragOver,
        onDrop: handleNodeDrop,
        onDragEnd: handleNodeDragEnd,
        // This component has `pointer-events: none`, but we will selectively enable pointer-events
        // for its children. We can still capture the click gobally
        onMouseUp: handleNodeMouseUp
      }
    },
    pageNodes.map((node) => {
      const nodeInfo = nodesInfo[node.id];
      const nodeRect = nodeInfo?.rect || null;
      const parent = appDom5.getParent(dom, node);
      const isPageNode = appDom5.isPage(node);
      const isElementNode = appDom5.isElement(node);
      const isPageRowChild = parent ? appDom5.isElement(parent) && isPageRow(parent) : false;
      const isPageColumnChild = parent ? appDom5.isElement(parent) && isPageColumn(parent) : false;
      const isSelected = selectedNode && !newNode ? selectedNode.id === node.id : false;
      const isHovered = hoveredNodeId === node.id;
      const isHorizontallyResizable = isPageRowChild || isPageColumnChild;
      const nodeComponentId = isElementNode ? getElementNodeComponentId(node) : null;
      const isVerticallyResizable = isElementNode && !isPageRow(node) && !isPageColumn(node) && (nodeComponentId === "Chart" || nodeComponentId === "DataGrid" || nodeComponentId === "Spacer");
      const isResizing = Boolean(draggedEdge);
      const isResizingNode = isResizing && node.id === draggedNodeId;
      const isInteractive = interactiveNodes.has(node.id) && !isResizing && !isDraggingOver;
      if (!nodeRect) {
        return null;
      }
      return /* @__PURE__ */ React10.createElement(React10.Fragment, { key: node.id }, !isPageNode ? /* @__PURE__ */ React10.createElement(
        NodeHud,
        {
          node,
          rect: nodeRect,
          selectedNodeRect: selectedRect,
          isSelected,
          isInteractive,
          onNodeDragStart: handleNodeDragStart(node),
          onDuplicate: handleNodeDuplicate(node),
          draggableEdges: [
            ...isHorizontallyResizable ? getNodeDraggableHorizontalEdges(parent && isPageColumnChild ? parent : node) : [],
            ...isVerticallyResizable ? [
              RECTANGLE_EDGE_BOTTOM
              // @TODO: Improve solution for resizing from top, it's still not a great UX
              // ...(!isFirstChild ? [RECTANGLE_EDGE_TOP as RectangleEdge] : []),
            ] : []
          ],
          onEdgeDragStart: isSelected ? handleEdgeDragStart(node) : void 0,
          onDelete: handleNodeDelete(node.id),
          isResizing: isResizingNode,
          resizePreviewElementRef,
          isHovered,
          isHoverable: !isResizing && !isDraggingOver,
          isOutlineVisible: isDraggingOver
        }
      ) : null);
    }),
    Object.entries(dropAreaRects).map(([dropAreaId, dropAreaRect]) => {
      const dropAreaNodeId = getDropAreaNodeId(dropAreaId);
      const dropAreaParentProp = getDropAreaParentProp(dropAreaId);
      const dropAreaNode = appDom5.getNode(dom, dropAreaNodeId);
      return /* @__PURE__ */ React10.createElement(
        NodeDropArea,
        {
          key: dropAreaId,
          node: dropAreaNode,
          parentProp: dropAreaParentProp,
          dropAreaRect,
          availableDropZones
        }
      );
    }),
    /* @__PURE__ */ React10.createElement(PinholeOverlay, { className: overlayClasses.hudOverlay, pinhole: selectedRect }),
    draggedEdge ? /* @__PURE__ */ React10.createElement(OverlayGrid, { ref: overlayGridRef }) : null
  );
}

// src/toolpad/AppEditor/PageEditor/RenderPanel/RenderPanel.tsx
var classes = {
  view: "Toolpad_View"
};
var RenderPanelRoot = styled8("div")({
  position: "relative",
  overflow: "hidden",
  [`& .${classes.view}`]: {
    height: "100%"
  }
});
function useRuntimeState() {
  const { dom } = useAppState();
  return React11.useMemo(() => createRuntimeState({ dom }), [dom]);
}
function RenderPanel({ className }) {
  const appState = useAppState();
  const domApi = useDomApi();
  const appStateApi = useAppStateApi();
  const pageEditorApi = usePageEditorApi();
  const { nodeId: pageNodeId } = usePageEditorState();
  const page = appDom6.getNode(appState.dom, pageNodeId, "page");
  const [bridge, setBridge] = React11.useState(null);
  const savedNodes = React11.useMemo(
    () => getNodeHashes(appState.savedDom),
    [appState.savedDom]
  );
  const handleInit = useEventCallback3((initializedBridge) => {
    initializedBridge.canvasEvents.on("propUpdated", (event) => {
      domApi.update((draft) => {
        const node = appDom6.getMaybeNode(draft, event.nodeId, "element");
        if (!node) {
          return draft;
        }
        const actual = node.props?.[event.prop];
        if (actual && getBindingType(actual) !== "const") {
          console.warn(`Can't update a non-const prop "${event.prop}" on node "${node.id}"`);
          return draft;
        }
        const newValue = typeof event.value === "function" ? event.value(actual) : event.value;
        draft = appDom6.setNodeNamespacedProp(draft, node, "props", event.prop, newValue);
        return draft;
      });
    });
    initializedBridge.canvasEvents.on("editorNodeDataUpdated", (event) => {
      pageEditorApi.nodeDataUpdate(event.nodeId, event.prop, event.value);
    });
    initializedBridge.canvasEvents.on("pageStateUpdated", (event) => {
      pageEditorApi.pageStateUpdate(event.pageState, event.globalScopeMeta);
    });
    initializedBridge.canvasEvents.on("pageBindingsUpdated", (event) => {
      pageEditorApi.pageBindingsUpdate(event.bindings);
    });
    initializedBridge.canvasEvents.on("vmUpdated", (event) => {
      pageEditorApi.vmUpdate(event.vm);
    });
    initializedBridge.canvasEvents.on("screenUpdate", () => {
      const pageViewState = initializedBridge.canvasCommands.getPageViewState();
      pageEditorApi.pageViewStateUpdate(pageViewState);
    });
    initializedBridge.canvasEvents.on("pageNavigationRequest", (event) => {
      appStateApi.setView({ kind: "page", name: event.pageName });
    });
    setBridge(initializedBridge);
  });
  const runtimeState = useRuntimeState();
  return /* @__PURE__ */ React11.createElement(RenderPanelRoot, { className }, /* @__PURE__ */ React11.createElement(
    EditorCanvasHost,
    {
      className: classes.view,
      runtimeState,
      base: appState.appUrl,
      savedNodes,
      pageName: page.name,
      overlay: /* @__PURE__ */ React11.createElement(RenderOverlay, { bridge }),
      onInit: handleInit
    }
  ));
}

// src/toolpad/AppEditor/PageEditor/RenderPanel/index.tsx
var RenderPanel_default = RenderPanel;

// src/toolpad/AppEditor/PageEditor/ComponentPanel.tsx
import { TabContext as TabContext2, TabList as TabList2, TabPanel as TabPanel2 } from "@mui/lab";
import { Tab as Tab2, Box as Box9, styled as styled19, Typography as Typography9, Link as Link4 } from "@mui/material";
import * as React45 from "react";
import * as appDom16 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/PageOptionsPanel.tsx
import {
  Stack,
  Tooltip as Tooltip4,
  Typography as Typography3,
  Divider as Divider2,
  Link as Link2,
  ToggleButtonGroup,
  ToggleButton,
  Autocomplete,
  TextField as TextField5,
  FormControlLabel,
  Checkbox
} from "@mui/material";
import * as React20 from "react";
import * as appDom12 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/UrlQueryEditor.tsx
import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Typography as Typography2,
  Link,
  Divider
} from "@mui/material";
import * as React14 from "react";
import AddIcon from "@mui/icons-material/Add";
import useBoolean from "@toolpad/utils/hooks/useBoolean";
import * as appDom7 from "@toolpad/studio-runtime/appDom";

// src/components/MapEntriesEditor.tsx
import { Box, TextField, IconButton as IconButton2 } from "@mui/material";
import * as React12 from "react";
import DeleteIcon2 from "@mui/icons-material/Delete";
function renderStringValueEditor({
  label,
  disabled,
  value,
  onChange
}) {
  return /* @__PURE__ */ React12.createElement(
    TextField,
    {
      label,
      disabled,
      value,
      onChange: (event) => onChange(event.target.value)
    }
  );
}
function MapEntriesEditor({
  value,
  onChange,
  label,
  fieldLabel = "field",
  valueLabel = "value",
  defaultValue: defaultValueProp,
  autoFocus = false,
  sx,
  renderValueEditor: renderValueEditorProp,
  disabled,
  isEntryDisabled
}) {
  const fieldInputRef = React12.useRef(null);
  const handleRemove = React12.useCallback(
    (index) => () => {
      onChange(value.filter((entry, i) => i !== index));
    },
    [onChange, value]
  );
  const isValidFieldName = React12.useMemo(() => {
    const counts = {};
    value.forEach(([field]) => {
      counts[field] = counts[field] ? counts[field] + 1 : 1;
    });
    return value.map(([field]) => !!field && counts[field] <= 1);
  }, [value]);
  const renderValueEditor = renderValueEditorProp ?? renderStringValueEditor;
  const defaultValue = defaultValueProp ?? "";
  return /* @__PURE__ */ React12.createElement(Box, { sx, display: "grid", gridTemplateColumns: "1fr 2fr auto", alignItems: "center", gap: 1 }, label ? /* @__PURE__ */ React12.createElement(Box, { gridColumn: "span 3" }, label, ":") : null, value.map((entry, index) => {
    const [field, fieldValue] = entry;
    const entryDisabled = disabled || isEntryDisabled?.(entry, index);
    return /* @__PURE__ */ React12.createElement(React12.Fragment, { key: index }, /* @__PURE__ */ React12.createElement(
      TextField,
      {
        disabled: entryDisabled,
        label: fieldLabel,
        value: field,
        autoFocus: true,
        onChange: (event) => onChange(
          value.map(
            (existingEntry, i) => i === index ? [event.target.value, existingEntry[1]] : existingEntry
          )
        ),
        error: !isValidFieldName[index]
      }
    ), renderValueEditor({
      label: valueLabel,
      value: fieldValue,
      onChange(newValue) {
        onChange(
          value.map(
            (existingEntry, i) => i === index ? [existingEntry[0], newValue] : existingEntry
          )
        );
      },
      disabled: entryDisabled
    }), /* @__PURE__ */ React12.createElement(
      IconButton2,
      {
        "aria-label": "Delete property",
        onClick: handleRemove(index),
        disabled: entryDisabled
      },
      /* @__PURE__ */ React12.createElement(DeleteIcon2, null)
    ));
  }), /* @__PURE__ */ React12.createElement("form", { autoComplete: "off", style: { display: "contents" } }, /* @__PURE__ */ React12.createElement(
    TextField,
    {
      inputRef: fieldInputRef,
      label: fieldLabel,
      value: "",
      onChange: (event) => {
        onChange([...value, [event.target.value, defaultValue]]);
      },
      autoFocus,
      disabled
    }
  )));
}

// src/toolpad/hooks/useUnsavedChangesConfirm.ts
import * as React13 from "react";
function useUnsavedChangesConfirm({
  hasUnsavedChanges,
  onClose
}) {
  const handleCloseWithUnsavedChanges = React13.useCallback(() => {
    if (hasUnsavedChanges) {
      const hasConfirmed = window.confirm(
        'You have unsaved changes. Are you sure you want to navigate away? All changes will be discarded when you press "OK".'
      );
      if (!hasConfirmed) {
        return;
      }
    }
    onClose();
  }, [hasUnsavedChanges, onClose]);
  return { handleCloseWithUnsavedChanges };
}

// src/toolpad/AppEditor/PageEditor/UrlQueryEditor.tsx
function UrlQueryString({ input }) {
  const queryString = React14.useMemo(() => {
    const search = new URLSearchParams(input).toString();
    return search.length ? search : "";
  }, [input]);
  return /* @__PURE__ */ React14.createElement(React14.Fragment, null, /* @__PURE__ */ React14.createElement(Divider, { variant: "middle", sx: { alignSelf: "stretch", marginTop: "20px" } }), /* @__PURE__ */ React14.createElement(Typography2, { variant: "overline" }, "Usage Preview:"), /* @__PURE__ */ React14.createElement(Typography2, null, /* @__PURE__ */ React14.createElement("code", null, queryString)));
}
function UrlQueryEditor({ pageNodeId }) {
  const { dom } = useAppState();
  const { currentView } = useAppState();
  const domApi = useDomApi();
  const appStateApi = useAppStateApi();
  const page = appDom7.getNode(dom, pageNodeId, "page");
  const { value: isDialogOpen, setTrue: openDialog, setFalse: closeDialog } = useBoolean(false);
  const value = page.attributes.parameters;
  const [input, setInput] = React14.useState(value);
  const hasUnsavedChanges = input !== value;
  React14.useEffect(() => {
    if (isDialogOpen) {
      setInput(value);
    }
  }, [isDialogOpen, value]);
  const handleButtonClick = React14.useCallback(() => {
    appStateApi.setView({
      ...currentView,
      kind: "page",
      name: page.name,
      pageParametersDialogOpen: true
    });
  }, [appStateApi, page.name, currentView]);
  const handleDialogClose = React14.useCallback(() => {
    appStateApi.setView({
      ...currentView,
      kind: "page",
      name: page.name,
      pageParametersDialogOpen: false
    });
  }, [appStateApi, page.name, currentView]);
  const { handleCloseWithUnsavedChanges } = useUnsavedChangesConfirm({
    hasUnsavedChanges,
    onClose: handleDialogClose
  });
  const handleSave = React14.useCallback(() => {
    domApi.update(
      (draft) => appDom7.setNodeNamespacedProp(draft, page, "attributes", "parameters", input || [])
    );
    handleDialogClose();
  }, [domApi, handleDialogClose, input, page]);
  React14.useEffect(() => {
    if (currentView.kind === "page" && currentView.pageParametersDialogOpen) {
      openDialog();
    } else {
      closeDialog();
    }
  }, [closeDialog, currentView, openDialog]);
  return /* @__PURE__ */ React14.createElement("div", null, /* @__PURE__ */ React14.createElement(Button, { color: "inherit", startIcon: /* @__PURE__ */ React14.createElement(AddIcon, null), onClick: handleButtonClick }, "Add page parameters"), /* @__PURE__ */ React14.createElement(Dialog, { fullWidth: true, open: isDialogOpen, onClose: handleCloseWithUnsavedChanges }, /* @__PURE__ */ React14.createElement(DialogTitle, null, "Edit page parameters"), /* @__PURE__ */ React14.createElement(DialogContent, null, /* @__PURE__ */ React14.createElement(Typography2, null, "Page parameters allow you to pass external data into the Toolpad Studio page state via the URL query. Read more in the", " ", /* @__PURE__ */ React14.createElement(
    Link,
    {
      href: "https://mui.com/toolpad/studio/concepts/page-properties/#page-parameters",
      target: "_blank",
      rel: "noopener"
    },
    "docs"
  ), "."), /* @__PURE__ */ React14.createElement(UrlQueryString, { input }), /* @__PURE__ */ React14.createElement(
    MapEntriesEditor,
    {
      sx: { my: 3 },
      fieldLabel: "Parameter",
      valueLabel: "Default value",
      value: input || [],
      onChange: setInput
    }
  )), /* @__PURE__ */ React14.createElement(DialogActions, null, /* @__PURE__ */ React14.createElement(Button, { color: "inherit", variant: "text", onClick: handleDialogClose }, "Close"), /* @__PURE__ */ React14.createElement(Button, { disabled: value === input, onClick: handleSave }, "Save"))));
}

// src/toolpad/AppEditor/NodeNameEditor.tsx
import { TextField as TextField2 } from "@mui/material";
import * as React16 from "react";
import * as appDom9 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PagesExplorer/validation.ts
import * as React15 from "react";
import * as appDom8 from "@toolpad/studio-runtime/appDom";
function useNodeNameValidation(name, disallowedNames, kind) {
  return React15.useMemo(
    () => appDom8.validateNodeName(name, disallowedNames, kind),
    [name, disallowedNames, kind]
  );
}

// src/toolpad/AppEditor/NodeNameEditor.tsx
function NodeNameEditor({ node, sx }) {
  const domApi = useDomApi();
  const { dom } = useAppState();
  const projectApi = useProjectApi();
  const [nameInput, setNameInput] = React16.useState(node.name);
  React16.useEffect(() => setNameInput(node.name), [node.name]);
  const handleNameInputChange = React16.useCallback(
    (event) => setNameInput(event.target.value),
    []
  );
  const existingNames = React16.useMemo(() => appDom9.getExistingNamesForNode(dom, node), [dom, node]);
  const nodeNameError = useNodeNameValidation(nameInput, existingNames, node.type);
  const isNameValid = !nodeNameError;
  const handleNameCommit = React16.useCallback(() => {
    if (isNameValid) {
      domApi.setNodeName(node.id, nameInput);
    } else {
      setNameInput(node.name);
    }
    const oldname = dom.nodes[node.id];
    if (isNameValid && oldname.type === "page" && nameInput !== oldname.name) {
      setTimeout(async () => {
        await projectApi.methods.deletePage(oldname.name);
      }, 300);
    }
  }, [projectApi, isNameValid, domApi, node.id, node.name, nameInput, dom]);
  const handleKeyPress = React16.useCallback(
    (event) => {
      if (event.key === "Enter") {
        handleNameCommit();
      }
    },
    [handleNameCommit]
  );
  return /* @__PURE__ */ React16.createElement(
    TextField2,
    {
      sx,
      fullWidth: true,
      label: "Node name",
      error: !isNameValid,
      helperText: nodeNameError,
      value: nameInput,
      onChange: handleNameInputChange,
      onBlur: handleNameCommit,
      onKeyPress: handleKeyPress
    }
  );
}

// src/toolpad/AppEditor/PageTitleEditor.tsx
import { TextField as TextField3 } from "@mui/material";
import * as React17 from "react";
import * as appDom10 from "@toolpad/studio-runtime/appDom";
function validateInput(input) {
  if (!input) {
    return "Input required";
  }
  return null;
}
function PageTitleEditor({ node }) {
  const domApi = useDomApi();
  const [pageTitleInput, setPageTitleInput] = React17.useState(appDom10.getPageTitle(node));
  const handlePageTitleChange = React17.useCallback(
    (event) => setPageTitleInput(event.target.value),
    []
  );
  const handleCommit = React17.useCallback(() => {
    domApi.update(
      (dom) => appDom10.setNodeNamespacedProp(dom, node, "attributes", "title", pageTitleInput)
    );
  }, [node, pageTitleInput, domApi]);
  const handleKeyPress = React17.useCallback(
    (event) => {
      if (event.code === "Enter") {
        handleCommit();
      }
    },
    [handleCommit]
  );
  return /* @__PURE__ */ React17.createElement(
    TextField3,
    {
      fullWidth: true,
      label: "Page title",
      value: pageTitleInput,
      onChange: handlePageTitleChange,
      onBlur: handleCommit,
      onKeyDown: handleKeyPress,
      error: !pageTitleInput,
      helperText: validateInput(pageTitleInput)
    }
  );
}

// src/toolpad/AppEditor/PageDisplayNameEditor.tsx
import { IconButton as IconButton3, InputAdornment, TextField as TextField4, Tooltip as Tooltip2 } from "@mui/material";
import * as React18 from "react";
import ResetIcon from "@mui/icons-material/RestartAlt";
import * as appDom11 from "@toolpad/studio-runtime/appDom";
function validateInput2(input) {
  if (!input) {
    return "Input required";
  }
  return null;
}
function PageDisplayNameEditor({ node }) {
  const domApi = useDomApi();
  const pageDisplayName = React18.useMemo(() => appDom11.getPageDisplayName(node), [node]);
  const [pageDisplayNameInput, setPageDisplayNameInput] = React18.useState(pageDisplayName);
  React18.useEffect(() => setPageDisplayNameInput(pageDisplayName), [pageDisplayName]);
  const handlePageDisplayNameChange = React18.useCallback(
    (event) => setPageDisplayNameInput(event.target.value),
    []
  );
  const handleCommit = React18.useCallback(() => {
    domApi.update(
      (dom) => appDom11.setNodeNamespacedProp(dom, node, "attributes", "displayName", pageDisplayNameInput)
    );
  }, [node, pageDisplayNameInput, domApi]);
  const handleReset = React18.useCallback(() => {
    domApi.update(
      (dom) => appDom11.setNodeNamespacedProp(dom, node, "attributes", "displayName", void 0)
    );
  }, [node, domApi]);
  const handleKeyPress = React18.useCallback(
    (event) => {
      if (event.code === "Enter") {
        handleCommit();
      }
    },
    [handleCommit]
  );
  return /* @__PURE__ */ React18.createElement(
    TextField4,
    {
      fullWidth: true,
      label: "Display name",
      value: pageDisplayNameInput,
      onChange: handlePageDisplayNameChange,
      onBlur: handleCommit,
      onKeyDown: handleKeyPress,
      error: !pageDisplayNameInput,
      helperText: validateInput2(pageDisplayNameInput),
      slotProps: {
        input: {
          endAdornment: pageDisplayNameInput === node.attributes.displayName ? /* @__PURE__ */ React18.createElement(InputAdornment, { position: "end" }, /* @__PURE__ */ React18.createElement(Tooltip2, { title: "Reset to default value" }, /* @__PURE__ */ React18.createElement(IconButton3, { onClick: handleReset, edge: "end" }, /* @__PURE__ */ React18.createElement(ResetIcon, null)))) : null
        }
      }
    }
  );
}

// src/toolpad/AppEditor/UpgradeNotification.tsx
import * as React19 from "react";
import Alert from "@mui/material/Alert";
import Button2 from "@mui/material/Button";
import Chip from "@mui/material/Chip";
import Tooltip3 from "@mui/material/Tooltip";
import { styled as styled9 } from "@mui/material";
import OpenInNewIcon from "@mui/icons-material/OpenInNew";
var AlertRoot = styled9(Alert)({
  ".MuiAlert-action": {
    paddingTop: 0
  }
});
function UpgradeAlert({ sx, type, action, message }) {
  return /* @__PURE__ */ React19.createElement(
    AlertRoot,
    {
      severity: type ?? "info",
      sx,
      action: action ? /* @__PURE__ */ React19.createElement(
        Button2,
        {
          variant: "text",
          size: "small",
          href: UPGRADE_URL,
          target: "_blank",
          rel: "noopener",
          endIcon: /* @__PURE__ */ React19.createElement(OpenInNewIcon, { fontSize: "small" })
        },
        "Upgrade"
      ) : null
    },
    message
  );
}
function UpgradeChip({
  sx,
  message = `This feature requires a paid plan.`,
  url = UPGRADE_URL
}) {
  return /* @__PURE__ */ React19.createElement(Tooltip3, { title: `${message} Click to learn more.` }, /* @__PURE__ */ React19.createElement(
    Chip,
    {
      variant: "outlined",
      color: "primary",
      component: "a",
      href: url,
      target: "_blank",
      rel: "noopener",
      size: "small",
      clickable: true,
      label: "Pro",
      sx
    }
  ));
}

// src/toolpad/AppEditor/PageEditor/PageOptionsPanel.tsx
var PAGE_DISPLAY_OPTIONS = [
  { value: "shell", label: "App shell" },
  { value: "standalone", label: "No shell" }
];
var PAGE_CONTAINER_WIDTH_OPTIONS = [
  { value: "xs", label: "xs" },
  { value: "sm", label: "sm" },
  { value: "md", label: "md" },
  { value: "lg", label: "lg" },
  { value: "xl", label: "xl" },
  { value: "none", label: "None" }
];
function PageOptionsPanel() {
  const { nodeId: pageNodeId } = usePageEditorState();
  const { dom } = useAppState();
  const plan = appDom12.getPlan(dom);
  const isPaidPlan = plan !== void 0 && plan !== "free";
  const domApi = useDomApi();
  const appNode = appDom12.getApp(dom);
  const page = appDom12.getNode(dom, pageNodeId, "page");
  const handleDisplayModeChange = React20.useCallback(
    (event, newValue) => {
      domApi.update(
        (draft) => appDom12.setNodeNamespacedProp(draft, page, "attributes", "display", newValue)
      );
    },
    [domApi, page]
  );
  const handleContainerModeChange = React20.useCallback(
    (event, newValue) => {
      domApi.update(
        (draft) => appDom12.setNodeNamespacedProp(draft, page, "attributes", "maxWidth", newValue)
      );
    },
    [domApi, page]
  );
  const availableRoles = React20.useMemo(() => {
    return new Map(appNode.attributes?.authorization?.roles?.map((role) => [role.name, role]));
  }, [appNode]);
  const handleAllowedRolesChange = React20.useCallback(
    (event, newValue) => {
      domApi.update(
        (draft) => appDom12.setNodeNamespacedProp(draft, page, "attributes", "authorization", {
          ...page.attributes.authorization,
          allowedRoles: newValue
        })
      );
    },
    [domApi, page]
  );
  const handleAllowAllChange = React20.useCallback(
    (event, isAllowed) => {
      domApi.update(
        (draft) => appDom12.setNodeNamespacedProp(draft, page, "attributes", "authorization", {
          allowAll: isAllowed,
          ...isAllowed ? { allowedRoles: [] } : {}
        })
      );
    },
    [domApi, page]
  );
  const allowAll = page.attributes.authorization?.allowAll ?? true;
  const allowedRoles = page.attributes.authorization?.allowedRoles ?? [];
  return /* @__PURE__ */ React20.createElement(Stack, { spacing: 2, alignItems: "stretch", "data-testid": "page-editor" }, /* @__PURE__ */ React20.createElement(Typography3, { variant: "subtitle1" }, "Page"), /* @__PURE__ */ React20.createElement("div", null, /* @__PURE__ */ React20.createElement(NodeNameEditor, { node: page }), /* @__PURE__ */ React20.createElement(PageDisplayNameEditor, { node: page }), /* @__PURE__ */ React20.createElement(PageTitleEditor, { node: page })), /* @__PURE__ */ React20.createElement("div", null, /* @__PURE__ */ React20.createElement(Typography3, { variant: "overline" }, "Display mode"), /* @__PURE__ */ React20.createElement(
    Tooltip4,
    {
      arrow: true,
      placement: "left-start",
      title: /* @__PURE__ */ React20.createElement(Typography3, { variant: "inherit" }, "Control how the app shell is displayed in the final application. Read more in the", " ", /* @__PURE__ */ React20.createElement(
        Link2,
        {
          href: "https://mui.com/toolpad/studio/concepts/page-properties/#display-mode",
          target: "_blank",
          rel: "noopener"
        },
        "docs"
      ), ".")
    },
    /* @__PURE__ */ React20.createElement(
      ToggleButtonGroup,
      {
        exclusive: true,
        value: page.attributes.display ?? "shell",
        onChange: handleDisplayModeChange,
        "aria-label": "Display mode",
        fullWidth: true
      },
      PAGE_DISPLAY_OPTIONS.map((option) => {
        return /* @__PURE__ */ React20.createElement(ToggleButton, { key: option.value, value: option.value }, option.label);
      })
    )
  )), /* @__PURE__ */ React20.createElement("div", null, /* @__PURE__ */ React20.createElement(Typography3, { variant: "overline" }, "Container width"), /* @__PURE__ */ React20.createElement(
    Tooltip4,
    {
      arrow: true,
      placement: "left-start",
      title: /* @__PURE__ */ React20.createElement(Typography3, { variant: "inherit" }, "Set the maximum width of the top-level container.")
    },
    /* @__PURE__ */ React20.createElement(
      ToggleButtonGroup,
      {
        exclusive: true,
        value: page.attributes.maxWidth ?? appDom12.DEFAULT_CONTAINER_WIDTH,
        onChange: handleContainerModeChange,
        "aria-label": "Container mode",
        fullWidth: true
      },
      PAGE_CONTAINER_WIDTH_OPTIONS.map((option) => {
        return /* @__PURE__ */ React20.createElement(ToggleButton, { key: option.value, value: option.value }, option.label);
      })
    )
  )), /* @__PURE__ */ React20.createElement("div", null, /* @__PURE__ */ React20.createElement(Typography3, { variant: "overline" }, "Authorization", !isPaidPlan ? /* @__PURE__ */ React20.createElement(UpgradeChip, { message: "Authorization requires a paid plan.", sx: { ml: 1 } }) : null), isPaidPlan ? /* @__PURE__ */ React20.createElement(React20.Fragment, null, /* @__PURE__ */ React20.createElement(
    FormControlLabel,
    {
      control: /* @__PURE__ */ React20.createElement(Checkbox, { checked: allowAll, onChange: handleAllowAllChange }),
      label: "Allow access to all roles"
    }
  ), /* @__PURE__ */ React20.createElement(
    Autocomplete,
    {
      multiple: true,
      options: Array.from(availableRoles.keys()),
      value: allowAll ? [] : allowedRoles,
      onChange: handleAllowedRolesChange,
      disabled: allowAll,
      fullWidth: true,
      noOptionsText: "No roles defined",
      renderInput: (params) => /* @__PURE__ */ React20.createElement(TextField5, { ...params, label: "Allowed roles", placeholder: "Roles" })
    }
  )) : null), /* @__PURE__ */ React20.createElement("div", null, /* @__PURE__ */ React20.createElement(Divider2, { variant: "middle", sx: { alignSelf: "stretch" } }), /* @__PURE__ */ React20.createElement(Typography3, { variant: "overline" }, "Page State"), /* @__PURE__ */ React20.createElement(UrlQueryEditor, { pageNodeId })));
}

// src/toolpad/AppEditor/PageEditor/ComponentEditor.tsx
import { Stack as Stack4, styled as styled16, Typography as Typography7, Divider as Divider4 } from "@mui/material";
import * as React41 from "react";
import { groupBy } from "lodash-es";
import Box6 from "@mui/system/Box";

// src/toolpad/AppEditor/PageEditor/NodeAttributeEditor.tsx
import * as React39 from "react";
import { Alert as Alert2, Box as Box5 } from "@mui/material";
import { useBrowserJsRuntime } from "@toolpad/studio-runtime/jsBrowserRuntime";
import * as appDom14 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/BindableEditor.tsx
import {
  Stack as Stack3,
  inputBaseClasses,
  formLabelClasses,
  typographyClasses,
  styled as styled15
} from "@mui/material";
import * as React38 from "react";

// src/toolpad/propertyControls/index.tsx
import { createProvidedContext as createProvidedContext2 } from "@toolpad/utils/react";

// src/toolpad/propertyControls/string.tsx
import { TextField as TextField6 } from "@mui/material";
import * as React23 from "react";

// src/components/PropertyControl.tsx
import * as React22 from "react";

// src/components/MarkdownTooltip.tsx
import { Tooltip as Tooltip5, Link as MuiLink } from "@mui/material";
import Markdown from "markdown-to-jsx";
import * as React21 from "react";
function MarkdownTooltip({ title, children, ...props }) {
  const renderedTitle = React21.useMemo(
    () => title ? /* @__PURE__ */ React21.createElement(
      Markdown,
      {
        options: {
          overrides: {
            a: {
              component: MuiLink,
              props: {
                target: "_blank"
              }
            }
          }
        }
      },
      title
    ) : null,
    [title]
  );
  return /* @__PURE__ */ React21.createElement(Tooltip5, { title: renderedTitle, ...props }, children);
}

// src/components/PropertyControl.tsx
function PropertyControl({ propType, children }) {
  return /* @__PURE__ */ React22.createElement(MarkdownTooltip, { placement: "left", title: propType.helperText ?? "" }, children);
}

// src/toolpad/propertyControls/string.tsx
function StringPropEditor({ propType, label, value, onChange, disabled }) {
  const handleChange = React23.useCallback(
    (event) => {
      onChange(event.target.value === propType.default ? void 0 : event.target.value);
    },
    [onChange, propType.default]
  );
  return /* @__PURE__ */ React23.createElement(PropertyControl, { propType }, /* @__PURE__ */ React23.createElement(
    TextField6,
    {
      fullWidth: true,
      value: value ?? "",
      disabled,
      onChange: handleChange,
      label
    }
  ));
}
var string_default = StringPropEditor;

// src/toolpad/propertyControls/boolean.tsx
import { Checkbox as Checkbox2, FormControlLabel as FormControlLabel2 } from "@mui/material";
import * as React24 from "react";
function BooleanPropEditor({ propType, label, value, onChange, disabled }) {
  const handleChange = React24.useCallback(
    (event) => {
      onChange(event.target.checked);
    },
    [onChange]
  );
  return /* @__PURE__ */ React24.createElement(PropertyControl, { propType }, /* @__PURE__ */ React24.createElement(
    FormControlLabel2,
    {
      control: /* @__PURE__ */ React24.createElement(Checkbox2, { checked: !!value, disabled, onChange: handleChange }),
      label
    }
  ));
}
var boolean_default = BooleanPropEditor;

// src/toolpad/propertyControls/number.tsx
import { TextField as TextField7 } from "@mui/material";
import * as React25 from "react";
function NumberPropEditor({ label, value, onChange, disabled, propType }) {
  const { minimum, maximum } = propType;
  const [inputValue, setInputValue] = React25.useState(value);
  const handleChange = React25.useCallback(
    (event) => {
      const newValue = Number(event.target.value);
      setInputValue(newValue);
      if (minimum && newValue < minimum) {
        onChange(minimum);
      } else if (maximum && newValue > maximum) {
        onChange(maximum);
      } else {
        onChange(newValue);
      }
    },
    [maximum, minimum, onChange]
  );
  const handleBlur = React25.useCallback(
    (event) => {
      const blurValue = Number(event.target.value);
      if (minimum && blurValue < minimum) {
        setInputValue(minimum);
      } else if (maximum && blurValue > maximum) {
        setInputValue(maximum);
      }
    },
    [maximum, minimum]
  );
  return /* @__PURE__ */ React25.createElement(PropertyControl, { propType }, /* @__PURE__ */ React25.createElement(
    TextField7,
    {
      fullWidth: true,
      value: String(inputValue ?? 0),
      disabled,
      type: "number",
      onChange: handleChange,
      onBlur: handleBlur,
      label,
      slotProps: {
        htmlInput: { step: "any" }
      }
    }
  ));
}
var number_default = NumberPropEditor;

// src/toolpad/propertyControls/select.tsx
import { MenuItem, TextField as TextField8 } from "@mui/material";
import * as React26 from "react";
function SelectPropEditor({ label, propType, value, onChange, disabled }) {
  const items = propType.type === "string" ? propType.enum ?? [] : [];
  const handleChange = React26.useCallback(
    (event) => {
      onChange(event.target.value || void 0);
    },
    [onChange]
  );
  const enumLabels = propType.type === "string" ? propType.enumLabels ?? {} : {};
  return /* @__PURE__ */ React26.createElement(PropertyControl, { propType }, /* @__PURE__ */ React26.createElement(
    TextField8,
    {
      select: true,
      fullWidth: true,
      label,
      value: value ?? "",
      disabled,
      onChange: handleChange
    },
    typeof propType.default === "undefined" ? /* @__PURE__ */ React26.createElement(MenuItem, { value: "" }, "-") : null,
    items.map((item) => /* @__PURE__ */ React26.createElement(MenuItem, { key: item, value: item }, enumLabels[item] || item))
  ));
}
var select_default = SelectPropEditor;

// src/toolpad/propertyControls/json.tsx
import {
  Box as Box2,
  Button as Button3,
  Dialog as Dialog2,
  DialogActions as DialogActions2,
  DialogContent as DialogContent2,
  DialogTitle as DialogTitle2,
  Skeleton
} from "@mui/material";
import * as React29 from "react";
import JSON5 from "json5";

// src/utils/lazyComponent.tsx
import * as React28 from "react";

// src/components/NoSsr.tsx
import * as React27 from "react";
import useSsr from "@toolpad/utils/hooks/useSsr";
function NoSsr({ children, fallback = null }) {
  const isSsr = useSsr();
  return /* @__PURE__ */ React27.createElement(React27.Fragment, null, isSsr ? fallback : children);
}

// src/utils/lazyComponent.tsx
function lazyComponent(importComponent, { noSsr, fallback } = {}) {
  const LazyComponent = React28.lazy(importComponent);
  return React28.forwardRef((props, ref) => {
    let content = /* @__PURE__ */ React28.createElement(LazyComponent, { ref, ...props });
    if (noSsr) {
      content = /* @__PURE__ */ React28.createElement(NoSsr, null, content);
    }
    if (fallback) {
      content = /* @__PURE__ */ React28.createElement(React28.Suspense, { fallback }, content);
    }
    return content;
  });
}

// src/toolpad/propertyControls/json.tsx
var JsonEditor = lazyComponent(() => import("./JsonEditor-2EDQONBP.mjs"), {
  noSsr: true,
  fallback: /* @__PURE__ */ React29.createElement(Skeleton, { variant: "rectangular", height: "100%" })
});
function JsonPropEditor({ label, propType, value, onChange, disabled }) {
  const [dialogOpen, setDialogOpen] = React29.useState(false);
  const valueAsString = React29.useMemo(() => JSON.stringify(value, null, 2), [value]);
  const [input, setInput] = React29.useState(valueAsString);
  React29.useEffect(() => setInput(valueAsString), [valueAsString]);
  const normalizedInitial = React29.useMemo(() => JSON.stringify(value), [value]);
  const normalizedInput = React29.useMemo(() => {
    if (!input) {
      return "";
    }
    try {
      return JSON.stringify(JSON5.parse(input));
    } catch {
      return null;
    }
  }, [input]);
  const handleSave = React29.useCallback(() => {
    const newValue = input === "" ? void 0 : JSON5.parse(input);
    onChange(newValue);
  }, [onChange, input]);
  const [schemaUri, setSchemaUri] = React29.useState(void 0);
  React29.useEffect(() => {
    if (propType.type !== "object" && propType.type !== "array") {
      return () => {
      };
    }
    if (!propType.schema) {
      return () => {
      };
    }
    const blob = new Blob([JSON.stringify(propType.schema, null, 2)], {
      type: "application/json"
    });
    const uri = URL.createObjectURL(blob);
    setSchemaUri(uri);
    return () => {
      URL.revokeObjectURL(uri);
    };
  }, [propType]);
  useShortcut({ key: "s", metaKey: true, disabled: !dialogOpen }, handleSave);
  return /* @__PURE__ */ React29.createElement(React29.Fragment, null, /* @__PURE__ */ React29.createElement(PropertyControl, { propType }, /* @__PURE__ */ React29.createElement(
    Button3,
    {
      variant: "outlined",
      color: "inherit",
      sx: { my: 0.5 },
      fullWidth: true,
      onClick: () => setDialogOpen(true)
    },
    label
  )), /* @__PURE__ */ React29.createElement(Dialog2, { fullWidth: true, open: dialogOpen, onClose: () => setDialogOpen(false) }, /* @__PURE__ */ React29.createElement(DialogTitle2, null, "Edit JSON"), /* @__PURE__ */ React29.createElement(DialogContent2, null, /* @__PURE__ */ React29.createElement(Box2, { sx: { height: 200 } }, /* @__PURE__ */ React29.createElement(
    JsonEditor,
    {
      value: input,
      onChange: (newValue = "") => setInput(newValue),
      schemaUri,
      disabled
    }
  ))), /* @__PURE__ */ React29.createElement(DialogActions2, null, /* @__PURE__ */ React29.createElement(Button3, { color: "inherit", variant: "text", onClick: () => setDialogOpen(false) }, "Cancel"), /* @__PURE__ */ React29.createElement(
    Button3,
    {
      disabled: normalizedInput === null || normalizedInitial === normalizedInput,
      onClick: handleSave
    },
    "Save"
  ))));
}
var json_default = JsonPropEditor;

// src/toolpad/propertyControls/event.tsx
import * as React30 from "react";
import { Typography as Typography4 } from "@mui/material";
function Editor({ propType, label }) {
  return /* @__PURE__ */ React30.createElement(PropertyControl, { propType }, /* @__PURE__ */ React30.createElement(Typography4, null, label));
}
var event_default = Editor;

// src/toolpad/propertyControls/index.tsx
var [usePropControlsContext, PropControlsContextProvider] = createProvidedContext2("PropControls");
function getDefaultControlForType(propType) {
  switch (propType.type) {
    case "string":
      return propType.enum ? select_default : string_default;
    case "number":
      return number_default;
    case "boolean":
      return boolean_default;
    case "object":
      return json_default;
    case "array":
      return json_default;
    case "event":
      return event_default;
    default:
      return null;
  }
}
var modePropTypeMap = /* @__PURE__ */ new Map([
  // Text component modes
  ["text", "string"],
  ["markdown", "markdown"],
  ["link", "string"]
]);
function getDefaultControl(controls, argType, liveProps) {
  if (argType.control) {
    if (argType.control.type === "markdown") {
      if (liveProps) {
        const { mode } = liveProps;
        if (mode && typeof mode === "string") {
          const mappedControlFromMode = modePropTypeMap.get(mode);
          if (!mappedControlFromMode) {
            return null;
          }
          return controls[mappedControlFromMode] ?? null;
        }
      }
    }
    return controls[argType.control.type] ?? getDefaultControlForType(argType);
  }
  return getDefaultControlForType(argType);
}

// src/toolpad/AppEditor/BindingEditor.tsx
import * as React37 from "react";
import {
  Box as Box4,
  Checkbox as Checkbox3,
  Stack as Stack2,
  Toolbar,
  Tooltip as Tooltip7,
  Typography as Typography6,
  styled as styled14,
  tooltipClasses,
  Button as Button4,
  Dialog as Dialog3,
  DialogActions as DialogActions3,
  DialogContent as DialogContent3,
  DialogTitle as DialogTitle3,
  Tab,
  TextField as TextField9,
  MenuItem as MenuItem2,
  Autocomplete as Autocomplete2,
  Link as Link3
} from "@mui/material";
import LinkIcon from "@mui/icons-material/Link";
import AddLinkIcon from "@mui/icons-material/AddLink";
import { createProvidedContext as createProvidedContext3 } from "@toolpad/utils/react";
import { TabContext, TabList } from "@mui/lab";
import useDebounced from "@toolpad/utils/hooks/useDebounced";
import { errorFrom } from "@toolpad/utils/errors";
import useLatest from "@toolpad/utils/hooks/useLatest";
import * as appDom13 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/JsExpressionEditor.tsx
import * as React32 from "react";
import jsonToTs from "json-to-ts";
import { Skeleton as Skeleton2, styled as styled10 } from "@mui/material";
import { getCircularReplacer, replaceRecursive } from "@toolpad/utils/json";

// src/toolpad/AppEditor/ElementContext.tsx
import * as React31 from "react";
var ElementContext_default = React31.createContext(void 0);

// src/toolpad/AppEditor/PageEditor/JsExpressionEditor.tsx
var TypescriptEditor = lazyComponent(() => import("./TypescriptEditor-DSHJDXYS.mjs"), {
  noSsr: true,
  fallback: /* @__PURE__ */ React32.createElement(Skeleton2, { variant: "rectangular", height: "100%" })
});
var JsExpressionEditorRoot = styled10("div")(({ theme }) => ({
  height: 150,
  border: `1px solid ${theme.palette.divider}`
}));
function JsExpressionEditor({
  value,
  onChange,
  globalScope,
  globalScopeMeta,
  disabled,
  autoFocus,
  functionBody,
  topLevelAwait,
  onFocus,
  onBlur,
  sx
}) {
  const element = React32.useContext(ElementContext_default);
  const nodeName = element?.name;
  const extraLibs = React32.useMemo(() => {
    const withoutCircularRefs = replaceRecursive(globalScope, getCircularReplacer());
    const generatedTypes = jsonToTs(withoutCircularRefs);
    const globalDeclarations = Object.keys(globalScope).map((key) => {
      const metaData = globalScopeMeta[key];
      const overrides = {};
      if (metaData?.kind === "element") {
        const { props } = metaData;
        if (props) {
          for (const [prop, meta] of Object.entries(props)) {
            if (meta.tsType) {
              overrides[prop] = meta.tsType;
            }
          }
        }
      }
      const commentLines = [];
      if (metaData?.description) {
        commentLines.push(metaData.description);
      }
      if (typeof metaData?.deprecated === "boolean") {
        commentLines.push("@deprecated");
      } else if (typeof metaData?.deprecated === "string") {
        commentLines.push(`@deprecated ${metaData.deprecated}`);
      }
      const comment = commentLines.length > 0 ? ["/**", ...commentLines.map((line) => ` * ${line}`), " */"] : [];
      const overridesType = `{ 
        ${Object.entries(overrides).map(([propKey, propValue]) => {
        return `${propKey}: ${propValue.replaceAll(
          /\bThisComponent\b/g,
          () => `RootObject[${JSON.stringify(key)}]`
        )}`;
      }).join("\n")} 
      }`;
      const globalType = typeof metaData?.tsType === "string" ? metaData.tsType : `OverrideProps<RootObject[${JSON.stringify(key)}], ${overridesType}>;`;
      const declaration = `declare const ${key}: Expand<${globalType}>`;
      return [...comment, declaration].join("\n");
    });
    const content = `
      type OverrideProps<T, S extends Partial<Record<keyof T, unknown>>> = {
        [K in keyof T]:  S extends { [M in K]: any } ? S[K] : T[K]
      }

      // Pretty-print types on hover:
      // See https://github.com/microsoft/vscode/issues/94679#issuecomment-755194161
      type Expand<T> = T extends infer O ? { [K in keyof O]: Expand<O[K]> } : never;
      
      ${generatedTypes.join("\n")}

      ${globalDeclarations.join("\n")}

      ${nodeName ? `type ThisComponent = typeof ${nodeName}` : ""}
    `;
    return [{ content, filePath: "global.d.ts" }];
  }, [globalScope, globalScopeMeta, nodeName]);
  return /* @__PURE__ */ React32.createElement(JsExpressionEditorRoot, { sx }, /* @__PURE__ */ React32.createElement(
    TypescriptEditor,
    {
      value,
      onChange: (code = "") => onChange(code),
      disabled,
      extraLibs,
      functionBody,
      topLevelAwait,
      onFocus,
      onBlur,
      autoFocus
    }
  ));
}

// src/components/JsonView.tsx
import * as React34 from "react";
import { styled as styled11, IconButton as IconButton4, Tooltip as Tooltip6, Snackbar } from "@mui/material";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import clsx3 from "clsx";

// src/components/ObjectInspector.tsx
import * as React33 from "react";
import { ObjectInspector as ReactObjectInspector, chromeDark, chromeLight } from "react-inspector";
import { useTheme } from "@mui/material/styles";
function useInspectorTheme() {
  const theme = useTheme();
  return React33.useMemo(() => {
    return {
      ...theme.palette.mode === "dark" ? chromeDark : chromeLight,
      BASE_BACKGROUND_COLOR: "inherit",
      TREENODE_FONT_FAMILY: "inherit",
      TREENODE_FONT_SIZE: "inherit",
      ARROW_FONT_SIZE: "inherit",
      TREENODE_LINE_HEIGHT: "inherit",
      OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES: 1,
      OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES: 1
    };
  }, [theme]);
}
var ObjectInspector_default = function ObjectInspector(props) {
  const inspectorTheme = useInspectorTheme();
  return /* @__PURE__ */ React33.createElement(ReactObjectInspector, { theme: inspectorTheme, ...props });
};

// src/components/JsonView.tsx
var classes2 = {
  viewport: "Toolpad_ObjectInspectorViewport",
  copyToClipboardButton: "Toolpad_CopyToClipboardButton",
  disabled: "Toolpad_ObjectInspectorDisabled"
};
var JsonViewRoot = styled11("div")(({ theme }) => ({
  whiteSpace: "nowrap",
  position: "relative",
  display: "flex",
  minHeight: 0,
  minWidth: 0,
  [`&.${classes2.disabled}`]: {
    opacity: 0.5,
    pointerEvents: "none"
  },
  [`& .${classes2.viewport}`]: {
    overflow: "auto",
    flex: 1,
    padding: theme.spacing(1)
  },
  [`& .${classes2.copyToClipboardButton}`]: {
    position: "absolute",
    top: 0,
    right: 0,
    marginTop: theme.spacing(1),
    marginRight: theme.spacing(2)
  },
  fontSize: 12,
  lineHeight: 1.2,
  fontFamily: 'Consolas, Menlo, Monaco, "Andale Mono", "Ubuntu Mono", monospace'
}));
function JsonView({ src, sx, copyToClipboard, disabled, ...props }) {
  const expandPaths = Array.isArray(src) ? ["$", "$.0", "$.1", "$.2", "$.3", "$.4"] : void 0;
  const [confirmSnackbarOpen, setConfirmSnackbarOpen] = React34.useState(false);
  const handleCopyToClipboard = React34.useCallback(() => {
    window.navigator.clipboard.writeText(JSON.stringify(src, null, 2));
    setConfirmSnackbarOpen(true);
  }, [src]);
  const handleCopySnackbarClose = React34.useCallback(() => setConfirmSnackbarOpen(false), []);
  return /* @__PURE__ */ React34.createElement(JsonViewRoot, { sx, className: clsx3({ [classes2.disabled]: disabled }) }, /* @__PURE__ */ React34.createElement(React34.Fragment, null, /* @__PURE__ */ React34.createElement("div", { className: classes2.viewport }, /* @__PURE__ */ React34.createElement(ObjectInspector_default, { expandLevel: 1, expandPaths, data: src, ...props })), copyToClipboard ? /* @__PURE__ */ React34.createElement(React34.Fragment, null, /* @__PURE__ */ React34.createElement(Tooltip6, { title: "Copy the source" }, /* @__PURE__ */ React34.createElement(IconButton4, { onClick: handleCopyToClipboard, className: classes2.copyToClipboardButton }, /* @__PURE__ */ React34.createElement(ContentCopyIcon, null))), /* @__PURE__ */ React34.createElement(
    Snackbar,
    {
      open: confirmSnackbarOpen,
      autoHideDuration: 3e3,
      onClose: handleCopySnackbarClose,
      message: "Source Copied to clipboard"
    }
  )) : null));
}

// src/toolpad/AppEditor/useEvaluateLiveBinding.ts
import * as React35 from "react";
import { evaluateBindable } from "@toolpad/studio-runtime/jsRuntime";
import { mapValues as mapValues2 } from "@toolpad/utils/collections";
function evaluateBindableAttrEntries(jsRuntime, input, globalScope) {
  return input.map(([key, bindable]) => [
    key,
    evaluateBindable(jsRuntime, bindable || null, globalScope)
  ]);
}
function evaluateBindableAttrValues(jsRuntime, input, globalScope) {
  return mapValues2(input, (bindable) => evaluateBindable(jsRuntime, bindable || null, globalScope));
}
function useEvaluateLiveBinding({
  jsRuntime,
  input,
  globalScope
}) {
  return React35.useMemo(() => {
    return evaluateBindable(jsRuntime, input, globalScope);
  }, [jsRuntime, input, globalScope]);
}
function useEvaluateLiveBindings({
  jsRuntime,
  input,
  globalScope
}) {
  return React35.useMemo(() => {
    return evaluateBindableAttrValues(jsRuntime, input, globalScope);
  }, [jsRuntime, input, globalScope]);
}
function useEvaluateLiveBindingEntries({
  jsRuntime,
  input,
  globalScope
}) {
  return React35.useMemo(() => {
    return evaluateBindableAttrEntries(jsRuntime, input, globalScope);
  }, [jsRuntime, input, globalScope]);
}

// src/toolpad/AppEditor/GlobalScopeExplorer.tsx
import { Typography as Typography5, Divider as Divider3, Box as Box3, styled as styled12 } from "@mui/material";
import * as React36 from "react";
var ExplorerRoot = styled12("div")({
  display: "flex",
  flexDirection: "column"
});
function groupScopeMeta(value, meta) {
  const structure = {
    local: {
      displayName: "Locals",
      items: []
    },
    element: {
      displayName: "Elements",
      items: []
    },
    query: {
      displayName: "Queries",
      items: []
    },
    action: {
      displayName: "Actions",
      items: []
    },
    other: {
      displayName: "Other",
      items: []
    }
  };
  const scopeKeys = /* @__PURE__ */ new Set([...Object.keys(value), ...Object.keys(meta)]);
  for (const key of scopeKeys) {
    const metaField = meta[key];
    const group = metaField?.kind || "other";
    structure[group].items.push({
      ...metaField,
      key,
      value: value[key]
    });
  }
  return structure;
}
function GlobalScopeExplorer({ meta, value, sx }) {
  const structure = React36.useMemo(() => groupScopeMeta(value, meta), [meta, value]);
  return /* @__PURE__ */ React36.createElement(ExplorerRoot, { sx }, /* @__PURE__ */ React36.createElement(Typography5, { sx: { ml: 1, mb: 1 }, variant: "subtitle2" }, "Scope"), /* @__PURE__ */ React36.createElement(Box3, { sx: { overflow: "auto", border: 1, borderColor: "divider" } }, /* @__PURE__ */ React36.createElement(Box3, { sx: { display: "flex", flexDirection: "column", justifyContent: "stretch" } }, Object.entries(structure).map(([key, group]) => {
    if (group.items.length <= 0) {
      return null;
    }
    return /* @__PURE__ */ React36.createElement(React36.Fragment, { key }, /* @__PURE__ */ React36.createElement(Typography5, { sx: { mx: 1, my: 0.5 } }, group.displayName), /* @__PURE__ */ React36.createElement(Divider3, null), /* @__PURE__ */ React36.createElement(Box3, { sx: { m: 1 } }, group.items.map((item) => {
      return /* @__PURE__ */ React36.createElement(React36.Fragment, { key: item.key }, /* @__PURE__ */ React36.createElement(ObjectInspector_default, { expandLevel: 0, name: item.key, data: item.value }));
    })), /* @__PURE__ */ React36.createElement(Divider3, null));
  }))));
}

// src/components/TabPanel.tsx
import { TabPanel as MuiTabPanel } from "@mui/lab";
import { styled as styled13 } from "@mui/material";
var TabPanel = styled13(MuiTabPanel, {
  shouldForwardProp: (prop) => prop !== "disableGutters"
})(({ disableGutters }) => ({
  ...disableGutters && {
    padding: 0
  }
}));
var TabPanel_default = TabPanel;

// src/toolpad/AppEditor/BindingEditor.tsx
var [useBindingEditorContext, BindingEditorContextProvider] = createProvidedContext3("BindingEditor");
var ErrorTooltip = styled14(({ className, ...props }) => /* @__PURE__ */ React37.createElement(Tooltip7, { ...props, classes: { popper: className } }))(({ theme }) => ({
  [`& .${tooltipClasses.tooltip}`]: {
    backgroundColor: theme.palette.error.dark
  }
}));
function JsExpressionBindingEditor({
  globalScope,
  globalScopeMeta,
  value,
  onChange
}) {
  const handleChange = React37.useCallback(
    (newValue) => onChange({ $$jsExpression: newValue }),
    [onChange]
  );
  return /* @__PURE__ */ React37.createElement(
    JsExpressionEditor,
    {
      globalScope,
      globalScopeMeta,
      value: value?.$$jsExpression || "",
      onChange: handleChange,
      autoFocus: true
    }
  );
}
function JsExpressionPreview({ jsRuntime, input, globalScope }) {
  const previewValue = useEvaluateLiveBinding({ jsRuntime, input, globalScope });
  const lastGoodPreview = useLatest(previewValue?.error ? void 0 : previewValue);
  const previewErrorDebounced = useDebounced(previewValue?.error, 500);
  const previewError = previewValue?.error && previewErrorDebounced;
  return /* @__PURE__ */ React37.createElement(React37.Fragment, null, /* @__PURE__ */ React37.createElement(Toolbar, { disableGutters: true }, /* @__PURE__ */ React37.createElement(Typography6, { color: "error" }, previewError?.message)), /* @__PURE__ */ React37.createElement(JsonView, { sx: { flex: 1 }, src: lastGoodPreview?.value }));
}
function EnvBindingEditor({ value, onChange }) {
  const { declaredEnvKeys, env } = useBindingEditorContext();
  const handleInputChange = React37.useCallback(
    (event, newValue) => {
      onChange({ $$env: newValue || "" });
    },
    [onChange]
  );
  return /* @__PURE__ */ React37.createElement(Box4, { sx: { my: 1 } }, /* @__PURE__ */ React37.createElement(Typography6, null, "Assign to an environment variable"), /* @__PURE__ */ React37.createElement(
    Autocomplete2,
    {
      freeSolo: true,
      options: declaredEnvKeys,
      value: value?.$$env || "",
      onInputChange: handleInputChange,
      renderInput: (params) => /* @__PURE__ */ React37.createElement(
        TextField9,
        {
          ...params,
          fullWidth: true,
          sx: { my: 3 },
          label: "Environment variable name",
          helperText: value?.$$env && !declaredEnvKeys.includes(value.$$env) ? "Warning: This variable is not in your env file!" : ""
        }
      )
    }
  ), "Value:", /* @__PURE__ */ React37.createElement(JsonView, { sx: { flex: 1 }, src: value?.$$env ? env[value?.$$env] : void 0 }));
}
function getValueBindingTab(value) {
  if (value?.$$env === void 0) {
    return "jsExpression";
  }
  return "env";
}
function ValueBindingEditor({ value, onChange, error }) {
  const {
    label,
    globalScope,
    globalScopeMeta = {},
    jsRuntime,
    propType,
    env
  } = useBindingEditorContext();
  const hasEnv = Boolean(env);
  const [activeTab, setActiveTab] = React37.useState(getValueBindingTab(value));
  React37.useEffect(() => {
    setActiveTab(getValueBindingTab(value));
  }, [value]);
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  const jsExpressionBindingEditor = /* @__PURE__ */ React37.createElement(Stack2, { direction: "row", sx: { height: 400, gap: 2, my: hasEnv ? 3 : 0 } }, /* @__PURE__ */ React37.createElement(GlobalScopeExplorer, { sx: { width: 250 }, value: globalScope, meta: globalScopeMeta }), /* @__PURE__ */ React37.createElement(
    Box4,
    {
      sx: {
        height: "100%",
        display: "flex",
        flex: 1,
        flexDirection: "column",
        overflow: "hidden"
      }
    },
    /* @__PURE__ */ React37.createElement(Typography6, { sx: { mb: 2 } }, 'Make the "', label, '" property dynamic with a JavaScript expression. This property expects a type: ', /* @__PURE__ */ React37.createElement("code", null, propType?.type || "any"), "."),
    /* @__PURE__ */ React37.createElement(
      JsExpressionBindingEditor,
      {
        globalScope,
        globalScopeMeta,
        value: value?.$$jsExpression ? value : null,
        onChange
      }
    ),
    error ? /* @__PURE__ */ React37.createElement(
      Box4,
      {
        sx: {
          marginTop: "20px"
        }
      },
      /* @__PURE__ */ React37.createElement(Typography6, { sx: { mb: 2, color: "red" } }, "Error while reading the prettier configuration:", errorFrom(error).message ?? "The prettier config could not be loaded and therefore the code would not be formatted")
    ) : null,
    /* @__PURE__ */ React37.createElement(JsExpressionPreview, { jsRuntime, input: value, globalScope })
  ));
  const envBindingEditor = /* @__PURE__ */ React37.createElement(
    EnvBindingEditor,
    {
      value: value?.$$env !== void 0 ? value : null,
      onChange
    }
  );
  return /* @__PURE__ */ React37.createElement(TabContext, { value: activeTab }, /* @__PURE__ */ React37.createElement(Box4, { sx: { borderBottom: 1, borderColor: "divider" } }, /* @__PURE__ */ React37.createElement(TabList, { onChange: handleTabChange, "aria-label": "Choose action kind " }, /* @__PURE__ */ React37.createElement(Tab, { label: "JS expression", value: "jsExpression" }), /* @__PURE__ */ React37.createElement(Tab, { label: "Environment variable", value: "env" }))), /* @__PURE__ */ React37.createElement(TabPanel_default, { value: "jsExpression", disableGutters: true }, /* @__PURE__ */ React37.createElement(Box4, { sx: { my: 1 } }, /* @__PURE__ */ React37.createElement(Typography6, null, "Bind to a JavaScript expression. Read more about binding in the", " ", /* @__PURE__ */ React37.createElement(
    Link3,
    {
      href: "https://mui.com/toolpad/studio/concepts/data-binding/",
      target: "_blank",
      rel: "noopener"
    },
    "docs"
  ), "."), jsExpressionBindingEditor)), /* @__PURE__ */ React37.createElement(TabPanel_default, { value: "env", disableGutters: true }, envBindingEditor));
}
function JsExpressionActionEditor({ value, onChange }) {
  const { globalScope, globalScopeMeta } = useBindingEditorContext();
  const handleCodeChange = React37.useCallback(
    (newValue) => onChange({ $$jsExpressionAction: newValue }),
    [onChange]
  );
  return /* @__PURE__ */ React37.createElement(Box4, { sx: { my: 1 } }, /* @__PURE__ */ React37.createElement(Typography6, null, "Run code when this event fires. Read more in the", " ", /* @__PURE__ */ React37.createElement(
    Link3,
    {
      href: "https://mui.com/toolpad/studio/concepts/event-handling/#js-expression-actions",
      target: "_blank",
      rel: "noopener"
    },
    "docs"
  ), "."), /* @__PURE__ */ React37.createElement(
    Box4,
    {
      sx: {
        my: 3,
        display: "flex",
        flexDirection: "row",
        maxHeight: 250,
        alignItems: "stretch",
        gap: 2
      }
    },
    /* @__PURE__ */ React37.createElement(GlobalScopeExplorer, { sx: { width: 250 }, value: globalScope, meta: globalScopeMeta }),
    /* @__PURE__ */ React37.createElement(
      JsExpressionEditor,
      {
        sx: { flex: 1 },
        globalScope,
        globalScopeMeta,
        value: value?.$$jsExpressionAction || "",
        onChange: handleCodeChange,
        functionBody: true,
        topLevelAwait: true
      }
    )
  ));
}
function NavigationActionParameterEditor({
  label,
  value,
  onChange
}) {
  const { jsRuntime, globalScope, globalScopeMeta } = useBindingEditorContext();
  const liveBinding = useEvaluateLiveBinding({
    jsRuntime,
    input: value,
    globalScope
  });
  return /* @__PURE__ */ React37.createElement(
    BindableEditor,
    {
      liveBinding,
      jsRuntime,
      globalScope,
      globalScopeMeta,
      label,
      propType: { type: "string" },
      value: value || null,
      onChange
    }
  );
}
function NavigationActionEditor({ value, onChange }) {
  const { dom } = useAppState();
  const root = appDom13.getApp(dom);
  const { pages = [] } = appDom13.getChildNodes(dom, root);
  const getDefaultActionParameters = React37.useCallback((page) => {
    const defaultPageParameters = page.attributes.parameters || [];
    return Object.fromEntries(defaultPageParameters);
  }, []);
  const handlePageChange = React37.useCallback(
    (event) => {
      const pageName = event.target.value;
      const page = appDom13.getPageByName(dom, pageName);
      const defaultActionParameters2 = page && appDom13.isPage(page) ? getDefaultActionParameters(page) : {};
      onChange({
        $$navigationAction: {
          page: pageName,
          parameters: defaultActionParameters2
        }
      });
    },
    [dom, getDefaultActionParameters, onChange]
  );
  const actionPageAliasOrName = value?.$$navigationAction?.page || null;
  const actionParameters = React37.useMemo(
    () => value?.$$navigationAction.parameters || {},
    [value?.$$navigationAction.parameters]
  );
  const actionPage = pages.find((availablePage) => availablePage.name === actionPageAliasOrName) || pages.find(
    (availablePage) => availablePage.attributes.alias?.some((alias) => alias === actionPageAliasOrName)
  );
  const handleActionParameterChange = React37.useCallback(
    (actionParameterName) => (newValue) => {
      if (actionPageAliasOrName) {
        onChange({
          $$navigationAction: {
            page: actionPageAliasOrName,
            parameters: {
              ...actionParameters,
              ...newValue ? { [actionParameterName]: newValue } : {}
            }
          }
        });
      }
    },
    [actionPageAliasOrName, actionParameters, onChange]
  );
  const hasPagesAvailable = pages.length > 0;
  const defaultActionParameters = actionPage ? getDefaultActionParameters(actionPage) : {};
  const actionParameterEntries = Object.entries(actionParameters || defaultActionParameters);
  return /* @__PURE__ */ React37.createElement(Box4, { sx: { my: 1 } }, /* @__PURE__ */ React37.createElement(Typography6, null, "Navigate to a page on this event"), /* @__PURE__ */ React37.createElement(
    TextField9,
    {
      fullWidth: true,
      sx: { my: 3 },
      label: "Select a page",
      select: true,
      value: actionPageAliasOrName || "",
      onChange: handlePageChange,
      disabled: !hasPagesAvailable,
      helperText: hasPagesAvailable ? null : "No other pages available"
    },
    pages.map((page) => /* @__PURE__ */ React37.createElement(MenuItem2, { key: page.name, value: page.name }, page.name))
  ), actionParameterEntries.length > 0 ? /* @__PURE__ */ React37.createElement(React37.Fragment, null, /* @__PURE__ */ React37.createElement(Typography6, { variant: "overline" }, "Page parameters:"), Object.entries(actionParameters || defaultActionParameters).map((actionParameter) => {
    const [actionParameterName, actionParameterValue] = actionParameter;
    return /* @__PURE__ */ React37.createElement(
      NavigationActionParameterEditor,
      {
        key: actionParameterName,
        label: actionParameterName,
        value: actionParameterValue,
        onChange: handleActionParameterChange(actionParameterName)
      }
    );
  })) : null);
}
function getActionTab(value) {
  if (value?.$$navigationAction) {
    return "navigationAction";
  }
  return "jsExpressionAction";
}
function ActionEditor({ value, onChange }) {
  const [activeTab, setActiveTab] = React37.useState(getActionTab(value));
  React37.useEffect(() => setActiveTab(getActionTab(value)), [value]);
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  return /* @__PURE__ */ React37.createElement(TabContext, { value: activeTab }, /* @__PURE__ */ React37.createElement(Box4, { sx: { borderBottom: 1, borderColor: "divider" } }, /* @__PURE__ */ React37.createElement(TabList, { onChange: handleTabChange, "aria-label": "Choose action kind " }, /* @__PURE__ */ React37.createElement(Tab, { label: "JS expression", value: "jsExpressionAction" }), /* @__PURE__ */ React37.createElement(Tab, { label: "Navigation", value: "navigationAction" }))), /* @__PURE__ */ React37.createElement(TabPanel_default, { value: "jsExpressionAction", disableGutters: true }, /* @__PURE__ */ React37.createElement(
    JsExpressionActionEditor,
    {
      value: value?.$$jsExpressionAction ? value : null,
      onChange
    }
  )), /* @__PURE__ */ React37.createElement(TabPanel_default, { value: "navigationAction", disableGutters: true }, /* @__PURE__ */ React37.createElement(
    NavigationActionEditor,
    {
      value: value?.$$navigationAction ? value : null,
      onChange
    }
  )));
}
function BindingEditorDialog({
  value,
  onChange,
  open,
  onClose
}) {
  const projectApi = useProjectApi();
  const { error, data } = projectApi.useQuery("getPrettierConfig", []);
  const { propType, label } = useBindingEditorContext();
  const [input, setInput] = React37.useState(value);
  React37.useEffect(() => {
    setInput(value);
  }, [open, value]);
  const committedInput = React37.useRef(input);
  const handleSave = React37.useCallback(async () => {
    let newValue = input;
    if (input?.$$jsExpression) {
      const jsExpression = await tryFormatExpression(
        input.$$jsExpression,
        data
      );
      const cleanedExpression = jsExpression.trim().replace(/;*$/, "");
      newValue = {
        $$jsExpression: cleanedExpression
      };
    }
    committedInput.current = newValue;
    onChange(newValue);
  }, [onChange, input, data]);
  const hasUnsavedChanges = input ? getBindingType(input) !== (committedInput.current && getBindingType(committedInput.current)) || getBindingValue(input) !== (committedInput.current && getBindingValue(committedInput.current)) : false;
  const { handleCloseWithUnsavedChanges } = useUnsavedChangesConfirm({
    hasUnsavedChanges,
    onClose
  });
  const handleCommit = React37.useCallback(() => {
    handleSave();
    onClose();
  }, [onClose, handleSave]);
  const handleRemove = React37.useCallback(() => {
    committedInput.current = null;
    onChange(null);
    onClose();
  }, [onClose, onChange]);
  useShortcut({ key: "s", metaKey: true, disabled: !open }, handleSave);
  return /* @__PURE__ */ React37.createElement(
    Dialog3,
    {
      onClose: handleCloseWithUnsavedChanges,
      open,
      fullWidth: true,
      scroll: "body",
      maxWidth: "lg"
    },
    /* @__PURE__ */ React37.createElement(DialogTitle3, null, 'Bind property "', label, '"'),
    /* @__PURE__ */ React37.createElement(
      DialogContent3,
      {
        sx: {
          height: "100vh",
          maxHeight: 560
        }
      },
      propType?.type === "event" ? /* @__PURE__ */ React37.createElement(ActionEditor, { value: input, onChange: (newValue) => setInput(newValue) }) : /* @__PURE__ */ React37.createElement(
        ValueBindingEditor,
        {
          error,
          value: input?.$$jsExpression !== void 0 || input?.$$env !== void 0 ? input : null,
          onChange: (newValue) => setInput(newValue)
        }
      )
    ),
    /* @__PURE__ */ React37.createElement(DialogActions3, null, /* @__PURE__ */ React37.createElement(Button4, { color: "inherit", variant: "text", onClick: onClose }, hasUnsavedChanges ? "Cancel" : "Close"), /* @__PURE__ */ React37.createElement(Button4, { color: "inherit", disabled: !value, onClick: handleRemove }, "Remove binding"), /* @__PURE__ */ React37.createElement(Button4, { disabled: !hasUnsavedChanges, color: "primary", onClick: handleCommit }, "Update binding"))
  );
}
function BindingEditor({
  label,
  globalScope,
  globalScopeMeta,
  jsRuntime,
  disabled,
  hidden = false,
  propType,
  value,
  onChange,
  liveBinding,
  env,
  declaredEnvKeys
}) {
  const [open, setOpen] = React37.useState(false);
  const handleOpen = React37.useCallback(() => setOpen(true), []);
  const handleClose = React37.useCallback(() => setOpen(false), []);
  const hasBinding = !!value && getBindingType(value) !== "const";
  const error = liveBinding?.error?.message;
  const bindingButton = /* @__PURE__ */ React37.createElement(
    Checkbox3,
    {
      "aria-label": `Bind property "${label}"`,
      checked: hasBinding,
      disabled,
      icon: /* @__PURE__ */ React37.createElement(AddLinkIcon, { fontSize: "inherit" }),
      checkedIcon: /* @__PURE__ */ React37.createElement(LinkIcon, { fontSize: "inherit" }),
      onClick: handleOpen,
      color: error ? "error" : void 0,
      sx: { visibility: hidden ? "hidden" : "visible" }
    }
  );
  const TooltipComponent = error ? ErrorTooltip : Tooltip7;
  const tooltipTitle = error ?? (hasBinding ? `Update "${label}" binding\u2026` : `Bind "${label}"\u2026`);
  const bindingButtonWithTooltip = disabled ? bindingButton : /* @__PURE__ */ React37.createElement(TooltipComponent, { disableInteractive: true, placement: "top", title: tooltipTitle }, bindingButton);
  const resolvedMeta = React37.useMemo(() => {
    const meta = { ...globalScopeMeta };
    if (propType?.type === "event" && propType.arguments) {
      for (const { name, tsType } of propType.arguments) {
        const metaField = meta[name] ?? {};
        metaField.kind = "local";
        metaField.tsType = tsType;
        meta[name] = metaField;
      }
    }
    return meta;
  }, [propType, globalScopeMeta]);
  const bindingEditorContext = React37.useMemo(
    () => ({
      label,
      globalScope,
      globalScopeMeta: resolvedMeta,
      jsRuntime,
      disabled,
      propType,
      liveBinding,
      env: env ?? {},
      declaredEnvKeys: declaredEnvKeys ?? []
    }),
    [
      disabled,
      env,
      globalScope,
      jsRuntime,
      label,
      liveBinding,
      propType,
      resolvedMeta,
      declaredEnvKeys
    ]
  );
  return /* @__PURE__ */ React37.createElement(BindingEditorContextProvider, { value: bindingEditorContext }, bindingButtonWithTooltip, /* @__PURE__ */ React37.createElement(BindingEditorDialog, { open, onClose: handleClose, value, onChange }));
}

// src/toolpad/AppEditor/PageEditor/BindableEditor.tsx
var EditorRoot = styled15(Stack3)({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  justifyContent: "space-between",
  [`& .${inputBaseClasses.root}`]: { fontSize: 12 },
  [`& .${formLabelClasses.root}`]: { fontSize: 12 },
  [`& .${typographyClasses.root}`]: { fontSize: 12 }
});
function BindableEditor({
  label,
  bindable = true,
  disabled,
  propType,
  renderControl: renderControlProp,
  value,
  jsRuntime,
  onChange,
  liveBinding,
  globalScope = {},
  globalScopeMeta = {},
  env,
  declaredEnvKeys,
  sx
}) {
  const propTypeControls = usePropControlsContext();
  const renderDefaultControl = React38.useCallback(
    (params) => {
      const Control = getDefaultControl(propTypeControls, params.propType);
      return Control ? /* @__PURE__ */ React38.createElement(Control, { ...params }) : null;
    },
    [propTypeControls]
  );
  const renderControl = renderControlProp || renderDefaultControl;
  const handlePropConstChange = React38.useCallback((newValue) => onChange(newValue), [onChange]);
  const valueBindingType = value && getBindingType(value);
  const initConstValue = React38.useCallback(() => {
    if (valueBindingType && valueBindingType === "const") {
      return value;
    }
    if (valueBindingType && valueBindingType === "env") {
      return value.$$env;
    }
    return liveBinding?.value;
  }, [liveBinding, value, valueBindingType]);
  const constValue = React38.useMemo(initConstValue, [value, initConstValue]);
  const hasBinding = value && valueBindingType !== "const";
  return /* @__PURE__ */ React38.createElement(EditorRoot, { sx }, renderControl({
    label,
    propType,
    disabled: disabled || !!hasBinding,
    value: constValue,
    onChange: handlePropConstChange
  }), propType.control?.bindable === false ? null : /* @__PURE__ */ React38.createElement(
    BindingEditor,
    {
      globalScope,
      globalScopeMeta,
      label,
      jsRuntime,
      propType,
      value,
      onChange,
      disabled: disabled || !bindable,
      hidden: !bindable,
      liveBinding,
      env,
      declaredEnvKeys
    }
  ));
}

// src/toolpad/AppEditor/PageEditor/NodeAttributeEditor.tsx
function buildScopeMeta(vm, bindingScope) {
  if (bindingScope?.parentScope) {
    return {
      ...buildScopeMeta(vm, bindingScope?.parentScope),
      ...bindingScope?.meta
    };
  }
  return bindingScope?.meta ?? {};
}
function NodeAttributeEditor({
  node,
  namespace = "attributes",
  name,
  argType,
  props,
  sx
}) {
  const domApi = useDomApi();
  const initialPropValue = node[namespace]?.[name];
  const [propValue, setPropValue] = React39.useState(
    initialPropValue
  );
  React39.useEffect(() => {
    setPropValue(initialPropValue);
  }, [initialPropValue]);
  const handlePropChange = React39.useCallback(
    (newValue) => {
      setPropValue(newValue);
      React39.startTransition(() => {
        domApi.update(
          (draft) => appDom14.setNodeNamespacedProp(draft, node, namespace, name, newValue)
        );
      });
    },
    [node, namespace, name, domApi]
  );
  const bindingId = `${node.id}${namespace ? `.${namespace}` : ""}.${name}`;
  const { vm } = usePageEditorState();
  const scopeId = vm.bindingScopes[bindingId];
  const bindingScope = scopeId ? vm.scopes[scopeId] : void 0;
  const liveBinding = bindingScope?.bindings[bindingId];
  const scopeMeta = React39.useMemo(() => buildScopeMeta(vm, bindingScope), [vm, bindingScope]);
  const propTypeControls = usePropControlsContext();
  const Control = getDefaultControl(propTypeControls, argType, props);
  const isDisabled = !!argType.onChangeProp;
  const isBindable = !isDisabled && namespace !== "layout" && argType.control?.bindable !== false;
  const jsBrowserRuntime = useBrowserJsRuntime();
  return Control ? /* @__PURE__ */ React39.createElement(
    BindableEditor,
    {
      liveBinding,
      globalScope: bindingScope?.values ?? {},
      globalScopeMeta: scopeMeta,
      label: argType.control?.hideLabel ? "" : argType.label || name,
      bindable: isBindable,
      disabled: isDisabled,
      propType: argType,
      jsRuntime: jsBrowserRuntime,
      renderControl: (params) => /* @__PURE__ */ React39.createElement(Box5, { sx: { flex: 1, minWidth: 0 } }, /* @__PURE__ */ React39.createElement(Control, { nodeId: node.id, ...params, propType: argType })),
      value: propValue,
      onChange: handlePropChange,
      sx
    }
  ) : /* @__PURE__ */ React39.createElement(Alert2, { severity: "warning" }, `No control for '${name}' (type '${argType.type}' ${argType.control ? `, control: '${argType.control.type}'` : ""})`);
}

// src/toolpad/AppEditor/toolpadComponents.tsx
import * as React40 from "react";
import { useSuspenseQuery as useSuspenseQuery2 } from "@tanstack/react-query";
var INTERNAL_COMPONENTS = /* @__PURE__ */ new Map([
  [PAGE_ROW_COMPONENT_ID, { displayName: "Row", builtIn: "PageRow", system: true, synonyms: [] }],
  [
    PAGE_COLUMN_COMPONENT_ID,
    { displayName: "Column", builtIn: "PageColumn", system: true, synonyms: [] }
  ],
  [STACK_COMPONENT_ID, { displayName: "Stack", builtIn: "Stack", system: true, synonyms: [] }],
  [
    "Autocomplete",
    {
      displayName: "Autocomplete",
      builtIn: "Autocomplete",
      synonyms: ["combobox", "select", "dropdown"]
    }
  ],
  [
    "Button",
    {
      displayName: "Button",
      builtIn: "Button",
      synonyms: ["click", "action"]
    }
  ],
  ["Image", { displayName: "Image", builtIn: "Image", synonyms: ["picture"] }],
  ["DataGrid", { displayName: "Data Grid", builtIn: "DataGrid", synonyms: ["table"] }],
  [
    "Chart",
    {
      displayName: "Chart",
      builtIn: "Chart",
      synonyms: ["graph", "bar chart", "pie chart", "line chart", "plot"]
    }
  ],
  [
    "TextField",
    { displayName: "Text Field", builtIn: "TextField", synonyms: ["input", "field", "password"] }
  ],
  ["DatePicker", { displayName: "Date Picker", builtIn: "DatePicker", synonyms: ["time"] }],
  ["FilePicker", { displayName: "File Picker", builtIn: "FilePicker", synonyms: [] }],
  ["Text", { displayName: "Text", builtIn: "Text", synonyms: ["markdown", "link", "output"] }],
  [
    "Markdown",
    {
      displayName: "Markdown",
      builtIn: "Text",
      initialProps: {
        mode: "markdown"
      },
      synonyms: []
    }
  ],
  [
    "Link",
    {
      displayName: "Link",
      builtIn: "Text",
      initialProps: {
        mode: "link"
      },
      synonyms: []
    }
  ],
  ["Select", { displayName: "Select", builtIn: "Select", synonyms: ["combobox", "dropdown"] }],
  ["List", { displayName: "List", builtIn: "List", synonyms: ["repeat"] }],
  ["Paper", { displayName: "Paper", builtIn: "Paper", synonyms: ["surface"] }],
  ["Tabs", { displayName: "Tabs", builtIn: "Tabs", synonyms: [] }],
  ["Container", { displayName: "Container", builtIn: "Container", synonyms: [] }],
  ["Metric", { displayName: "Metric", builtIn: "Metric", synonyms: ["value", "number", "output"] }],
  [
    "Checkbox",
    {
      displayName: "Checkbox",
      initialProps: {
        mode: "checkbox"
      },
      builtIn: "Checkbox",
      synonyms: ["switch"]
    }
  ],
  [
    "Switch",
    {
      displayName: "Switch",
      initialProps: {
        mode: "switch"
      },
      builtIn: "Checkbox",
      synonyms: ["switch"]
    }
  ],
  [FORM_COMPONENT_ID, { displayName: "Form", builtIn: "Form", synonyms: [] }],
  [
    SPACER_COMPONENT_ID,
    { displayName: "Spacer", builtIn: "Spacer", synonyms: ["margin", "blank", "empty", "void"] }
  ],
  [
    "Password",
    {
      displayName: "Password",
      builtIn: "TextField",
      synonyms: [],
      initialProps: { password: true }
    }
  ]
]);
function useCodeComponents() {
  const project = useProject();
  const { data: codeComponents, refetch } = useSuspenseQuery2({
    queryKey: ["codeComponents"],
    queryFn: () => project.api.methods.getComponents()
  });
  React40.useEffect(
    () => project.events.subscribe("componentsListChanged", refetch),
    [project.events, refetch]
  );
  return React40.useMemo(
    () => Object.fromEntries(
      codeComponents.map((codeComponent) => [
        `codeComponent.${codeComponent.name}`,
        {
          displayName: codeComponent.name,
          synonyms: []
        }
      ])
    ),
    [codeComponents]
  );
}
function useToolpadComponents() {
  const codeComponents = useCodeComponents();
  return React40.useMemo(
    () => ({ ...Object.fromEntries(INTERNAL_COMPONENTS), ...codeComponents }),
    [codeComponents]
  );
}
function useToolpadComponent(id) {
  const components = useToolpadComponents();
  return React40.useMemo(() => components[id] || null, [components, id]);
}

// src/toolpad/AppEditor/PageEditor/ComponentEditor.tsx
var classes3 = {
  control: "Toolpad_Control",
  sectionHeading: "Toolpad_ControlsSectionHeading"
};
var ComponentEditorRoot = styled16("div")(({ theme }) => ({
  [`& .${classes3.control}`]: {
    margin: theme.spacing(0, 0)
  },
  [`& .${classes3.sectionHeading}`]: {
    margin: theme.spacing(0, 0, -0.5, 0)
  }
}));
function shouldRenderControl(propTypeDef, propName, props) {
  if (propTypeDef.type === "element" || propTypeDef.type === "template") {
    return propTypeDef.control?.type !== "slot" && propTypeDef.control?.type !== "slots" && propTypeDef.control?.type !== "layoutSlot";
  }
  if (typeof propTypeDef.visible === "boolean") {
    return propTypeDef.visible;
  }
  if (typeof propTypeDef.visible === "function") {
    return propTypeDef.visible(props);
  }
  return true;
}
function ComponentPropsEditor({
  componentConfig,
  bindings,
  node
}) {
  const { layoutDirection } = componentConfig;
  const hasLayoutHorizontalControls = layoutDirection === LAYOUT_DIRECTION_HORIZONTAL || layoutDirection === LAYOUT_DIRECTION_BOTH;
  const hasLayoutVerticalControls = layoutDirection === LAYOUT_DIRECTION_VERTICAL || layoutDirection === LAYOUT_DIRECTION_BOTH;
  const hasLayoutControls = hasLayoutHorizontalControls || hasLayoutVerticalControls;
  const props = React41.useMemo(() => {
    const propsPattern = new RegExp(`(?<=${node.id}.props.)(.*)`);
    return Object.fromEntries(
      Object.entries(bindings).map(([key, binding]) => [
        key.match(propsPattern)?.[0],
        binding?.value
      ])
    );
  }, [bindings, node.id]);
  const argTypesByCategory = groupBy(
    Object.entries(componentConfig.argTypes || {}),
    ([, propTypeDef]) => propTypeDef?.category || "properties"
  );
  return /* @__PURE__ */ React41.createElement(React41.Fragment, null, hasLayoutControls ? /* @__PURE__ */ React41.createElement(React41.Fragment, null, /* @__PURE__ */ React41.createElement(Typography7, { variant: "overline", className: classes3.sectionHeading }, "Layout:"), /* @__PURE__ */ React41.createElement("div", { className: classes3.control }, /* @__PURE__ */ React41.createElement(Typography7, { variant: "body2" }, "Alignment:"), /* @__PURE__ */ React41.createElement(
    Box6,
    {
      sx: {
        display: "flex",
        flexDirection: "row",
        alignItems: "center",
        flexWrap: "wrap",
        gap: 1
      }
    },
    hasLayoutHorizontalControls ? /* @__PURE__ */ React41.createElement(
      NodeAttributeEditor,
      {
        node,
        namespace: "layout",
        name: "horizontalAlign",
        argType: layoutBoxArgTypes.horizontalAlign,
        sx: { maxWidth: 110 }
      }
    ) : null,
    hasLayoutVerticalControls ? /* @__PURE__ */ React41.createElement(
      NodeAttributeEditor,
      {
        node,
        namespace: "layout",
        name: "verticalAlign",
        argType: layoutBoxArgTypes.verticalAlign
      }
    ) : null
  )), /* @__PURE__ */ React41.createElement(Divider4, { sx: { mt: 1 } })) : null, Object.entries(argTypesByCategory).map(([category, argTypeEntries]) => /* @__PURE__ */ React41.createElement(React41.Fragment, { key: category }, /* @__PURE__ */ React41.createElement(Typography7, { variant: "overline", className: classes3.sectionHeading }, category, ":"), argTypeEntries.map(
    ([propName, propTypeDef]) => propTypeDef && shouldRenderControl(propTypeDef, propName, props) ? /* @__PURE__ */ React41.createElement("div", { key: propName, className: classes3.control }, /* @__PURE__ */ React41.createElement(
      NodeAttributeEditor,
      {
        node,
        namespace: "props",
        props,
        name: propName,
        argType: propTypeDef
      }
    )) : null
  ))));
}
function SelectedNodeEditor({ node }) {
  const { bindings, viewState } = usePageEditorState();
  const componentConfig = viewState.nodes[node.id]?.componentConfig || { argTypes: {} };
  const component = useToolpadComponent(getElementNodeComponentId(node));
  const displayName = component?.displayName || "<unknown>";
  return /* @__PURE__ */ React41.createElement(ElementContext_default.Provider, { value: node }, /* @__PURE__ */ React41.createElement(Stack4, { direction: "column", gap: 0 }, /* @__PURE__ */ React41.createElement(MarkdownTooltip, { placement: "left", title: componentConfig.helperText ?? displayName }, /* @__PURE__ */ React41.createElement(Typography7, { variant: "body1" }, node.name)), /* @__PURE__ */ React41.createElement(Divider4, { sx: { mt: 1 } }), node ? /* @__PURE__ */ React41.createElement(ComponentPropsEditor, { bindings, componentConfig, node }) : null));
}
function ComponentEditor({ node, className }) {
  return /* @__PURE__ */ React41.createElement(ComponentEditorRoot, { className, "data-testid": "component-editor" }, /* @__PURE__ */ React41.createElement(SelectedNodeEditor, { key: node.id, node }));
}

// src/toolpad/AppEditor/PageEditor/ThemeEditor.tsx
import * as React44 from "react";
import * as appDom15 from "@toolpad/studio-runtime/appDom";

// src/components/MuiThemeEditor.tsx
import * as React43 from "react";
import {
  Box as Box8,
  Button as Button5,
  capitalize,
  createTheme,
  Popover,
  Stack as Stack6,
  styled as styled18,
  ToggleButton as ToggleButton2,
  ToggleButtonGroup as ToggleButtonGroup2,
  useTheme as useTheme3
} from "@mui/material";
import LightModeIcon from "@mui/icons-material/LightMode";
import DarkModeIcon from "@mui/icons-material/DarkMode";

// src/components/ColorTool.tsx
import * as React42 from "react";
import { rgbToHex, useTheme as useTheme2 } from "@mui/material/styles";
import * as colors from "@mui/material/colors";
import Box7 from "@mui/material/Box";
import Input from "@mui/material/Input";
import Radio from "@mui/material/Radio";
import Tooltip8 from "@mui/material/Tooltip";
import Typography8 from "@mui/material/Typography";
import CheckIcon from "@mui/icons-material/Check";
import Slider from "@mui/material/Slider";
import invariant6 from "invariant";
import { Stack as Stack5 } from "@mui/material";
var isRgb = (string) => /rgb\([0-9]{1,3}\s*,\s*[0-9]{1,3}\s*,\s*[0-9]{1,3}\)/i.test(string);
var isHex = (string) => /^#?([0-9a-f]{3})$|^#?([0-9a-f]){6}$/i.test(string);
function parseColor(color) {
  if (isRgb(color)) {
    return color;
  }
  if (isHex(color)) {
    if (!color.startsWith("#")) {
      return `#${color}`;
    }
    return color;
  }
  return null;
}
var hues = [
  "red",
  "pink",
  "purple",
  "deepPurple",
  "indigo",
  "blue",
  "lightBlue",
  "cyan",
  "teal",
  "green",
  "lightGreen",
  "lime",
  "yellow",
  "amber",
  "orange",
  "deepOrange"
];
var shades = [
  900,
  800,
  700,
  600,
  500,
  400,
  300,
  200,
  100,
  50,
  "A700",
  "A400",
  "A200",
  "A100"
];
var TooltipRadio = React42.forwardRef(
  function TooltipRadio2(props, ref) {
    const {
      "aria-labelledby": ariaLabelledBy,
      "aria-label": ariaLabel,
      inputProps,
      ...other
    } = props;
    return /* @__PURE__ */ React42.createElement(
      Radio,
      {
        ref,
        ...other,
        inputProps: {
          ...inputProps,
          "aria-labelledby": ariaLabelledBy,
          "aria-label": ariaLabel
        }
      }
    );
  }
);
function ColorTool({ sx, label, value, onChange }) {
  const theme = useTheme2();
  const [state, setState] = React42.useState({
    input: value,
    hue: "blue",
    shade: 4,
    valid: true
  });
  const handleChangeColor = (event) => {
    let {
      target: { value: color2 }
    } = event;
    const parsed = parseColor(color2);
    const valid = !!parsed;
    if (parsed) {
      color2 = parsed;
    }
    setState((oldState) => ({
      ...oldState,
      input: color2,
      valid
    }));
    if (valid) {
      onChange?.(color2);
    }
  };
  const handleChangeHue = (event) => {
    const hue = event.target.value;
    const color2 = colors[hue][shades[state.shade]];
    if (color2) {
      setState({
        ...state,
        hue,
        input: color2
      });
      onChange?.(color2);
    }
  };
  const handleChangeShade = (event, shade) => {
    invariant6(!Array.isArray(shade), "Material-UI: `shade` must not be an array.");
    const color2 = colors[state.hue][shades[shade]];
    if (color2) {
      setState({
        ...state,
        shade,
        input: color2
      });
      onChange?.(color2);
    }
  };
  const intentInput = state.input;
  const intentShade = state.shade;
  const color = value;
  const background = color ? theme.palette.augmentColor({
    color: {
      main: color
    }
  }) : void 0;
  const id = React42.useId();
  return /* @__PURE__ */ React42.createElement(Box7, { sx }, /* @__PURE__ */ React42.createElement(Typography8, { component: "label", gutterBottom: true, htmlFor: id, variant: "h6" }, label), /* @__PURE__ */ React42.createElement(
    Input,
    {
      id,
      value: intentInput,
      onChange: handleChangeColor,
      fullWidth: true,
      error: !state.valid
    }
  ), /* @__PURE__ */ React42.createElement(Box7, { sx: { display: "flex", alignItems: "center", mt: 2, mb: 2 } }, /* @__PURE__ */ React42.createElement(Typography8, { id: `${id}ShadeSliderLabel` }, "Shade:"), /* @__PURE__ */ React42.createElement(
    Slider,
    {
      sx: { width: "calc(100% - 80px)", ml: 3, mr: 3 },
      value: intentShade,
      min: 0,
      max: 13,
      step: 1,
      onChange: handleChangeShade,
      "aria-labelledby": `${id}ShadeSliderLabel`
    }
  ), /* @__PURE__ */ React42.createElement(Typography8, null, shades[intentShade])), /* @__PURE__ */ React42.createElement(Box7, { sx: { width: 192, margin: "auto" } }, hues.map((hue) => {
    const shade = shades[state.shade];
    const backgroundColor = colors[hue][shade];
    return /* @__PURE__ */ React42.createElement(Tooltip8, { placement: "right", title: hue, key: hue, disableInteractive: true }, /* @__PURE__ */ React42.createElement(
      TooltipRadio,
      {
        sx: { p: 0 },
        color: "default",
        checked: color === backgroundColor,
        onChange: handleChangeHue,
        value: hue,
        name: label,
        icon: /* @__PURE__ */ React42.createElement(Box7, { sx: { width: 48, height: 48 }, style: { backgroundColor } }),
        checkedIcon: /* @__PURE__ */ React42.createElement(
          Box7,
          {
            sx: {
              width: 48,
              height: 48,
              border: 1,
              borderColor: "white",
              color: "common.white",
              display: "flex",
              justifyContent: "center",
              alignItems: "center"
            },
            style: { backgroundColor }
          },
          /* @__PURE__ */ React42.createElement(CheckIcon, { style: { fontSize: 30 } })
        )
      }
    ));
  })), /* @__PURE__ */ React42.createElement(Stack5, { direction: "row", sx: { mt: 2, justifyContent: "center" } }, ["dark", "main", "light"].map((key) => /* @__PURE__ */ React42.createElement(
    Box7,
    {
      sx: {
        width: 64,
        height: 64,
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      },
      style: { backgroundColor: background?.[key] },
      key
    },
    /* @__PURE__ */ React42.createElement(
      Typography8,
      {
        variant: "caption",
        style: {
          color: background ? theme.palette.getContrastText(background[key]) : void 0
        }
      },
      background ? rgbToHex(background[key]) : ""
    )
  ))));
}
var ColorTool_default = ColorTool;

// src/components/FlexFill.tsx
import { styled as styled17 } from "@mui/material";
var FlexFill = styled17("div")({ flex: 1 });
var FlexFill_default = FlexFill;

// src/components/MuiThemeEditor.tsx
var IconToggleButton = styled18(ToggleButton2)({
  display: "flex",
  justifyContent: "center",
  width: "100%",
  "& > *": {
    marginRight: "8px"
  }
});
function PaletteColorPicker({ label, value, onChange }) {
  const theme = useTheme3();
  const [anchorEl, setAnchorEl] = React43.useState(null);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const id = React43.useId();
  return /* @__PURE__ */ React43.createElement(React43.Fragment, null, /* @__PURE__ */ React43.createElement(Button5, { "aria-describedby": id, variant: "outlined", onClick: handleClick }, label, /* @__PURE__ */ React43.createElement(FlexFill_default, null), /* @__PURE__ */ React43.createElement(
    Box8,
    {
      sx: {
        ml: 2,
        p: "2px 8px",
        background: value,
        color: value ? theme.palette.getContrastText(value) : void 0,
        borderRadius: 1
      }
    },
    value
  )), /* @__PURE__ */ React43.createElement(
    Popover,
    {
      id: open ? id : void 0,
      open,
      anchorEl,
      onClose: handleClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React43.createElement(ColorTool_default, { sx: { m: 2 }, label, value, onChange })
  ));
}
function MuiThemeEditor({ value, onChange }) {
  const theme = useTheme3();
  const defaultTheme = React43.useMemo(
    () => createTheme({ palette: { mode: value?.palette?.mode } }),
    [value?.palette?.mode]
  );
  const colorPicker = (intent) => /* @__PURE__ */ React43.createElement(
    PaletteColorPicker,
    {
      label: capitalize(intent),
      value: value?.palette?.[intent]?.main || defaultTheme.palette[intent].main,
      onChange: (newMain) => {
        onChange({
          ...value,
          palette: {
            ...value?.palette,
            [intent]: newMain ? {
              main: newMain,
              contrastText: theme.palette.getContrastText(newMain)
            } : void 0
          }
        });
      }
    }
  );
  return /* @__PURE__ */ React43.createElement(Stack6, { direction: "column", spacing: 2 }, /* @__PURE__ */ React43.createElement(
    ToggleButtonGroup2,
    {
      exclusive: true,
      value: value?.palette?.mode || defaultTheme.palette.mode,
      onChange: (event, newMode) => {
        if (newMode) {
          onChange({
            ...value,
            palette: {
              ...value?.palette,
              mode: newMode
            }
          });
        }
      },
      "aria-label": "Mode"
    },
    /* @__PURE__ */ React43.createElement(IconToggleButton, { value: "light", "aria-label": "light" }, /* @__PURE__ */ React43.createElement(LightModeIcon, null), "Light"),
    /* @__PURE__ */ React43.createElement(IconToggleButton, { value: "dark", "aria-label": "dark" }, /* @__PURE__ */ React43.createElement(DarkModeIcon, null), "Dark")
  ), colorPicker("primary"), colorPicker("secondary"));
}

// src/toolpad/AppEditor/PageEditor/ThemeEditor.tsx
function ComponentEditor2({ className }) {
  const { dom } = useAppState();
  const domApi = useDomApi();
  const app = appDom15.getApp(dom);
  const { themes = [] } = appDom15.getChildNodes(dom, app);
  const theme = themes.length > 0 ? themes[0] : null;
  return /* @__PURE__ */ React44.createElement("div", { className, "data-testid": "theme-editor" }, /* @__PURE__ */ React44.createElement(
    MuiThemeEditor,
    {
      value: theme?.theme || {},
      onChange: (newTheme) => {
        domApi.update((draft) => {
          if (theme) {
            draft = appDom15.setNodeProp(draft, theme, "theme", newTheme);
            return draft;
          }
          const newThemeNode = appDom15.createNode(dom, "theme", {
            name: "Theme",
            theme: newTheme,
            attributes: {}
          });
          draft = appDom15.addNode(draft, newThemeNode, app, "themes");
          return draft;
        });
      }
    }
  ));
}

// src/toolpad/AppEditor/PageEditor/ComponentPanel.tsx
var classes4 = {
  panel: "Toolpad_Panel",
  themesDocsLink: "Toolpad_ThemesDocsLink"
};
var ComponentPanelRoot = styled19("div")(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  height: "100%",
  [`& .${classes4.panel}`]: {
    flex: 1,
    padding: theme.spacing(2),
    overflow: "auto"
  },
  [`& .${classes4.themesDocsLink}`]: {
    marginBottom: theme.spacing(1)
  }
}));
function ComponentPanel({ className }) {
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const currentTab = currentView.kind === "page" ? currentView.pageViewTab : null;
  const selectedNodeId = currentView.kind === "page" ? currentView.selectedNodeId : null;
  const selectedNode = selectedNodeId ? appDom16.getMaybeNode(dom, selectedNodeId) : null;
  const handleChange = (_, newValue) => {
    appStateApi.setPageViewTab(newValue);
  };
  return /* @__PURE__ */ React45.createElement(ComponentPanelRoot, { className }, /* @__PURE__ */ React45.createElement(TabContext2, { value: currentTab || "page" }, /* @__PURE__ */ React45.createElement(Box9, { sx: { borderBottom: 1, borderColor: "divider" } }, /* @__PURE__ */ React45.createElement(TabList2, { onChange: handleChange, "aria-label": "Component options" }, /* @__PURE__ */ React45.createElement(Tab2, { label: "Page", value: "page" }), /* @__PURE__ */ React45.createElement(Tab2, { label: "Component", value: "component", disabled: !selectedNode }), /* @__PURE__ */ React45.createElement(Tab2, { label: "Theme", value: "theme" }))), /* @__PURE__ */ React45.createElement(TabPanel2, { value: "page", className: classes4.panel }, /* @__PURE__ */ React45.createElement(PageOptionsPanel, null)), /* @__PURE__ */ React45.createElement(TabPanel2, { value: "component", className: classes4.panel }, selectedNode && appDom16.isElement(selectedNode) ? /* @__PURE__ */ React45.createElement(ComponentEditor, { node: selectedNode }) : /* @__PURE__ */ React45.createElement(Typography9, { variant: "body1" }, "No component selected.")), /* @__PURE__ */ React45.createElement(TabPanel2, { value: "theme", className: classes4.panel }, /* @__PURE__ */ React45.createElement(Typography9, { className: classes4.themesDocsLink, variant: "body2" }, "Customize the app with a Material\xA0UI theme. Read more about theming in the", " ", /* @__PURE__ */ React45.createElement(
    Link4,
    {
      href: "https://mui.com/toolpad/studio/concepts/theming/",
      target: "_blank",
      rel: "noopener"
    },
    "docs"
  ), "."), /* @__PURE__ */ React45.createElement(ComponentEditor2, null))));
}

// src/toolpad/AppEditor/PageEditor/ComponentCatalog/ComponentCatalog.tsx
import * as React52 from "react";
import {
  Box as Box11,
  Collapse,
  darken,
  IconButton as IconButton7,
  Link as Link6,
  styled as styled23,
  Typography as Typography10,
  TextField as TextField11
} from "@mui/material";
import ArrowLeftIcon from "@mui/icons-material/ArrowLeft";
import ArrowRightIcon from "@mui/icons-material/ArrowRight";
import ArrowDropDownSharpIcon from "@mui/icons-material/ArrowDropDownSharp";
import invariant8 from "invariant";
import InputAdornment2 from "@mui/material/InputAdornment";
import AccountCircle from "@mui/icons-material/Search";
import { uncapitalize } from "@toolpad/utils/strings";
import * as appDom18 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PageEditor/ComponentCatalog/ComponentCatalogItem.tsx
import * as React46 from "react";
import { ButtonBase, Box as Box10, styled as styled20 } from "@mui/material";
import SmartButtonIcon from "@mui/icons-material/SmartButton";
import ImageIcon from "@mui/icons-material/Image";
import GridOnIcon from "@mui/icons-material/GridOn";
import Crop75Icon from "@mui/icons-material/Crop75";
import ArrowDropDownCircleIcon from "@mui/icons-material/ArrowDropDownCircle";
import LayersIcon from "@mui/icons-material/Layers";
import DnsIcon from "@mui/icons-material/Dns";
import ContactPageIcon from "@mui/icons-material/ContactPage";
import TabIcon from "@mui/icons-material/Tab";
import TuneIcon from "@mui/icons-material/Tune";
import ToggleOnIcon from "@mui/icons-material/ToggleOn";
import ListIcon from "@mui/icons-material/List";
import RadioButtonCheckedIcon from "@mui/icons-material/RadioButtonChecked";
import DateRangeIcon from "@mui/icons-material/DateRange";
import CheckBoxIcon from "@mui/icons-material/CheckBox";
import DashboardCustomizeSharpIcon from "@mui/icons-material/DashboardCustomizeSharp";
import ManageSearchIcon from "@mui/icons-material/ManageSearch";
import AddIcon2 from "@mui/icons-material/Add";
import UploadFileIcon from "@mui/icons-material/UploadFile";
import NotesIcon from "@mui/icons-material/Notes";
import AutoAwesomeMosaicIcon from "@mui/icons-material/AutoAwesomeMosaic";
import InsightsIcon from "@mui/icons-material/Insights";
import PlaceIcon from "@mui/icons-material/Place";
import ViewSidebarIcon from "@mui/icons-material/ViewSidebar";
import MoodIcon from "@mui/icons-material/Mood";
import HtmlIcon from "@mui/icons-material/Html";
import TableRowsIcon from "@mui/icons-material/TableRows";
import ViewColumnIcon from "@mui/icons-material/ViewColumn";
import TagIcon from "@mui/icons-material/Tag";
import PasswordIcon from "@mui/icons-material/Password";
import LinkIcon2 from "@mui/icons-material/Link";
import TextFormatIcon from "@mui/icons-material/TextFormat";
import SpaceBarIcon from "@mui/icons-material/SpaceBar";
import PieChartIcon from "@mui/icons-material/PieChart";
var iconMap = new Map(
  [
    ["Password", PasswordIcon],
    ["Autocomplete", ManageSearchIcon],
    ["Text", NotesIcon],
    ["Link", LinkIcon2],
    ["Markdown", TextFormatIcon],
    ["Button", SmartButtonIcon],
    ["Image", ImageIcon],
    ["DataGrid", GridOnIcon],
    ["TextField", Crop75Icon],
    ["Select", ArrowDropDownCircleIcon],
    ["List", ListIcon],
    ["Paper", LayersIcon],
    ["Form", DnsIcon],
    ["Card", ContactPageIcon],
    ["Tabs", TabIcon],
    ["Slider", TuneIcon],
    ["Switch", ToggleOnIcon],
    ["Radio", RadioButtonCheckedIcon],
    ["DatePicker", DateRangeIcon],
    ["FilePicker", UploadFileIcon],
    ["Checkbox", CheckBoxIcon],
    ["CodeComponent", DashboardCustomizeSharpIcon],
    ["CreateNew", AddIcon2],
    ["Tabs", TabIcon],
    ["Container", AutoAwesomeMosaicIcon],
    ["Chart", InsightsIcon],
    ["Map", PlaceIcon],
    ["Drawer", ViewSidebarIcon],
    ["Pie Chart", PieChartIcon],
    ["Icon", MoodIcon],
    ["Html", HtmlIcon],
    ["PageRow", TableRowsIcon],
    ["PageColumn", ViewColumnIcon],
    ["Metric", TagIcon],
    ["Spacer", SpaceBarIcon]
  ].map(([id, Icon]) => {
    const StyledIcon = styled20(Icon, {
      shouldForwardProp: (prop) => prop !== "kind"
    })(({ kind }) => ({
      fontSize: 24,
      opacity: kind === "future" ? 0.75 : 1
    }));
    return [id, StyledIcon];
  })
);
function ComponentIcon({ id: componentId, kind, ...props }) {
  const Icon = iconMap.get(kind === "custom" ? "CodeComponent" : componentId);
  return Icon ? /* @__PURE__ */ React46.createElement(Icon, { ...props }) : null;
}
function ComponentCatalogItem({
  draggable,
  onClick,
  id,
  displayName,
  builtIn,
  kind,
  onDragStart
}) {
  return /* @__PURE__ */ React46.createElement(
    Box10,
    {
      className: "ComponentCatalogItem",
      onClick,
      draggable,
      onDragStart,
      component: ButtonBase,
      sx: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        width: builtIn ? 65 : 60,
        height: builtIn ? 65 : 60,
        padding: 1,
        borderRadius: 1,
        border: 1,
        borderColor: "divider",
        borderStyle: kind === "create" ? "dashed" : "solid",
        color: "text.secondary",
        backgroundColor: "paper",
        // https://stackoverflow.com/q/22922761
        transform: "translate(0, 0)",
        "&:hover": {
          backgroundColor: "action.hover"
        },
        ...draggable ? { cursor: "grab" } : {},
        ...onClick ? { cursor: "pointer" } : {}
      }
    },
    /* @__PURE__ */ React46.createElement(ComponentIcon, { id, kind }),
    /* @__PURE__ */ React46.createElement(
      "span",
      {
        style: {
          fontSize: "0.625rem",
          maxWidth: builtIn ? 65 : 60,
          whiteSpace: "nowrap",
          opacity: kind === "future" ? 0.75 : 1,
          textOverflow: "ellipsis",
          overflow: "hidden"
        }
      },
      displayName
    )
  );
}
var ComponentCatalogItem_default = ComponentCatalogItem;

// src/toolpad/AppEditor/PagesExplorer/CreateCodeComponentNodeDialog.tsx
import {
  Button as Button7,
  Dialog as Dialog5,
  DialogActions as DialogActions5,
  DialogContent as DialogContent5,
  DialogTitle as DialogTitle5,
  IconButton as IconButton6,
  Portal,
  Snackbar as Snackbar2,
  TextField as TextField10
} from "@mui/material";
import * as React49 from "react";
import invariant7 from "invariant";
import CloseIcon from "@mui/icons-material/Close";
import useEventCallback4 from "@mui/utils/useEventCallback";
import useLatest2 from "@toolpad/utils/hooks/useLatest";
import * as appDom17 from "@toolpad/studio-runtime/appDom";

// src/components/DialogForm.tsx
import * as React47 from "react";
import { styled as styled21 } from "@mui/material";
var StyledDialogForm = styled21("form")({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column"
});
function DialogForm({ children, onKeyDown = () => {
}, ...rest }) {
  const handleKeyDown = React47.useCallback(
    (event) => {
      const modifierKey = (event.metaKey || event.ctrlKey) && !event.shiftKey;
      if (event.key === "Enter" && modifierKey) {
        const submitButton = event.currentTarget.querySelector('[type="submit"]');
        if (submitButton) {
          submitButton.click();
        }
      }
      onKeyDown(event);
    },
    [onKeyDown]
  );
  return /* @__PURE__ */ React47.createElement(StyledDialogForm, { onKeyDown: handleKeyDown, ...rest }, children);
}

// src/toolpad/OpenCodeEditor.tsx
import * as React48 from "react";
import {
  Button as Button6,
  IconButton as IconButton5,
  Dialog as Dialog4,
  DialogTitle as DialogTitle4,
  DialogContent as DialogContent4,
  DialogContentText,
  Link as Link5,
  DialogActions as DialogActions4,
  Tooltip as Tooltip9,
  CircularProgress
} from "@mui/material";
import CodeIcon from "@mui/icons-material/Code";
import { LoadingButton } from "@mui/lab";
function MissingEditorDialog({ open, onClose }) {
  const handleMissingEditorDialogClose = React48.useCallback(() => {
    onClose(false);
  }, [onClose]);
  const id = React48.useId();
  return /* @__PURE__ */ React48.createElement(
    Dialog4,
    {
      open,
      onClose: handleMissingEditorDialogClose,
      "aria-labelledby": `${id}-title`,
      "aria-describedby": "alert-dialog-description",
      onClick: (event) => event.stopPropagation()
    },
    /* @__PURE__ */ React48.createElement(DialogTitle4, { id: `${id}-title` }, "Editor not found"),
    /* @__PURE__ */ React48.createElement(DialogContent4, null, /* @__PURE__ */ React48.createElement(DialogContentText, { id: "alert-dialog-description" }, 'No editor was detected on your system. If you use Visual Studio Code, this may be due to a missing "code" command in your PATH. Otherwise you can set the', " ", /* @__PURE__ */ React48.createElement("code", null, "$EDITOR"), " environment variable. ", /* @__PURE__ */ React48.createElement("br", null), "Check the", " ", /* @__PURE__ */ React48.createElement(
      Link5,
      {
        href: "https://mui.com/toolpad/studio/how-to-guides/editor-path/",
        target: "_blank",
        rel: "noopener"
      },
      "docs"
    ), " ", "for more information.")),
    /* @__PURE__ */ React48.createElement(DialogActions4, null, /* @__PURE__ */ React48.createElement(Button6, { onClick: handleMissingEditorDialogClose }, "Dismiss"))
  );
}
function OpenCodeEditorButton({
  filePath,
  fileType,
  iconButton,
  onSuccess,
  actionText = "Open",
  disabled,
  ...rest
}) {
  const [missingEditorDialog, setMissingEditorDialog] = React48.useState(false);
  const [busy, setBusy] = React48.useState(false);
  const projectApi = useProjectApi();
  const handleClick = React48.useCallback(
    async (event) => {
      event.stopPropagation();
      setBusy(true);
      try {
        await projectApi.methods.openCodeEditor(filePath, fileType);
        onSuccess?.();
      } catch {
        setMissingEditorDialog(true);
      } finally {
        setBusy(false);
      }
    },
    [projectApi, filePath, fileType, onSuccess]
  );
  return /* @__PURE__ */ React48.createElement(React48.Fragment, null, iconButton ? /* @__PURE__ */ React48.createElement(Tooltip9, { title: "Open in code editor" }, /* @__PURE__ */ React48.createElement(IconButton5, { disabled: disabled || busy, size: "small", onClick: handleClick, ...rest }, busy ? /* @__PURE__ */ React48.createElement(CircularProgress, { color: "inherit", size: 16 }) : /* @__PURE__ */ React48.createElement(CodeIcon, { fontSize: "inherit", color: "primary" }))) : /* @__PURE__ */ React48.createElement(
    LoadingButton,
    {
      disabled: disabled || busy,
      onClick: handleClick,
      loading: busy,
      startIcon: rest.variant === "outlined" ? /* @__PURE__ */ React48.createElement(CodeIcon, { fontSize: "inherit", color: "primary" }) : null,
      ...rest
    },
    actionText
  ), /* @__PURE__ */ React48.createElement(MissingEditorDialog, { open: missingEditorDialog, onClose: setMissingEditorDialog }));
}

// src/toolpad/AppEditor/PagesExplorer/CreateCodeComponentNodeDialog.tsx
function handleInputFocus(event) {
  event.target.select();
}
var DEFAULT_NAME = "MyComponent";
function CreateCodeComponentDialog({
  open,
  onClose,
  ...props
}) {
  const projectApi = useProjectApi();
  const codeComponents = useToolpadComponents();
  const existingNames = React49.useMemo(
    () => new Set(
      Object.values(codeComponents).map((component) => component?.displayName).filter(Boolean)
    ),
    [codeComponents]
  );
  const [name, setName] = React49.useState(appDom17.proposeName(DEFAULT_NAME, existingNames));
  const handleReset = useEventCallback4(
    () => setName(appDom17.proposeName(DEFAULT_NAME, existingNames))
  );
  React49.useEffect(() => {
    if (open) {
      handleReset();
    }
  }, [open, handleReset]);
  const inputErrorMsg = useNodeNameValidation(name, existingNames, "component");
  const isNameValid = !inputErrorMsg;
  const isFormValid = isNameValid;
  const [snackbarState, setSnackbarState] = React49.useState(null);
  const lastSnackbarState = useLatest2(snackbarState);
  const handleSnackbarClose = React49.useCallback(() => {
    setSnackbarState(null);
  }, []);
  return /* @__PURE__ */ React49.createElement(React49.Fragment, null, /* @__PURE__ */ React49.createElement(Dialog5, { open, onClose, ...props }, /* @__PURE__ */ React49.createElement(
    DialogForm,
    {
      autoComplete: "off",
      onSubmit: async (event) => {
        event.preventDefault();
        invariant7(isFormValid, "Invalid form should not be submitted when submit is disabled");
        await projectApi.methods.createComponent(name);
        onClose();
        setSnackbarState({ name });
      }
    },
    /* @__PURE__ */ React49.createElement(DialogTitle5, null, "Create a new Code Component"),
    /* @__PURE__ */ React49.createElement(DialogContent5, null, /* @__PURE__ */ React49.createElement(
      TextField10,
      {
        sx: { my: 1 },
        required: true,
        onFocus: handleInputFocus,
        autoFocus: true,
        fullWidth: true,
        label: "name",
        value: name,
        onChange: (event) => setName(event.target.value),
        error: open && !isNameValid,
        helperText: inputErrorMsg
      }
    )),
    /* @__PURE__ */ React49.createElement(DialogActions5, null, /* @__PURE__ */ React49.createElement(Button7, { color: "inherit", variant: "text", onClick: onClose }, "Cancel"), /* @__PURE__ */ React49.createElement(Button7, { type: "submit", disabled: !isFormValid }, "Create"))
  )), lastSnackbarState ? /* @__PURE__ */ React49.createElement(Portal, null, /* @__PURE__ */ React49.createElement(
    Snackbar2,
    {
      open: !!snackbarState,
      onClose: handleSnackbarClose,
      message: `Component "${lastSnackbarState.name}" created`,
      anchorOrigin: { vertical: "bottom", horizontal: "right" },
      action: /* @__PURE__ */ React49.createElement(React49.Fragment, null, /* @__PURE__ */ React49.createElement(
        OpenCodeEditorButton,
        {
          filePath: name,
          variant: "text",
          fileType: "component",
          color: "primary",
          onSuccess: handleSnackbarClose
        }
      ), /* @__PURE__ */ React49.createElement(
        IconButton6,
        {
          size: "small",
          "aria-label": "close",
          color: "inherit",
          onClick: handleSnackbarClose
        },
        /* @__PURE__ */ React49.createElement(CloseIcon, { fontSize: "small" })
      ))
    }
  )) : null);
}

// src/utils/useLocalStorageState.ts
import * as React50 from "react";
import useStorageState from "@toolpad/utils/hooks/useStorageState";
function useLocalStorageState(key, initialValue) {
  const [input, setInput] = useStorageState("local", key, () => JSON.stringify(initialValue));
  const value = React50.useMemo(() => JSON.parse(input), [input]);
  const handleChange = React50.useCallback(
    (newValue) => setInput(
      JSON.stringify(typeof newValue === "function" ? newValue(value) : newValue)
    ),
    [setInput, value]
  );
  return [value, handleChange];
}

// src/components/HelpTooltipIcon.tsx
import * as React51 from "react";
import { styled as styled22, Tooltip as Tooltip10 } from "@mui/material";
import HelpOutlineIcon from "@mui/icons-material/HelpOutline";
var HelpIcon = styled22(HelpOutlineIcon)(({ theme }) => ({
  color: theme.palette.text.secondary
}));
function HelpTooltipIcon({ helpText, ...props }) {
  return /* @__PURE__ */ React51.createElement(Tooltip10, { title: helpText }, /* @__PURE__ */ React51.createElement(HelpIcon, { ...props }));
}

// src/toolpad/AppEditor/PageEditor/ComponentCatalog/ComponentCatalog.tsx
var FUTURE_COMPONENTS = /* @__PURE__ */ new Map([
  ["Map", { url: "https://github.com/mui/toolpad/issues/864", displayName: "Map" }],
  ["Pie Chart", { url: "https://github.com/mui/toolpad/issues/2615", displayName: "Pie Chart" }],
  ["Drawer", { url: "https://github.com/mui/toolpad/issues/1540", displayName: "Drawer" }],
  ["Html", { url: "https://github.com/mui/toolpad/issues/1311", displayName: "Html" }],
  ["Icon", { url: "https://github.com/mui/toolpad/issues/83", displayName: "Icon" }],
  ["Card", { url: "https://github.com/mui/toolpad/issues/748", displayName: "Card" }],
  ["Slider", { url: "https://github.com/mui/toolpad/issues/746", displayName: "Slider" }],
  ["Radio", { url: "https://github.com/mui/toolpad/issues/744", displayName: "Radio" }]
]);
var COMPONENT_CATALOG_WIDTH_COLLAPSED = 40;
var ComponentCatalogRoot = styled23("div")({
  position: "relative",
  width: COMPONENT_CATALOG_WIDTH_COLLAPSED + 1,
  height: "100%",
  zIndex: 1,
  overflow: "visible"
});
function ComponentCatalog({ className }) {
  const api = usePageEditorApi();
  const { dom } = useAppState();
  const [searchTerm, setSearchTerm] = React52.useState("");
  const [searchFocused, setSearchFocused] = React52.useState(false);
  const [openStart, setOpenStart] = React52.useState(0);
  const [openCustomComponents, setOpenCustomComponents] = useLocalStorageState(
    "catalog-custom-expanded",
    true
  );
  const [openFutureComponents, setOpenFutureComponents] = useLocalStorageState(
    "catalog-future-expanded",
    true
  );
  const closeTimeoutRef = React52.useRef();
  const openDrawer = React52.useCallback(() => {
    if (closeTimeoutRef.current) {
      clearTimeout(closeTimeoutRef.current);
    }
    setOpenStart(Date.now());
  }, []);
  const closeDrawer = React52.useCallback(
    (delay) => {
      const timeOpen = Date.now() - openStart;
      const defaultDelay = timeOpen > 750 ? 500 : 0;
      closeTimeoutRef.current = setTimeout(() => {
        setOpenStart(0);
      }, delay ?? defaultDelay);
    },
    [openStart, setOpenStart]
  );
  const toolpadComponents = useToolpadComponents();
  const handleDragStart = (componentType) => (event) => {
    const def = toolpadComponents[componentType];
    invariant8(def, `No component definition found for "${componentType}"`);
    event.dataTransfer.dropEffect = "copy";
    const newNode = appDom18.createElement(
      dom,
      def.builtIn || componentType,
      def.initialProps || {},
      void 0,
      uncapitalize(def.displayName)
    );
    api.newNodeDragStart(newNode);
    closeDrawer(0);
  };
  const handleMouseEnter = React52.useCallback(() => openDrawer(), [openDrawer]);
  const handleMouseLeave = React52.useCallback(() => closeDrawer(), [closeDrawer]);
  const [createCodeComponentDialogOpen, setCreateCodeComponentDialogOpen] = React52.useState(false);
  const handleCreateCodeComponentDialogOpen = React52.useCallback(() => {
    setCreateCodeComponentDialogOpen(true);
    closeDrawer(0);
  }, [closeDrawer]);
  const handleCreateCodeComponentDialogClose = React52.useCallback(
    () => setCreateCodeComponentDialogOpen(false),
    []
  );
  const filteredItems = React52.useMemo(() => {
    const entries = Object.entries(toolpadComponents);
    if (!searchTerm) {
      return entries;
    }
    const regex = new RegExp(searchTerm.split("").join(".*"), "i");
    return entries.filter(
      ([componentName, component]) => regex.test(componentName) || component?.synonyms.some((name) => regex.test(name))
    );
  }, [toolpadComponents, searchTerm]);
  const drawerOpen = !!openStart || searchFocused;
  React52.useEffect(() => {
    if (!drawerOpen) {
      setSearchTerm("");
    }
  }, [drawerOpen]);
  return /* @__PURE__ */ React52.createElement(React52.Fragment, null, /* @__PURE__ */ React52.createElement(
    ComponentCatalogRoot,
    {
      "data-testid": "component-catalog",
      className,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave
    },
    /* @__PURE__ */ React52.createElement(
      Box11,
      {
        sx: {
          display: "flex",
          flexDirection: "row",
          position: "absolute",
          top: 0,
          bottom: 0,
          backgroundColor: "background.default",
          borderRight: 1,
          borderColor: "divider"
        }
      },
      /* @__PURE__ */ React52.createElement(
        Collapse,
        {
          in: drawerOpen,
          orientation: "horizontal",
          timeout: 200,
          sx: {
            height: "100%",
            justifyContent: "flex-end",
            display: "flex"
          }
        },
        /* @__PURE__ */ React52.createElement(Box11, { sx: { flexDirection: "column", display: "flex", height: "100%" } }, /* @__PURE__ */ React52.createElement(
          Box11,
          {
            sx: {
              width: "100%",
              pl: 1,
              pr: 1
            }
          },
          /* @__PURE__ */ React52.createElement(
            TextField11,
            {
              placeholder: "Search components...",
              value: searchTerm,
              onChange: (event) => setSearchTerm(event.target.value),
              onFocus: () => setSearchFocused(true),
              onBlur: () => setSearchFocused(false),
              slotProps: {
                input: {
                  startAdornment: /* @__PURE__ */ React52.createElement(InputAdornment2, { position: "start" }, /* @__PURE__ */ React52.createElement(AccountCircle, null))
                }
              }
            }
          )
        ), /* @__PURE__ */ React52.createElement(
          Box11,
          {
            sx: {
              flex: 1,
              width: 250,
              overflow: "auto",
              scrollbarGutter: "stable"
            }
          },
          /* @__PURE__ */ React52.createElement(Box11, { display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: 1, padding: 1 }, filteredItems.map(([componentId, componentType]) => {
            invariant8(componentType, `No component definition found for "${componentId}"`);
            return componentType.builtIn && !componentType.system ? /* @__PURE__ */ React52.createElement(
              ComponentCatalogItem_default,
              {
                key: componentId,
                id: componentId,
                draggable: true,
                onDragStart: handleDragStart(componentId),
                displayName: componentType.displayName,
                builtIn: componentType.builtIn,
                kind: "builtIn"
              }
            ) : null;
          })),
          /* @__PURE__ */ React52.createElement(
            Box11,
            {
              pl: 2,
              pr: 1.5,
              pb: 0,
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between"
            },
            /* @__PURE__ */ React52.createElement(Box11, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React52.createElement(Typography10, { mr: 0.5, variant: "overline" }, "Custom Components"), /* @__PURE__ */ React52.createElement(
              HelpTooltipIcon,
              {
                helpText: /* @__PURE__ */ React52.createElement(Typography10, { variant: "inherit" }, "Expand Toolpad Studio with your own React components.", " ", /* @__PURE__ */ React52.createElement(
                  Link6,
                  {
                    href: "https://mui.com/toolpad/studio/concepts/custom-components",
                    target: "_blank",
                    rel: "noopener"
                  },
                  "Learn more"
                ), ".")
              }
            )),
            /* @__PURE__ */ React52.createElement(
              IconButton7,
              {
                "aria-label": "Expand custom components",
                sx: {
                  p: 0,
                  height: "100%",
                  alignSelf: "center",
                  cursor: "pointer",
                  transform: `rotate(${openCustomComponents ? 180 : 0}deg)`,
                  transition: "all 0.2s ease-in"
                },
                onClick: () => setOpenCustomComponents((prev) => !prev)
              },
              /* @__PURE__ */ React52.createElement(ArrowDropDownSharpIcon, null)
            )
          ),
          /* @__PURE__ */ React52.createElement(Collapse, { in: openCustomComponents, orientation: "vertical" }, /* @__PURE__ */ React52.createElement(Box11, { display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: 1, padding: 1, pt: 0 }, filteredItems.map(([componentId, componentType]) => {
            invariant8(
              componentType,
              `No component definition found for "${componentId}"`
            );
            return !componentType.builtIn ? /* @__PURE__ */ React52.createElement(
              ComponentCatalogItem_default,
              {
                key: componentId,
                id: componentId,
                draggable: true,
                onDragStart: handleDragStart(componentId),
                displayName: componentType.displayName,
                kind: "custom"
              }
            ) : null;
          }), /* @__PURE__ */ React52.createElement(
            ComponentCatalogItem_default,
            {
              id: "CreateNew",
              displayName: "Create",
              kind: "create",
              onClick: handleCreateCodeComponentDialogOpen
            }
          ))),
          /* @__PURE__ */ React52.createElement(Box11, { padding: 1 }, /* @__PURE__ */ React52.createElement(
            Box11,
            {
              sx: (theme) => ({
                py: 2,
                pl: 1,
                pr: 0.5,
                borderWidth: 1,
                borderStyle: "solid",
                borderRadius: 1,
                backgroundColor: darken(theme.palette.background.default, 0.1),
                borderColor: theme.palette.divider
              })
            },
            /* @__PURE__ */ React52.createElement(Box11, { pb: 0, display: "flex", flexDirection: "row", justifyContent: "space-between" }, /* @__PURE__ */ React52.createElement(Typography10, { variant: "body2", color: "text.secondary" }, "More components coming soon!"), /* @__PURE__ */ React52.createElement(
              IconButton7,
              {
                "aria-label": "Expand custom components",
                sx: {
                  p: 0,
                  height: "100%",
                  alignSelf: "start",
                  cursor: "pointer",
                  transform: `rotate(${openFutureComponents ? 180 : 0}deg)`,
                  transition: "all 0.2s ease-in"
                },
                onClick: () => setOpenFutureComponents((prev) => !prev)
              },
              /* @__PURE__ */ React52.createElement(ArrowDropDownSharpIcon, null)
            )),
            /* @__PURE__ */ React52.createElement(Collapse, { in: openFutureComponents, orientation: "vertical" }, /* @__PURE__ */ React52.createElement(Typography10, { variant: "caption", color: "text.secondary" }, "\u{1F44D} Upvote on GitHub to get it prioritized."), /* @__PURE__ */ React52.createElement(Box11, { display: "grid", gridTemplateColumns: "1fr 1fr 1fr", gap: 1, pt: 1, pb: 0 }, Array.from(FUTURE_COMPONENTS, ([key, { displayName, url }]) => {
              return /* @__PURE__ */ React52.createElement(
                Link6,
                {
                  href: url,
                  underline: "none",
                  target: "_blank",
                  key: `futureComponent.${key}`
                },
                /* @__PURE__ */ React52.createElement(
                  ComponentCatalogItem_default,
                  {
                    id: key,
                    displayName,
                    kind: "future"
                  }
                )
              );
            })))
          ))
        ))
      ),
      /* @__PURE__ */ React52.createElement(
        Box11,
        {
          sx: {
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            width: COMPONENT_CATALOG_WIDTH_COLLAPSED
          }
        },
        /* @__PURE__ */ React52.createElement(Box11, { sx: { mt: 2 } }, openStart ? /* @__PURE__ */ React52.createElement(ArrowLeftIcon, null) : /* @__PURE__ */ React52.createElement(ArrowRightIcon, null)),
        /* @__PURE__ */ React52.createElement(Box11, { position: "relative" }, /* @__PURE__ */ React52.createElement(
          Typography10,
          {
            sx: {
              position: "absolute",
              top: 0,
              display: "flex",
              alignItems: "center",
              fontSize: 20,
              transform: "rotate(90deg) translate(-10px, 0)",
              transformOrigin: "0 50%",
              whiteSpace: "nowrap"
            }
          },
          "Component library"
        ))
      )
    )
  ), /* @__PURE__ */ React52.createElement(
    CreateCodeComponentDialog,
    {
      open: !!createCodeComponentDialogOpen,
      onClose: handleCreateCodeComponentDialogClose
    }
  ));
}

// src/toolpad/AppEditor/PageEditor/ComponentCatalog/index.tsx
var ComponentCatalog_default = ComponentCatalog;

// src/toolpad/AppEditor/NotFoundEditor.tsx
import { Box as Box12, Alert as Alert3 } from "@mui/material";
import * as React53 from "react";
function NotFoundEditor({ className, message, severity }) {
  return /* @__PURE__ */ React53.createElement(Box12, { className, sx: { p: 3 } }, /* @__PURE__ */ React53.createElement(Alert3, { severity: severity ?? "warning" }, message));
}

// src/toolpad/hooks/useUndoRedo.ts
import * as React54 from "react";
function useUndoRedo() {
  const { currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const currentPageView = currentView.kind === "page" ? currentView.view : null;
  const handleUndo = React54.useCallback(
    (event) => {
      if (currentView.kind === "page" && !currentPageView) {
        event.preventDefault();
        appStateApi.undo();
      } else if (!hasFieldFocus()) {
        appStateApi.undo();
      }
    },
    [currentView.kind, currentPageView, appStateApi]
  );
  const handleRedo = React54.useCallback(
    (event) => {
      if (currentView.kind === "page" && !currentPageView) {
        event.preventDefault();
        appStateApi.redo();
      } else if (!hasFieldFocus()) {
        appStateApi.redo();
      }
    },
    [currentView.kind, currentPageView, appStateApi]
  );
  useShortcut({ key: "z", metaKey: true, preventDefault: false }, handleUndo);
  useShortcut({ key: "z", metaKey: true, shiftKey: true, preventDefault: false }, handleRedo);
}

// src/toolpad/AppEditor/PageEditor/QueryEditor/index.tsx
import * as React72 from "react";
import { Stack as Stack13, Chip as Chip3, Tab as Tab6, IconButton as IconButton12, LinearProgress as LinearProgress3 } from "@mui/material";
import { LoadingButton as LoadingButton4, TabList as TabList6, TabContext as TabContext7, TabPanel as TabPanel4 } from "@mui/lab";
import ClearOutlinedIcon from "@mui/icons-material/ClearOutlined";
import CircleIcon from "@mui/icons-material/Circle";
import CancelPresentationIcon from "@mui/icons-material/CancelPresentation";
import * as appDom20 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/QueryIcon.tsx
import * as React55 from "react";
import HttpIcon from "@mui/icons-material/Http";
import JavascriptIcon from "@mui/icons-material/Javascript";
import AdsClickIcon from "@mui/icons-material/AdsClick";
import AutoModeIcon from "@mui/icons-material/AutoMode";
import { styled as styled24 } from "@mui/material/styles";
var dataSourceIconMap = /* @__PURE__ */ new Map([
  [
    "rest",
    styled24(HttpIcon)(({ theme }) => ({
      marginRight: theme.spacing(0.5),
      marginLeft: theme.spacing(0.5)
    }))
  ],
  [
    "local",
    styled24(JavascriptIcon)(({ theme }) => ({
      marginRight: theme.spacing(0.25),
      marginLeft: theme.spacing(0)
    }))
  ]
]);
var modeIconMap = /* @__PURE__ */ new Map([
  ["query", AutoModeIcon],
  ["action", AdsClickIcon],
  ["mutation", AdsClickIcon]
]);
function QueryIcon({ id: iconId, mode, sx }) {
  const DataSourceIcon = dataSourceIconMap.get(iconId ?? "");
  const ModeIcon = modeIconMap.get(mode ?? "");
  return /* @__PURE__ */ React55.createElement("div", { style: { display: "flex", gap: 0.5 } }, ModeIcon ? /* @__PURE__ */ React55.createElement(
    ModeIcon,
    {
      sx: {
        fontSize: 12,
        alignSelf: "center"
      }
    }
  ) : null, DataSourceIcon ? /* @__PURE__ */ React55.createElement(DataSourceIcon, { sx }) : null);
}

// src/toolpad/AppEditor/PageEditor/QueryEditor/QueryEditorPanel.tsx
import {
  Box as Box21,
  Stack as Stack12,
  TextField as TextField16,
  InputAdornment as InputAdornment4,
  Alert as Alert7,
  MenuItem as MenuItem6,
  Typography as Typography14,
  inputLabelClasses as inputLabelClasses4,
  inputBaseClasses as inputBaseClasses4
} from "@mui/material";
import * as React70 from "react";
import { useBrowserJsRuntime as useBrowserJsRuntime3 } from "@toolpad/studio-runtime/jsBrowserRuntime";
import invariant9 from "invariant";
import * as appDom19 from "@toolpad/studio-runtime/appDom";

// src/toolpadDataSources/rest/client.tsx
import * as React67 from "react";
import {
  Box as Box18,
  Button as Button8,
  InputAdornment as InputAdornment3,
  MenuItem as MenuItem5,
  Stack as Stack9,
  Tab as Tab4,
  TextField as TextField15,
  Toolbar as Toolbar3,
  Link as Link7,
  Typography as Typography12,
  Alert as Alert5,
  styled as styled31,
  Divider as Divider6,
  inputLabelClasses as inputLabelClasses3,
  inputBaseClasses as inputBaseClasses3
} from "@mui/material";
import LoadingButton2 from "@mui/lab/LoadingButton";
import PlayArrowIcon from "@mui/icons-material/PlayArrow";
import { Controller, useForm } from "react-hook-form";
import { TabContext as TabContext5, TabList as TabList4 } from "@mui/lab";
import { createServerJsRuntime } from "@toolpad/studio-runtime/jsServerRuntime";

// src/toolpadDataSources/rest/AuthenticationEditor.tsx
import * as React56 from "react";
import { Grid as Grid2, MenuItem as MenuItem3, Stack as Stack7, TextField as TextField12 } from "@mui/material";
function ApiKeyAuthEditor({ disabled, value, onChange }) {
  return /* @__PURE__ */ React56.createElement(Stack7, { gap: 1 }, /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      disabled,
      label: "header",
      value: value.header,
      onChange: (event) => onChange({ ...value, header: event.target.value })
    }
  ), /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      disabled,
      label: "key",
      value: value.key,
      onChange: (event) => onChange({ ...value, key: event.target.value })
    }
  ));
}
function BearerTokenAuthEditor({
  disabled,
  value,
  onChange
}) {
  return /* @__PURE__ */ React56.createElement(Stack7, { gap: 1 }, /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      disabled,
      label: "token",
      value: value.token,
      onChange: (event) => onChange({ ...value, token: event.target.value })
    }
  ));
}
function BasicAuthEditor({ disabled, value, onChange }) {
  return /* @__PURE__ */ React56.createElement(Stack7, { gap: 1 }, /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      disabled,
      label: "user",
      value: value.user,
      onChange: (event) => onChange({ ...value, user: event.target.value })
    }
  ), /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      type: "password",
      disabled,
      label: "password",
      value: value.password,
      onChange: (event) => onChange({ ...value, password: event.target.value })
    }
  ));
}
function AuthenticationDetailsEditor({ value, ...props }) {
  switch (value.type) {
    case "basic":
      return /* @__PURE__ */ React56.createElement(BasicAuthEditor, { value, ...props });
    case "bearerToken":
      return /* @__PURE__ */ React56.createElement(BearerTokenAuthEditor, { value, ...props });
    case "apiKey":
      return /* @__PURE__ */ React56.createElement(ApiKeyAuthEditor, { value, ...props });
    default:
      throw new Error(`Unsupported authentication type "${value.type}"`);
  }
}
function getInitialAuthenticationValue(type) {
  if (!type) {
    return null;
  }
  switch (type) {
    case "basic":
      return { type, user: "", password: "" };
    case "bearerToken":
      return { type, token: "" };
    case "apiKey":
      return { type, header: "", key: "" };
    default:
      throw new Error(`Unsupported authentication type "${type}"`);
  }
}
function AuthenticationEditor({
  disabled,
  value,
  onChange
}) {
  const handleTypeChange = React56.useCallback(
    (event) => {
      onChange(getInitialAuthenticationValue(event.target.value));
    },
    [onChange]
  );
  return /* @__PURE__ */ React56.createElement(Grid2, { container: true, spacing: 1 }, /* @__PURE__ */ React56.createElement(Grid2, { item: true, xs: 4 }, /* @__PURE__ */ React56.createElement(
    TextField12,
    {
      disabled,
      select: true,
      label: "authentication",
      value: value?.type || "",
      onChange: handleTypeChange,
      fullWidth: true
    },
    /* @__PURE__ */ React56.createElement(MenuItem3, { value: "" }, "No authentication"),
    /* @__PURE__ */ React56.createElement(MenuItem3, { value: "basic" }, "Basic"),
    /* @__PURE__ */ React56.createElement(MenuItem3, { value: "bearerToken" }, "Bearer token"),
    /* @__PURE__ */ React56.createElement(MenuItem3, { value: "apiKey" }, "API key")
  )), /* @__PURE__ */ React56.createElement(Grid2, { item: true, xs: 4 }, value ? /* @__PURE__ */ React56.createElement(AuthenticationDetailsEditor, { disabled, value, onChange }) : null));
}

// src/utils/forms.ts
function errorMessage(error) {
  if (error.message) {
    return error.message;
  }
  switch (error.type) {
    case "required":
      return "required";
    default:
      return "invalid";
  }
}
function validation(formState, field) {
  const error = formState.errors[field];
  return {
    error: !!error,
    helperText: error ? errorMessage(error) : void 0
  };
}
function isSaveDisabled(formState) {
  const { isValid, isDirty } = formState;
  return !isValid || !isDirty;
}

// src/toolpad/AppEditor/PageEditor/ParametersEditor.tsx
import { Box as Box13, TextField as TextField13, IconButton as IconButton8, inputLabelClasses } from "@mui/material";
import * as React57 from "react";
import DeleteIcon3 from "@mui/icons-material/Delete";
function ParametersEditor({
  value,
  onChange,
  liveValue,
  globalScope,
  label,
  fieldLabel = "field",
  valueLabel = "value",
  autoFocus = false,
  sx,
  jsRuntime,
  disabled,
  globalScopeMeta,
  env,
  declaredEnvKeys
}) {
  const fieldInputRef = React57.useRef(null);
  const handleRemove = React57.useCallback(
    (index) => () => {
      onChange(value.filter((entry, i) => i !== index));
    },
    [onChange, value]
  );
  const isValidFieldName = React57.useMemo(() => {
    const counts = {};
    value.forEach(([field]) => {
      counts[field] = counts[field] ? counts[field] + 1 : 1;
    });
    return value.map(([field]) => !!field && counts[field] <= 1);
  }, [value]);
  return /* @__PURE__ */ React57.createElement(
    Box13,
    {
      sx,
      display: "grid",
      gridTemplateColumns: "1fr 2fr auto",
      alignItems: "center",
      columnGap: 1,
      rowGap: 0
    },
    label ? /* @__PURE__ */ React57.createElement(Box13, { gridColumn: "span 3" }, label, ":") : null,
    value.map(([field, fieldValue], index) => {
      const liveBinding = liveValue[index]?.[1];
      return /* @__PURE__ */ React57.createElement(React57.Fragment, { key: index }, /* @__PURE__ */ React57.createElement(
        TextField13,
        {
          label: valueLabel,
          value: field,
          autoFocus: true,
          onChange: (event) => onChange(
            value.map((entry, i) => i === index ? [event.target.value, entry[1]] : entry)
          ),
          sx: { [`& .${inputLabelClasses.root}`]: { fontSize: 12 } },
          error: !isValidFieldName[index],
          disabled,
          slotProps: {
            htmlInput: { sx: { fontSize: 12 } }
          }
        }
      ), /* @__PURE__ */ React57.createElement(
        BindableEditor,
        {
          liveBinding,
          jsRuntime,
          globalScope,
          globalScopeMeta,
          label: field,
          propType: { type: "string" },
          value: fieldValue,
          onChange: (newBinding) => onChange(value.map((entry, i) => i === index ? [entry[0], newBinding] : entry)),
          disabled,
          env,
          declaredEnvKeys
        }
      ), /* @__PURE__ */ React57.createElement(
        IconButton8,
        {
          "aria-label": "Delete property",
          onClick: handleRemove(index),
          sx: { ml: -0.5 }
        },
        /* @__PURE__ */ React57.createElement(DeleteIcon3, { fontSize: "inherit" })
      ));
    }),
    /* @__PURE__ */ React57.createElement("form", { autoComplete: "off", style: { display: "contents" } }, /* @__PURE__ */ React57.createElement(
      TextField13,
      {
        inputRef: fieldInputRef,
        label: fieldLabel,
        value: "",
        onChange: (event) => {
          onChange([...value, [event.target.value, null]]);
        },
        sx: { [`& .${inputLabelClasses.root}`]: { fontSize: 12 } },
        autoFocus,
        disabled,
        slotProps: {
          htmlInput: { sx: { fontSize: 12 } }
        }
      }
    ))
  );
}

// src/toolpadDataSources/rest/BodyEditor.tsx
import * as React58 from "react";
import {
  Box as Box14,
  Divider as Divider5,
  MenuItem as MenuItem4,
  Skeleton as Skeleton3,
  styled as styled25,
  TextField as TextField14,
  Toolbar as Toolbar2,
  Typography as Typography11,
  inputLabelClasses as inputLabelClasses2,
  inputBaseClasses as inputBaseClasses2
} from "@mui/material";
import { TabContext as TabContext3 } from "@mui/lab";
import { useServerJsRuntime } from "@toolpad/studio-runtime/jsServerRuntime";
var BodyEditorRoot = styled25("div")({
  position: "relative"
});
var RAW_CONTENT_TYPES = /* @__PURE__ */ new Map([
  ["text/plain", { alias: "text", language: "plaintext" }],
  ["application/json", { alias: "json", language: "json" }],
  ["text/javascript", { alias: "javascript", language: "typescript" }],
  ["text/csv", { alias: "csv", language: "plaintext" }],
  ["text/html", { alias: "html", language: "html" }],
  ["text/css", { alias: "css", language: "css" }],
  ["application/xml", { alias: "xml", language: "plaintext" }]
]);
var BodyEditorToolbar = styled25((props) => /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement(Toolbar2, { disableGutters: true, ...props }), /* @__PURE__ */ React58.createElement(Divider5, null)))(({ theme }) => ({
  gap: theme.spacing(1),
  marginBottom: theme.spacing(1)
}));
var MonacoEditor = lazyComponent(() => import("./MonacoEditor-4EVJCOAD.mjs"), {
  noSsr: true,
  fallback: /* @__PURE__ */ React58.createElement(Skeleton3, { variant: "rectangular", height: "100%" })
});
function RawBodyEditor({
  renderToolbar,
  value: valueProp,
  onChange,
  globalScope,
  globalScopeMeta,
  disabled
}) {
  const value = React58.useMemo(
    () => valueProp ?? {
      kind: "raw",
      contentType: "text/plain",
      content: ""
    },
    [valueProp]
  );
  const handleContentTypeChange = React58.useCallback(
    (event) => {
      onChange({ ...value, contentType: event.target.value });
    },
    [onChange, value]
  );
  const handleValueChange = React58.useCallback(
    (newContent) => {
      onChange({ ...value, content: newContent || "" });
    },
    [onChange, value]
  );
  const content = value?.content ?? null;
  const jsServerRuntime = useServerJsRuntime();
  const liveContent = useEvaluateLiveBinding({
    jsRuntime: jsServerRuntime,
    input: content,
    globalScope
  });
  const { language = "plaintext" } = RAW_CONTENT_TYPES.get(value.contentType) ?? {};
  return /* @__PURE__ */ React58.createElement(React58.Fragment, null, renderToolbar({
    actions: /* @__PURE__ */ React58.createElement(
      TextField14,
      {
        select: true,
        label: "content-type",
        sx: {
          [`& .${inputLabelClasses2.root}`]: { fontSize: 12 },
          [`& .${inputBaseClasses2.root}`]: { fontSize: 12 },
          width: 200
        },
        value: value?.contentType,
        onChange: handleContentTypeChange,
        disabled
      },
      Array.from(RAW_CONTENT_TYPES.entries(), ([contentType, { alias }]) => /* @__PURE__ */ React58.createElement(MenuItem4, { key: contentType, value: contentType }, alias))
    )
  }), /* @__PURE__ */ React58.createElement(
    BindableEditor,
    {
      sx: { mt: 1 },
      liveBinding: liveContent,
      globalScope,
      globalScopeMeta,
      propType: { type: "string" },
      jsRuntime: jsServerRuntime,
      renderControl: (props) => /* @__PURE__ */ React58.createElement(
        MonacoEditor,
        {
          sx: { flex: 1, height: 250 },
          language,
          value: props.value,
          onChange: props.onChange,
          disabled: props.disabled
        }
      ),
      value: value?.content || null,
      onChange: handleValueChange,
      label: "json",
      disabled
    }
  ));
}
function UrlEncodedBodyEditor({
  renderToolbar,
  value: valueProp,
  onChange,
  globalScope,
  globalScopeMeta,
  disabled
}) {
  const value = React58.useMemo(
    () => valueProp ?? {
      kind: "urlEncoded",
      contentType: "text/plain",
      content: []
    },
    [valueProp]
  );
  const handleParamsChange = React58.useCallback(
    (newContent) => {
      onChange({ ...value, content: newContent });
    },
    [onChange, value]
  );
  const jsServerRuntime = useServerJsRuntime();
  const liveContent = useEvaluateLiveBindingEntries({
    jsRuntime: jsServerRuntime,
    input: value.content,
    globalScope
  });
  return /* @__PURE__ */ React58.createElement(React58.Fragment, null, renderToolbar(), /* @__PURE__ */ React58.createElement(
    ParametersEditor,
    {
      sx: { mt: 1 },
      value: value.content,
      onChange: handleParamsChange,
      globalScope,
      globalScopeMeta,
      liveValue: liveContent,
      disabled,
      jsRuntime: jsServerRuntime
    }
  ));
}
function BodyEditor({
  globalScope,
  globalScopeMeta,
  value,
  onChange,
  sx,
  method: methodProp
}) {
  const [activeTab, setActiveTab] = React58.useState(value?.kind || "raw");
  React58.useEffect(() => setActiveTab(value?.kind || "raw"), [value?.kind]);
  const handleTabChange = (event) => {
    setActiveTab(event.target.value);
  };
  const method = methodProp || "GET";
  const disabled = HTTP_NO_BODY.has(method);
  const renderToolbar = React58.useCallback(
    ({ actions } = {}) => /* @__PURE__ */ React58.createElement(BodyEditorToolbar, null, /* @__PURE__ */ React58.createElement(
      TextField14,
      {
        label: "body",
        select: true,
        value: activeTab,
        onChange: handleTabChange,
        disabled,
        sx: {
          [`& .${inputLabelClasses2.root}`]: { fontSize: 12 },
          [`& .${inputBaseClasses2.root}`]: { fontSize: 12 },
          width: 200
        },
        slotProps: {
          htmlInput: { sx: { fontSize: 12 } }
        }
      },
      /* @__PURE__ */ React58.createElement(MenuItem4, { value: "raw" }, "raw"),
      /* @__PURE__ */ React58.createElement(MenuItem4, { value: "urlEncoded" }, "x-www-form-urlencoded")
    ), actions),
    [activeTab, disabled]
  );
  return /* @__PURE__ */ React58.createElement(BodyEditorRoot, { sx }, /* @__PURE__ */ React58.createElement(TabContext3, { value: activeTab }, /* @__PURE__ */ React58.createElement(TabPanel_default, { disableGutters: true, value: "raw" }, /* @__PURE__ */ React58.createElement(
    RawBodyEditor,
    {
      renderToolbar,
      globalScope,
      globalScopeMeta,
      value: value?.kind === "raw" ? value : null,
      onChange,
      disabled
    }
  )), /* @__PURE__ */ React58.createElement(TabPanel_default, { disableGutters: true, value: "urlEncoded" }, /* @__PURE__ */ React58.createElement(
    UrlEncodedBodyEditor,
    {
      renderToolbar,
      globalScope,
      globalScopeMeta,
      value: value?.kind === "urlEncoded" ? value : null,
      onChange,
      disabled
    }
  ))), HTTP_NO_BODY.has(method) ? /* @__PURE__ */ React58.createElement(
    Box14,
    {
      sx: {
        position: "absolute",
        inset: "0 0 0 0",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }
    },
    /* @__PURE__ */ React58.createElement(Typography11, { color: "info", variant: "body2" }, '"', method, `" requests can't have a body`)
  ) : null);
}

// src/toolpadDataSources/useQueryPreview.ts
import * as React59 from "react";
import { errorFrom as errorFrom2 } from "@toolpad/utils/errors";
function useQueryPreview(dofetch, query, params, { onPreview } = {}) {
  const [preview, setPreview] = React59.useState(null);
  const [isLoading, setIsLoading] = React59.useState(false);
  const cancelRunPreview = React59.useRef(null);
  const runPreview = React59.useCallback(() => {
    let canceled = false;
    cancelRunPreview.current?.();
    cancelRunPreview.current = () => {
      canceled = true;
    };
    setIsLoading(true);
    dofetch(query, params).then(
      (result) => {
        if (!canceled) {
          setPreview(result);
          onPreview?.(result);
        }
      },
      (error) => {
        setPreview({ error: errorFrom2(error) });
      }
    ).finally(() => {
      setIsLoading(false);
      cancelRunPreview.current = null;
    });
  }, [dofetch, query, params, onPreview]);
  return { preview, runPreview, isLoading };
}

// src/toolpadDataSources/TranformInput.tsx
import { Stack as Stack8, Checkbox as Checkbox4, FormControlLabel as FormControlLabel3, IconButton as IconButton9 } from "@mui/material";
import * as React60 from "react";
import AutorenewIcon from "@mui/icons-material/Autorenew";
var SCOPE_META = {};
function TransformInput({
  value,
  onChange,
  enabled,
  onEnabledChange,
  globalScope,
  loading,
  onUpdatePreview
}) {
  const handleTransformEnabledChange = React60.useCallback(
    (event) => onEnabledChange(event.target.checked),
    [onEnabledChange]
  );
  return /* @__PURE__ */ React60.createElement(Stack8, null, /* @__PURE__ */ React60.createElement(
    FormControlLabel3,
    {
      label: "Transform response",
      sx: {
        "& .MuiFormControlLabel-label": { fontSize: 12 }
      },
      control: /* @__PURE__ */ React60.createElement(
        Checkbox4,
        {
          checked: enabled,
          sx: { p: 0.25, pl: 1 },
          onChange: handleTransformEnabledChange,
          inputProps: { "aria-label": "controlled" }
        }
      )
    }
  ), /* @__PURE__ */ React60.createElement(Stack8, { direction: "row", spacing: 2, width: "100%" }, /* @__PURE__ */ React60.createElement(
    JsonView,
    {
      src: globalScope,
      disabled: loading || !enabled,
      sx: {
        width: "300px",
        maxWidth: "600px",
        maxHeight: "150px"
      }
    }
  ), onUpdatePreview ? /* @__PURE__ */ React60.createElement(
    IconButton9,
    {
      disabled: !enabled,
      onClick: onUpdatePreview,
      sx: { alignSelf: "self-start" }
    },
    /* @__PURE__ */ React60.createElement(
      AutorenewIcon,
      {
        sx: {
          animation: "spin 1500ms linear infinite",
          animationPlayState: loading ? "running" : "paused",
          "@keyframes spin": {
            "0%": {
              transform: "rotate(0deg)"
            },
            "100%": {
              transform: "rotate(360deg)"
            }
          }
        },
        fontSize: "inherit"
      }
    )
  ) : null, /* @__PURE__ */ React60.createElement(
    JsExpressionEditor,
    {
      globalScope,
      globalScopeMeta: SCOPE_META,
      autoFocus: true,
      value,
      sx: {
        minWidth: "300px",
        flex: 1
      },
      functionBody: true,
      onChange,
      disabled: !enabled || loading
    }
  )));
}

// src/components/Devtools.tsx
import * as React63 from "react";
import { TabPanel as TabPanel3, TabContext as TabContext4, TabList as TabList3 } from "@mui/lab";
import { Box as Box15, IconButton as IconButton10, LinearProgress, styled as styled28, Tab as Tab3 } from "@mui/material";
import DoDisturbIcon from "@mui/icons-material/DoDisturb";

// src/components/Console.tsx
import { darken as darken2, lighten, styled as styled26 } from "@mui/material";
import clsx4 from "clsx";
import * as React61 from "react";
import { interleave } from "@toolpad/utils/react";
var classes5 = {
  logEntriesContainer: "Toolpad_ConsoleLogEntriesContainer",
  logEntries: "Toolpad_ConsoleLogEntries",
  logEntry: "Toolpad_ConsoleLogEntry",
  logEntryText: "Toolpad_ConsoleLogEntryTExt"
};
var ConsoleRoot = styled26("div")(({ theme }) => {
  const getColor = (color) => {
    const modify = theme.palette.mode === "light" ? darken2 : lighten;
    return modify(color, 0.6);
  };
  const getBackgroundColor = (color) => {
    const modify = theme.palette.mode === "light" ? lighten : darken2;
    return modify(color, 0.9);
  };
  return {
    width: "100%",
    height: "100%",
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch",
    [`& .${classes5.logEntriesContainer}`]: {
      flex: 1,
      // This container has only a single item, but the column-reverse has the effect that it
      // keeps the scroll position at the bottom when the content grows
      display: "flex",
      flexDirection: "column-reverse",
      overflow: "auto",
      fontSize: 12,
      lineHeight: 1.2,
      fontFamily: 'Consolas, Menlo, Monaco, "Andale Mono", "Ubuntu Mono", monospace'
    },
    [`& .${classes5.logEntry}`]: {
      "&:first-of-type": {
        borderTop: `1px solid ${theme.palette.divider}`
      },
      borderBottom: `1px solid ${theme.palette.divider}`,
      paddingLeft: theme.spacing(1),
      paddingRight: theme.spacing(1),
      paddingTop: 3,
      paddingBottom: 1
    },
    [`& .${classes5.logEntry}.error`]: {
      color: getColor(theme.palette.error.light),
      background: getBackgroundColor(theme.palette.error.light)
    },
    [`& .${classes5.logEntry}.warn`]: {
      color: getColor(theme.palette.warning.light),
      background: getBackgroundColor(theme.palette.warning.light)
    },
    [`& .${classes5.logEntry}.info`]: {
      color: getColor(theme.palette.info.light),
      background: getBackgroundColor(theme.palette.info.light)
    },
    [`& .${classes5.logEntryText} > *`]: {
      display: "inline-block",
      verticalAlign: "top"
    }
  };
});
function ConsoleEntry({ entry }) {
  return /* @__PURE__ */ React61.createElement("div", { className: clsx4(classes5.logEntry, entry.level) }, /* @__PURE__ */ React61.createElement("div", { className: classes5.logEntryText }, interleave(
    entry.args.map(
      (arg, i) => typeof arg === "string" ? arg : /* @__PURE__ */ React61.createElement(ObjectInspector_default, { key: i, data: arg })
    ),
    " "
  )));
}
function Console({ value = [], sx }) {
  return /* @__PURE__ */ React61.createElement(ConsoleRoot, { sx }, /* @__PURE__ */ React61.createElement("div", { className: classes5.logEntriesContainer }, /* @__PURE__ */ React61.createElement("div", { className: classes5.logEntries }, value.map((entry, i) => /* @__PURE__ */ React61.createElement(ConsoleEntry, { key: i, entry })))));
}

// src/components/CenteredSpinner.tsx
import { CircularProgress as CircularProgress2, styled as styled27 } from "@mui/material";
import * as React62 from "react";
var Root = styled27("div")({
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
});
function CenteredSpinner({ sx }) {
  return /* @__PURE__ */ React62.createElement(Root, { sx }, /* @__PURE__ */ React62.createElement(CircularProgress2, null));
}

// src/components/Devtools.tsx
var DevtoolsRoot = styled28("div")({
  flexDirection: "column"
});
var HarViewer = lazyComponent(() => import("./HarViewer-JW34WI6T.mjs"), {
  fallback: /* @__PURE__ */ React63.createElement(CenteredSpinner, null)
});
var DebuggerTabPanel = styled28(TabPanel3)({ padding: 0, flex: 1, minHeight: 0 });
function Devtools({ sx, log, onLogClear, har, onHarClear }) {
  const [activeTab, setActiveTab] = React63.useState(() => {
    if (log) {
      return "console";
    }
    if (har) {
      return "network";
    }
    return "";
  });
  const handleDebuggerTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };
  const logLength = log?.length ?? 0;
  const harLength = har?.log.entries.length ?? 0;
  const clearEnabled = React63.useMemo(() => {
    switch (activeTab) {
      case "console":
        return logLength > 0;
      case "network":
        return harLength > 0;
      default:
        throw new Error(`Missing switch case ${activeTab}`);
    }
  }, [activeTab, harLength, logLength]);
  const handleClearClick = React63.useCallback(() => {
    switch (activeTab) {
      case "console":
        return onLogClear?.();
      case "network":
        return onHarClear?.();
      default:
        throw new Error(`Missing switch case ${activeTab}`);
    }
  }, [activeTab, onHarClear, onLogClear]);
  return /* @__PURE__ */ React63.createElement(DevtoolsRoot, { sx }, /* @__PURE__ */ React63.createElement(TabContext4, { value: activeTab }, /* @__PURE__ */ React63.createElement(
    Box15,
    {
      sx: {
        borderBottom: 1,
        borderColor: "divider",
        display: "flex",
        flexDirection: "row",
        justifyContent: "start",
        pr: 1
      }
    },
    handleClearClick ? /* @__PURE__ */ React63.createElement(IconButton10, { disabled: !clearEnabled, onClick: handleClearClick }, /* @__PURE__ */ React63.createElement(DoDisturbIcon, null)) : null,
    /* @__PURE__ */ React63.createElement(
      TabList3,
      {
        onChange: handleDebuggerTabChange,
        "aria-label": "Debugger",
        sx: { "& button": { fontSize: 12, fontWeight: "normal" } }
      },
      log ? /* @__PURE__ */ React63.createElement(
        Tab3,
        {
          label: "Console",
          value: "console",
          sx: { borderBottom: (theme) => `1px solid ${theme.palette.grey[300]}` }
        }
      ) : null,
      har ? /* @__PURE__ */ React63.createElement(
        Tab3,
        {
          label: "Network",
          value: "network",
          sx: { borderBottom: (theme) => `1px solid ${theme.palette.grey[300]}` }
        }
      ) : null
    )
  ), log ? /* @__PURE__ */ React63.createElement(DebuggerTabPanel, { value: "console" }, /* @__PURE__ */ React63.createElement(Console, { sx: { flex: 1 }, value: log })) : null, har ? /* @__PURE__ */ React63.createElement(DebuggerTabPanel, { value: "network" }, /* @__PURE__ */ React63.createElement(React63.Suspense, { fallback: /* @__PURE__ */ React63.createElement(LinearProgress, null) }, /* @__PURE__ */ React63.createElement(HarViewer, { sx: { flex: 1 }, value: har }))) : null));
}

// src/toolpadDataSources/useFetchPrivate.ts
import * as React64 from "react";

// src/toolpadDataSources/context.tsx
import { createProvidedContext as createProvidedContext4 } from "@toolpad/utils/react";
var [useConnectionContext, ConnectionContextProvider] = createProvidedContext4("QueryEditor");
function usePrivateQuery(query, options2) {
  const projectApi = useProjectApi();
  const { dataSourceId, connectionId } = useConnectionContext();
  return projectApi.useQuery(
    "dataSourceFetchPrivate",
    query == null ? null : [dataSourceId, connectionId, query],
    options2
  );
}

// src/toolpadDataSources/useFetchPrivate.ts
function useFetchPrivate() {
  const projectApi = useProjectApi();
  const { dataSourceId, connectionId } = useConnectionContext();
  return React64.useCallback(
    (privateQuery) => projectApi.methods.dataSourceFetchPrivate(dataSourceId, connectionId, privateQuery),
    [projectApi, connectionId, dataSourceId]
  );
}

// src/toolpadDataSources/QueryPreview.tsx
import { LinearProgress as LinearProgress2, Box as Box17 } from "@mui/material";
import * as React66 from "react";

// src/toolpad/AppEditor/PageEditor/ErrorAlert.tsx
import * as React65 from "react";
import { Alert as Alert4, AlertTitle, IconButton as IconButton11, Collapse as Collapse2, Box as Box16, styled as styled30 } from "@mui/material";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { indent } from "@toolpad/utils/strings";

// src/components/Pre.tsx
import { styled as styled29 } from "@mui/material";
var Pre = styled29("pre")({
  margin: 0,
  fontFamily: 'Consolas, Menlo, Monaco, "Andale Mono", "Ubuntu Mono", monospace'
});
var Pre_default = Pre;

// src/toolpad/AppEditor/PageEditor/ErrorAlert.tsx
var AlertRoot2 = styled30(Alert4)({
  position: "relative"
});
function formatStack(maybeError) {
  if (!maybeError) {
    return null;
  }
  let causeStack;
  if (maybeError?.cause) {
    causeStack = formatStack(maybeError.cause);
    if (causeStack) {
      causeStack = `cause:
${indent(causeStack, 2)}`;
    }
  }
  let thisStack;
  if (typeof maybeError?.stack === "string") {
    thisStack = maybeError.stack;
  }
  return thisStack || causeStack ? [thisStack, causeStack].filter(Boolean).join("\n") : null;
}
function ErrorAlert({ error, sx }) {
  const message = typeof error?.message === "string" ? error.message : String(error);
  const stack = formatStack(error);
  const [expanded, setExpanded] = React65.useState(false);
  const toggleExpanded = React65.useCallback(() => setExpanded((actual) => !actual), []);
  return /* @__PURE__ */ React65.createElement(AlertRoot2, { severity: "error", sx }, stack ? /* @__PURE__ */ React65.createElement(
    IconButton11,
    {
      color: "inherit",
      onClick: toggleExpanded,
      sx: {
        position: "absolute",
        top: 10,
        right: 8
      }
    },
    expanded ? /* @__PURE__ */ React65.createElement(ExpandLessIcon, null) : /* @__PURE__ */ React65.createElement(ExpandMoreIcon, null)
  ) : null, /* @__PURE__ */ React65.createElement(AlertTitle, null, /* @__PURE__ */ React65.createElement(Pre_default, { sx: { whiteSpace: "pre-wrap" } }, message)), stack ? /* @__PURE__ */ React65.createElement(Collapse2, { in: expanded }, /* @__PURE__ */ React65.createElement(Box16, { sx: { overflow: "auto" } }, /* @__PURE__ */ React65.createElement(Pre_default, null, stack))) : null);
}

// src/toolpadDataSources/QueryPreview.tsx
function QueryPreview({ children, error, isLoading }) {
  return /* @__PURE__ */ React66.createElement(
    Box17,
    {
      "data-testid": "query-preview",
      sx: { height: "100%", display: "flex", flexDirection: "column" }
    },
    isLoading ? /* @__PURE__ */ React66.createElement(LinearProgress2, null) : null,
    /* @__PURE__ */ React66.createElement(Box17, { sx: { flex: 1, minHeight: 0, overflow: "auto" } }, error ? /* @__PURE__ */ React66.createElement(ErrorAlert, { sx: { m: 2 }, error }) : children)
  );
}

// src/toolpadDataSources/rest/client.tsx
var HTTP_METHODS = ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"];
var QUERY_SCOPE_META = {
  parameters: {
    description: "Parameters that can be bound to app scope variables"
  }
};
var ButtonLink = styled31("button")(({ theme }) => ({
  background: "none",
  border: "none",
  fontSize: "inherit",
  padding: 0,
  color: theme.palette.primary.main,
  textDecoration: "underline"
}));
function UrlControl({ label, disabled, baseUrl, value, onChange }) {
  const handleChange = React67.useCallback(
    (event) => {
      onChange(event.target.value);
    },
    [onChange]
  );
  return /* @__PURE__ */ React67.createElement(
    TextField15,
    {
      fullWidth: true,
      value: value ?? "",
      disabled,
      onChange: handleChange,
      label,
      slotProps: {
        input: baseUrl ? {
          startAdornment: /* @__PURE__ */ React67.createElement(InputAdornment3, { position: "start" }, baseUrl)
        } : void 0
      }
    }
  );
}
function withDefaults(value) {
  return {
    baseUrl: "",
    headers: [],
    authentication: null,
    ...value
  };
}
function ConnectionParamsInput({ value, onChange }) {
  const { handleSubmit, register, formState, reset, control, watch } = useForm({
    defaultValues: withDefaults(value),
    reValidateMode: "onChange",
    mode: "all"
  });
  React67.useEffect(() => reset(withDefaults(value)), [reset, value]);
  const doSubmit = handleSubmit(
    (connectionParams) => onChange({
      ...connectionParams,
      baseUrl: connectionParams.baseUrl && parseBaseUrl(connectionParams.baseUrl).href
    })
  );
  const baseUrlValue = watch("baseUrl");
  const headersValue = watch("headers");
  const authenticationValue = watch("authentication");
  const authenticationHeaders = getAuthenticationHeaders(authenticationValue);
  const mustHaveBaseUrl = headersValue && headersValue.length > 0 || !!authenticationValue;
  const headersAllowed = !!baseUrlValue;
  const baseUrlInputProps = {
    label: "base url",
    ...register("baseUrl", {
      validate(input) {
        if (!input) {
          if (mustHaveBaseUrl) {
            return "A base url is required when headers are used";
          }
          return true;
        }
        try {
          return !!parseBaseUrl(input);
        } catch (error) {
          return "Must be an absolute url";
        }
      }
    }),
    ...validation(formState, "baseUrl")
  };
  return /* @__PURE__ */ React67.createElement(Stack9, { direction: "column", gap: 3, sx: { py: 3 } }, /* @__PURE__ */ React67.createElement(TextField15, { ...baseUrlInputProps }), /* @__PURE__ */ React67.createElement(Typography12, null, "Headers:"), /* @__PURE__ */ React67.createElement(
    Controller,
    {
      name: "headers",
      control,
      render: ({ field: { value: fieldValue = [], onChange: onFieldChange, ref, ...field } }) => {
        const allHeaders = [...authenticationHeaders, ...fieldValue];
        return /* @__PURE__ */ React67.createElement(
          MapEntriesEditor,
          {
            ...field,
            disabled: !headersAllowed,
            fieldLabel: "header",
            value: allHeaders,
            onChange: (headers) => onFieldChange(headers.slice(authenticationHeaders.length)),
            isEntryDisabled: (entry, index) => index < authenticationHeaders.length
          }
        );
      }
    }
  ), /* @__PURE__ */ React67.createElement(Typography12, null, "Authentication:"), /* @__PURE__ */ React67.createElement(
    Controller,
    {
      name: "authentication",
      control,
      render: ({ field: { value: fieldValue, ref, ...field } }) => /* @__PURE__ */ React67.createElement(AuthenticationEditor, { ...field, disabled: !headersAllowed, value: fieldValue ?? null })
    }
  ), /* @__PURE__ */ React67.createElement(Toolbar3, { disableGutters: true }, /* @__PURE__ */ React67.createElement(Box18, { sx: { flex: 1 } }), /* @__PURE__ */ React67.createElement(Button8, { variant: "contained", onClick: doSubmit, disabled: isSaveDisabled(formState) }, "Save")));
}
function ResolvedPreview({
  preview,
  onShowTransform
}) {
  if (!preview) {
    return /* @__PURE__ */ React67.createElement(
      Alert5,
      {
        severity: "info",
        sx: (theme) => ({
          my: theme.spacing(2),
          mx: "auto",
          p: theme.spacing(1),
          fontSize: theme.typography.pxToRem(11),
          width: "fit-content"
        })
      },
      "No request has been sent yet. ",
      /* @__PURE__ */ React67.createElement("br", null),
      "Click Run",
      /* @__PURE__ */ React67.createElement(
        PlayArrowIcon,
        {
          "aria-label": "Run preview",
          sx: { verticalAlign: "middle", fontSize: "12px", mr: 0.25 }
        }
      ),
      "to preview the response here."
    );
  }
  const { data, untransformedData } = preview;
  let alert = null;
  const responseDataKeys = Object.keys(untransformedData);
  if (typeof data === "undefined" && typeof untransformedData !== "undefined") {
    alert = /* @__PURE__ */ React67.createElement(Alert5, { severity: "warning", sx: { m: 1, p: 1, fontSize: 11 } }, /* @__PURE__ */ React67.createElement(Box18, { sx: { mb: 1 } }, "Request successfully completed and returned data", responseDataKeys.length > 0 ? " with the following keys:" : "."), responseDataKeys.map((key) => /* @__PURE__ */ React67.createElement(Box18, { sx: { display: "block" }, key }, "- ", key)), /* @__PURE__ */ React67.createElement(Box18, { sx: { mt: 1 } }, "However, it seems that the ", /* @__PURE__ */ React67.createElement(ButtonLink, { onClick: onShowTransform }, "transform"), " ", "function returned an ", /* @__PURE__ */ React67.createElement("code", null, "undefined"), " value."));
  }
  return /* @__PURE__ */ React67.createElement(React67.Fragment, null, alert, /* @__PURE__ */ React67.createElement(JsonView, { sx: { height: "100%" }, src: preview?.data }));
}
var EMPTY_PARAMS = [];
function QueryEditor({
  globalScope,
  globalScopeMeta,
  connectionParams: rawConnectionParams,
  value: input,
  settingsTab
}) {
  const appStateApi = useAppStateApi();
  const { currentView } = useAppState();
  const isBrowserSide = input.attributes.query.browser;
  const connectionParams = isBrowserSide ? null : rawConnectionParams;
  const baseUrl = isBrowserSide ? null : connectionParams?.baseUrl ?? null;
  const urlValue = input.attributes.query.url ?? "";
  const introspection = usePrivateQuery(
    {
      kind: "introspection"
    },
    { retry: false }
  );
  const updateProp = React67.useCallback(
    function updateProp2(prop, value) {
      appStateApi.updateQueryDraft((draft) => ({
        ...draft,
        attributes: {
          ...draft.attributes,
          query: {
            ...draft.attributes.query,
            [prop]: value
          }
        }
      }));
    },
    [appStateApi]
  );
  const env = React67.useMemo(() => introspection?.data?.env ?? {}, [introspection?.data?.env]);
  const declaredEnvKeys = React67.useMemo(
    () => introspection?.data?.declaredEnvKeys ?? [],
    [introspection?.data?.declaredEnvKeys]
  );
  const handleParamsChange = React67.useCallback(
    (newParams) => {
      appStateApi.updateQueryDraft((draft) => ({
        ...draft,
        params: newParams
      }));
    },
    [appStateApi]
  );
  const handleUrlChange = React67.useCallback(
    (newUrl) => {
      updateProp("url", newUrl ?? "");
    },
    [updateProp]
  );
  const handleMethodChange = React67.useCallback(
    (event) => {
      updateProp("method", event.target.value);
    },
    [updateProp]
  );
  const handleTransformEnabledChange = React67.useCallback(
    (transformEnabled) => {
      updateProp("transformEnabled", transformEnabled);
    },
    [updateProp]
  );
  const handleTransformChange = React67.useCallback(
    (transform) => {
      updateProp("transform", transform);
    },
    [updateProp]
  );
  const handleBodyChange = React67.useCallback(
    (newBody) => {
      updateProp("body", newBody || void 0);
    },
    [updateProp]
  );
  const handleSearchParamsChange = React67.useCallback(
    (newSearchParams) => {
      updateProp("searchParams", newSearchParams);
    },
    [updateProp]
  );
  const handleHeadersChange = React67.useCallback(
    (newHeaders) => {
      updateProp("headers", newHeaders);
    },
    [updateProp]
  );
  const handleResponseTypeChange = React67.useCallback(
    (event) => {
      updateProp("response", {
        kind: event.target.value
      });
    },
    [updateProp]
  );
  const paramsEntries = input.params || EMPTY_PARAMS;
  const jsServerRuntime = React67.useMemo(() => createServerJsRuntime(env ?? {}), [env]);
  const paramsEditorLiveValue = useEvaluateLiveBindingEntries({
    jsRuntime: jsServerRuntime,
    input: paramsEntries,
    globalScope
  });
  const previewParams = React67.useMemo(
    () => Object.fromEntries(paramsEditorLiveValue.map(([key, binding]) => [key, binding?.value])),
    [paramsEditorLiveValue]
  );
  const queryScope = React67.useMemo(
    () => ({
      parameters: previewParams
    }),
    [previewParams]
  );
  const liveUrl = useEvaluateLiveBinding({
    jsRuntime: jsServerRuntime,
    input: urlValue,
    globalScope: queryScope
  });
  const liveSearchParams = useEvaluateLiveBindingEntries({
    jsRuntime: jsServerRuntime,
    input: input.attributes.query.searchParams || [],
    globalScope: queryScope
  });
  const liveHeaders = useEvaluateLiveBindingEntries({
    jsRuntime: jsServerRuntime,
    input: input.attributes.query.headers || [],
    globalScope: queryScope
  });
  const [configTab, setConfigTab] = React67.useState("urlQuery");
  const currentTab = React67.useMemo(() => {
    if (currentView.kind === "page" && currentView.view?.kind === "query" && currentView.queryPanel?.currentTabIndex !== void 0) {
      return currentView.queryPanel?.queryTabs?.[currentView.queryPanel?.currentTabIndex];
    }
    return null;
  }, [currentView]);
  const handleToolsTabTypeChange = React67.useCallback(
    (value) => {
      appStateApi.updateQueryTab((tab) => ({
        ...tab,
        toolsTabType: value
      }));
    },
    [appStateApi]
  );
  const fetchPrivate = useFetchPrivate();
  const fetchPreview = React67.useCallback(
    (query, params) => fetchPrivate({ kind: "debugExec", query, params }),
    [fetchPrivate]
  );
  const [previewHar, setPreviewHar] = React67.useState(() => createHarLog());
  const { preview, runPreview, isLoading } = useQueryPreview(
    fetchPreview,
    input.attributes.query,
    previewParams,
    {
      onPreview: React67.useCallback((result) => {
        setPreviewHar(
          (existing) => result.har ? mergeHar(createHarLog(), existing, result.har) : existing
        );
      }, [])
    }
  );
  const handleHarClear = React67.useCallback(() => setPreviewHar(createHarLog()), []);
  const handleConfigTabChange = React67.useCallback(
    (event, newValue) => setConfigTab(newValue),
    []
  );
  const handleTabTypeChange = React67.useCallback(
    (event, value) => {
      appStateApi.updateQueryTab((tab) => ({
        ...tab,
        tabType: value
      }));
    },
    [appStateApi]
  );
  return currentTab ? /* @__PURE__ */ React67.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad/rest-panel", direction: "horizontal" }, /* @__PURE__ */ React67.createElement(resizablePanels_exports.Panel, { id: "rest-query-left", defaultSize: 50, minSize: 40, style: { overflow: "auto" } }, /* @__PURE__ */ React67.createElement(TabContext5, { value: currentTab?.tabType ?? "config" }, /* @__PURE__ */ React67.createElement(Stack9, { direction: "column", gap: 0 }, /* @__PURE__ */ React67.createElement(
    Stack9,
    {
      direction: "row",
      sx: {
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        pr: 0.5
      }
    },
    /* @__PURE__ */ React67.createElement(
      TabList4,
      {
        sx: { "& button": { fontSize: 12, fontWeight: "normal" } },
        onChange: handleTabTypeChange,
        "aria-label": "Query editor active tab type"
      },
      /* @__PURE__ */ React67.createElement(Tab4, { label: "Config", value: "config" }),
      /* @__PURE__ */ React67.createElement(Tab4, { label: "Settings", value: "settings" })
    ),
    /* @__PURE__ */ React67.createElement(
      HelpTooltipIcon,
      {
        helpText: /* @__PURE__ */ React67.createElement(Typography12, { variant: "inherit" }, "To configure a HTTP request, check out the", " ", /* @__PURE__ */ React67.createElement(
          Link7,
          {
            href: "https://mui.com/toolpad/studio/concepts/http-requests/",
            target: "_blank",
            rel: "noopener"
          },
          "docs"
        ), ".")
      }
    )
  ), /* @__PURE__ */ React67.createElement(Divider6, null), /* @__PURE__ */ React67.createElement(TabPanel_default, { value: "config", disableGutters: true }, /* @__PURE__ */ React67.createElement(React67.Fragment, null, /* @__PURE__ */ React67.createElement(
    Box18,
    {
      sx: {
        display: "grid",
        gridTemplateColumns: "auto 1fr 0.1fr",
        gap: 1,
        my: 1.5,
        ml: 1
      }
    },
    /* @__PURE__ */ React67.createElement(
      TextField15,
      {
        select: true,
        value: input.attributes.query.method || "GET",
        size: "small",
        sx: {
          "& .MuiSelect-select": {
            height: (theme) => theme.typography.pxToRem(20)
          }
        },
        onChange: handleMethodChange,
        slotProps: {
          htmlInput: { sx: { fontSize: 12 } }
        }
      },
      HTTP_METHODS.map((method) => /* @__PURE__ */ React67.createElement(MenuItem5, { key: method, value: method }, method))
    ),
    /* @__PURE__ */ React67.createElement(
      BindableEditor,
      {
        liveBinding: liveUrl,
        globalScope: queryScope,
        globalScopeMeta: QUERY_SCOPE_META,
        sx: { flex: 1 },
        jsRuntime: jsServerRuntime,
        label: "url",
        propType: { type: "string" },
        renderControl: (props) => /* @__PURE__ */ React67.createElement(UrlControl, { baseUrl, ...props }),
        value: urlValue,
        onChange: handleUrlChange
      }
    )
  ), /* @__PURE__ */ React67.createElement(Box18, { sx: { display: "flex", flexDirection: "column", gap: 1, mt: 2.5, mx: 0 } }, /* @__PURE__ */ React67.createElement(TabContext5, { value: configTab }, /* @__PURE__ */ React67.createElement(Box18, { sx: { border: 1, borderColor: "divider" } }, /* @__PURE__ */ React67.createElement(
    TabList4,
    {
      sx: { "& button": { fontSize: 12, fontWeight: "normal" } },
      onChange: handleConfigTabChange,
      "aria-label": "Fetch options active tab"
    },
    /* @__PURE__ */ React67.createElement(Tab4, { label: "URL query", value: "urlQuery" }),
    /* @__PURE__ */ React67.createElement(Tab4, { label: "Body", value: "body" }),
    /* @__PURE__ */ React67.createElement(Tab4, { label: "Headers", value: "headers" }),
    /* @__PURE__ */ React67.createElement(Tab4, { label: "Response", value: "response" }),
    /* @__PURE__ */ React67.createElement(Tab4, { label: "Transform", value: "transform" })
  )), /* @__PURE__ */ React67.createElement(TabPanel_default, { disableGutters: true, value: "urlQuery", sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    ParametersEditor,
    {
      value: input.attributes.query.searchParams ?? [],
      onChange: handleSearchParamsChange,
      globalScope: queryScope,
      globalScopeMeta: QUERY_SCOPE_META,
      liveValue: liveSearchParams,
      jsRuntime: jsServerRuntime
    }
  )), /* @__PURE__ */ React67.createElement(TabPanel_default, { disableGutters: true, value: "body", sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    BodyEditor,
    {
      value: input.attributes.query.body,
      onChange: handleBodyChange,
      globalScope: queryScope,
      globalScopeMeta: QUERY_SCOPE_META,
      method: input.attributes.query.method || "GET"
    }
  )), /* @__PURE__ */ React67.createElement(TabPanel_default, { disableGutters: true, value: "headers", sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    ParametersEditor,
    {
      value: input.attributes.query.headers ?? [],
      onChange: handleHeadersChange,
      globalScope: queryScope,
      globalScopeMeta: QUERY_SCOPE_META,
      liveValue: liveHeaders,
      jsRuntime: jsServerRuntime,
      env
    }
  )), /* @__PURE__ */ React67.createElement(TabPanel_default, { disableGutters: true, value: "response", sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    TextField15,
    {
      select: true,
      label: "response type",
      sx: {
        [`& .${inputLabelClasses3.root}`]: { fontSize: 12 },
        [`& .${inputBaseClasses3.root}`]: { fontSize: 12 },
        width: 200
      },
      value: input.attributes.query.response?.kind || "json",
      onChange: handleResponseTypeChange
    },
    /* @__PURE__ */ React67.createElement(MenuItem5, { value: "raw" }, "raw"),
    /* @__PURE__ */ React67.createElement(MenuItem5, { value: "json" }, "JSON"),
    /* @__PURE__ */ React67.createElement(MenuItem5, { value: "csv", disabled: true }, "\u{1F6A7} CSV"),
    /* @__PURE__ */ React67.createElement(MenuItem5, { value: "xml", disabled: true }, "\u{1F6A7} XML")
  )), /* @__PURE__ */ React67.createElement(TabPanel_default, { disableGutters: true, value: "transform", sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    TransformInput,
    {
      value: input.attributes.query.transform ?? "return data;",
      onChange: handleTransformChange,
      enabled: input.attributes.query.transformEnabled ?? false,
      onEnabledChange: handleTransformEnabledChange,
      globalScope: { data: preview?.untransformedData },
      loading: false
    }
  )))))), /* @__PURE__ */ React67.createElement(TabPanel_default, { value: "settings", disableGutters: true }, settingsTab)))), /* @__PURE__ */ React67.createElement(PanelResizeHandle, null), /* @__PURE__ */ React67.createElement(resizablePanels_exports.Panel, { id: "rest-query-right", defaultSize: 50, minSize: 20 }, /* @__PURE__ */ React67.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad/rest/params-tools-split", direction: "vertical" }, /* @__PURE__ */ React67.createElement(resizablePanels_exports.Panel, { defaultSize: 50, style: { overflow: "auto", scrollbarGutter: "stable" } }, /* @__PURE__ */ React67.createElement(Box18, { display: "flex", flexDirection: "column" }, /* @__PURE__ */ React67.createElement(TabContext5, { value: "parameters" }, /* @__PURE__ */ React67.createElement(
    TabList4,
    {
      sx: {
        "& button": { fontSize: 12, fontWeight: "normal", cursor: "default" }
      },
      "aria-label": "Query editor parameters"
    },
    /* @__PURE__ */ React67.createElement(Tab4, { label: "Parameters", value: "parameters" })
  ), /* @__PURE__ */ React67.createElement(Divider6, { sx: { mb: 1.5 } }), /* @__PURE__ */ React67.createElement(TabPanel_default, { value: "parameters", disableGutters: true, sx: { ml: 1 } }, /* @__PURE__ */ React67.createElement(
    ParametersEditor,
    {
      value: paramsEntries,
      onChange: handleParamsChange,
      globalScope,
      globalScopeMeta,
      liveValue: paramsEditorLiveValue,
      jsRuntime: jsServerRuntime,
      env,
      declaredEnvKeys
    }
  ))))), /* @__PURE__ */ React67.createElement(PanelResizeHandle, null), /* @__PURE__ */ React67.createElement(resizablePanels_exports.Panel, { defaultSize: 50, style: { overflow: "auto", scrollbarGutter: "stable" } }, /* @__PURE__ */ React67.createElement(TabContext5, { value: currentTab.toolsTabType }, /* @__PURE__ */ React67.createElement(
    Box18,
    {
      sx: {
        borderBottom: 1,
        borderColor: "divider",
        display: "flex",
        justifyContent: "space-between",
        height: 34
      }
    },
    /* @__PURE__ */ React67.createElement(
      TabList4,
      {
        sx: { "& button": { fontSize: 12, fontWeight: "normal" } },
        onChange: (event, value) => handleToolsTabTypeChange(value),
        "aria-label": "Query tools active tab"
      },
      /* @__PURE__ */ React67.createElement(Tab4, { label: "Preview", value: "preview" }),
      /* @__PURE__ */ React67.createElement(Tab4, { label: "Dev Tools", value: "devTools" })
    ),
    /* @__PURE__ */ React67.createElement(
      LoadingButton2,
      {
        variant: "text",
        size: "small",
        loading: isLoading,
        disabled: isLoading,
        onClick: runPreview,
        endIcon: /* @__PURE__ */ React67.createElement(PlayArrowIcon, { "aria-label": "Run preview", onClick: runPreview })
      },
      "Run"
    )
  ), /* @__PURE__ */ React67.createElement(TabPanel_default, { value: "preview", disableGutters: true }, /* @__PURE__ */ React67.createElement(QueryPreview, { isLoading: currentTab.isPreviewLoading, error: preview?.error }, /* @__PURE__ */ React67.createElement(
    ResolvedPreview,
    {
      preview,
      onShowTransform: () => setConfigTab("transform")
    }
  ))), /* @__PURE__ */ React67.createElement(TabPanel_default, { value: "devTools", disableGutters: true }, /* @__PURE__ */ React67.createElement(Devtools, { sx: { overflow: "auto" }, har: previewHar, onHarClear: handleHarClear }))))))) : /* @__PURE__ */ React67.createElement(Alert5, { severity: "error" }, "An error occurred while rendering this tab. Please refresh and try again.");
}
function getInitialQueryValue() {
  return {
    method: "GET",
    url: "https://raw.githubusercontent.com/mui/toolpad/master/public/movies.json",
    headers: [],
    browser: false
  };
}
var dataSource = {
  displayName: "REST API",
  ConnectionParamsInput,
  QueryEditor,
  getInitialQueryValue,
  hasDefault: true
};
var client_default = dataSource;

// src/toolpadDataSources/local/client.tsx
import * as React69 from "react";
import LoadingButton3 from "@mui/lab/LoadingButton";
import { Alert as Alert6, Box as Box20, Divider as Divider7, Stack as Stack11, Tab as Tab5, Link as Link8, Typography as Typography13 } from "@mui/material";
import PlayArrowIcon2 from "@mui/icons-material/PlayArrow";
import { TabContext as TabContext6, TabList as TabList5 } from "@mui/lab";
import { useBrowserJsRuntime as useBrowserJsRuntime2 } from "@toolpad/studio-runtime/jsBrowserRuntime";
import { errorFrom as errorFrom3 } from "@toolpad/utils/errors";
import { useQuery } from "@tanstack/react-query";
import Grid3 from "@mui/material/Grid2";

// src/toolpadDataSources/local/FunctionSelector.tsx
import * as React68 from "react";
import {
  Autocomplete as Autocomplete3,
  autocompleteClasses,
  Box as Box19,
  Button as Button9,
  Chip as Chip2,
  InputBase,
  ListSubheader,
  Stack as Stack10,
  styled as styled32,
  alpha
} from "@mui/material";
import AddOutlinedIcon from "@mui/icons-material/AddOutlined";
import DataObjectOutlinedIcon from "@mui/icons-material/DataObjectOutlined";
import Popper from "@mui/material/Popper";
import ClickAwayListener from "@mui/material/ClickAwayListener";
import DoneIcon from "@mui/icons-material/Done";
var StyledAutocompletePopper = styled32("div")(({ theme }) => ({
  [`& .${autocompleteClasses.paper}`]: {
    boxShadow: "none",
    margin: 0,
    borderRadius: 0,
    color: "inherit",
    fontSize: 12
  },
  [`& .${autocompleteClasses.listbox}`]: {
    backgroundColor: theme.palette.mode === "light" ? theme.palette.background.paper : theme.palette.primaryDark[900],
    padding: 0,
    [`& .${autocompleteClasses.option}`]: {
      minHeight: "auto",
      alignItems: "flex-start",
      padding: 8,
      borderBottom: `1px solid  ${theme.palette.divider}`,
      [`&.${autocompleteClasses.focused}:not([aria-selected="true"])`]: {
        backgroundColor: theme.palette.action.hover
      }
    }
  },
  [`&.${autocompleteClasses.popperDisablePortal}`]: {
    position: "relative"
  }
}));
function PopperComponent(props) {
  const { disablePortal, anchorEl, open, ...other } = props;
  return /* @__PURE__ */ React68.createElement(StyledAutocompletePopper, { ...other });
}
var StyledPopper = styled32(Popper)(({ theme }) => ({
  border: `1px solid ${theme.palette.divider}`,
  boxShadow: `0 8px 24px ${theme.palette.mode === "light" ? alpha(theme.palette.grey[800], 0.5) : alpha(theme.palette.grey[700], 0.2)}`,
  borderRadius: 6,
  width: 300,
  zIndex: theme.zIndex.modal,
  fontSize: 12,
  color: theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.grey[500],
  backgroundColor: theme.palette.background.paper
}));
var StyledInput = styled32(InputBase)(({ theme }) => ({
  padding: 10,
  width: "100%",
  border: `1px solid ${theme.palette.divider}`,
  "& input": {
    borderRadius: 4,
    backgroundColor: theme.palette.background.paper,
    padding: 8,
    transition: theme.transitions.create(["border-color", "box-shadow"]),
    border: `1px solid ${theme.palette.divider}`,
    fontSize: 12,
    color: theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.grey[500],
    "&:focus": {
      boxShadow: `0px 0px 0px 3px ${theme.palette.mode === "light" ? theme.palette.primary[100] : theme.palette.primaryDark[600]}`,
      borderColor: theme.palette.mode === "light" ? theme.palette.primary.main : theme.palette.primaryDark.main
    }
  }
}));
var FunctionButton = styled32(Chip2)(({ theme }) => ({
  fontSize: 12,
  width: "100%",
  fontFamily: theme.typography.fontFamilyCode,
  marginTop: theme.spacing(1),
  fontWeight: "normal",
  color: theme.palette.primary.main,
  transition: theme.transitions.create("color", { duration: theme.transitions.duration.shorter }),
  "&:active": {
    boxShadow: "none"
  },
  "&:focus": {
    backgroundColor: theme.palette.mode === "light" ? theme.palette.primary[100] : theme.palette.primaryDark[600]
  },
  "& svg": {
    width: 12,
    height: 12
  }
}));
var StyledListSubheader = styled32(ListSubheader)(({ theme }) => ({
  lineHeight: 2.5,
  fontSize: 13,
  fontFamily: theme.typography.fontFamilyCode,
  backgroundColor: theme.palette.mode === "light" ? theme.palette.grey[200] : alpha(theme.palette.grey[900], 0.5),
  borderRadius: 0,
  borderBottom: `1px solid ${theme.palette.divider}`,
  color: theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[500]
}));
function FunctionSelector({
  files,
  selectedFunctionId,
  onCreateNew,
  onSelect
}) {
  const [anchorEl, setAnchorEl] = React68.useState(null);
  const [inputValue, setInputValue] = React68.useState("");
  const { selectedFileName, selectedFunctionName } = React68.useMemo(() => {
    const parsed = parseLegacyFunctionId(selectedFunctionId ?? "");
    return {
      selectedFileName: parsed.file,
      selectedFunctionName: parsed.handler
    };
  }, [selectedFunctionId]);
  const selectedFunctionLabel = React68.useMemo(() => {
    if (selectedFunctionName) {
      return `${selectedFileName} > ${selectedFunctionName}`;
    }
    return "Select function";
  }, [selectedFileName, selectedFunctionName]);
  const options2 = React68.useMemo(() => {
    const functions = [];
    files.forEach((file) => {
      file.handlers.forEach((fn) => {
        functions.push(serializeFunctionId({ file: file.name, handler: fn.name }));
      });
    });
    return functions;
  }, [files]);
  const handleClick = React68.useCallback((event) => {
    setAnchorEl(event.currentTarget);
  }, []);
  const handleClose = React68.useCallback(() => {
    setAnchorEl(null);
  }, []);
  const open = Boolean(anchorEl);
  const id = open ? "function-selector" : void 0;
  const handleCreateNew = React68.useCallback(async () => {
    const functionId = await onCreateNew();
    onSelect(functionId);
  }, [onCreateNew, onSelect]);
  const handleInput = React68.useCallback((event) => {
    setInputValue(event.target.value);
  }, []);
  return /* @__PURE__ */ React68.createElement(React68.Fragment, null, /* @__PURE__ */ React68.createElement(
    FunctionButton,
    {
      "aria-describedby": id,
      clickable: true,
      icon: /* @__PURE__ */ React68.createElement(DataObjectOutlinedIcon, { fontSize: "inherit", color: "inherit" }),
      onClick: handleClick,
      label: selectedFunctionLabel
    }
  ), /* @__PURE__ */ React68.createElement(
    StyledPopper,
    {
      id,
      open,
      anchorEl,
      placement: "auto-start",
      popperOptions: { modifiers: [{ name: "flip", enabled: false }] }
    },
    /* @__PURE__ */ React68.createElement(ClickAwayListener, { onClickAway: handleClose }, /* @__PURE__ */ React68.createElement("div", null, /* @__PURE__ */ React68.createElement(
      Box19,
      {
        sx: {
          px: 1,
          py: 0.5,
          fontWeight: "bold"
        }
      },
      "Search for functions"
    ), /* @__PURE__ */ React68.createElement(
      Autocomplete3,
      {
        open: true,
        onClose: (event, reason) => {
          if (reason === "escape") {
            handleClose();
          }
        },
        value: selectedFunctionId,
        inputValue,
        onInput: handleInput,
        onChange: (event, newValue, reason) => {
          if (event.type === "keydown" && event.key === "Backspace" && reason === "removeOption") {
            return;
          }
          if (newValue) {
            onSelect(newValue);
          }
          handleClose();
        },
        PopperComponent,
        renderTags: () => null,
        noOptionsText: "No functions",
        groupBy: (option) => parseLegacyFunctionId(option).file ?? "",
        renderGroup: (params) => [
          /* @__PURE__ */ React68.createElement(StyledListSubheader, { key: params.key }, /* @__PURE__ */ React68.createElement(Stack10, { direction: "row", justifyContent: "space-between" }, params.group, /* @__PURE__ */ React68.createElement(
            OpenCodeEditorButton,
            {
              filePath: params.group,
              fileType: "resource",
              iconButton: true,
              disableRipple: true,
              sx: {
                transition: (theme) => theme.transitions.create("color", { duration: 200 }),
                "&:hover": {
                  color: (theme) => theme.palette.mode === "light" ? theme.palette.grey[800] : theme.palette.grey[300]
                }
              }
            }
          ))),
          params.children
        ],
        renderOption: (props, option, { selected }) => /* @__PURE__ */ React68.createElement("li", { ...props }, /* @__PURE__ */ React68.createElement(
          Box19,
          {
            component: DoneIcon,
            sx: {
              width: 17,
              height: 17,
              ml: 1,
              mr: -1,
              mt: 0,
              opacity: 0.75,
              color: selected ? "primary.main" : "text.primary"
            },
            style: {
              visibility: selected ? "visible" : "hidden"
            }
          }
        ), /* @__PURE__ */ React68.createElement(
          Box19,
          {
            component: "span",
            sx: {
              width: 12,
              height: 12,
              flexShrink: 0,
              mr: 1,
              mt: 1
            }
          }
        ), /* @__PURE__ */ React68.createElement(
          Box19,
          {
            sx: {
              flexGrow: 1,
              color: selected ? "primary.main" : "text.primary",
              fontFamily: (theme) => theme.typography.fontFamilyCode
            }
          },
          parseLegacyFunctionId(option).handler ?? ""
        )),
        options: options2.sort((a, b) => {
          if (selectedFunctionId === a) {
            return -1;
          }
          if (selectedFunctionId === b) {
            return 1;
          }
          const fa = parseLegacyFunctionId(a).file;
          const fb = parseLegacyFunctionId(b).file;
          const sf = parseLegacyFunctionId(selectedFunctionId ?? "").file;
          if (sf === fa) {
            if (fa === fb) {
              return a.localeCompare(b);
            }
            return -1;
          }
          if (sf === fb) {
            return 1;
          }
          return fa?.localeCompare(fb ?? "") ?? 0;
        }),
        renderInput: (params) => /* @__PURE__ */ React68.createElement(
          StyledInput,
          {
            ref: params.InputProps.ref,
            inputProps: params.inputProps,
            placeholder: "Filter functions",
            autoFocus: true
          }
        )
      }
    ), /* @__PURE__ */ React68.createElement(
      Button9,
      {
        sx: { m: 1, mb: 0.5 },
        startIcon: /* @__PURE__ */ React68.createElement(AddOutlinedIcon, { fontSize: "inherit" }),
        onClick: handleCreateNew
      },
      "New file"
    )))
  ));
}

// src/toolpadDataSources/local/client.tsx
var EMPTY_PARAMS2 = [];
function ResolvedPreview2({ preview }) {
  if (!preview) {
    return /* @__PURE__ */ React69.createElement(
      Alert6,
      {
        severity: "info",
        sx: (theme) => ({
          my: theme.spacing(2),
          mx: "auto",
          p: theme.spacing(1),
          fontSize: theme.typography.pxToRem(11),
          width: "fit-content"
        })
      },
      "No request has been sent yet. ",
      /* @__PURE__ */ React69.createElement("br", null),
      "Click Run",
      /* @__PURE__ */ React69.createElement(
        PlayArrowIcon2,
        {
          "aria-label": "Run preview",
          sx: { verticalAlign: "middle", fontSize: "12px", mr: 0.25 }
        }
      ),
      "to preview the response here."
    );
  }
  const { data } = preview;
  return /* @__PURE__ */ React69.createElement(JsonView, { sx: { height: "100%" }, src: data, copyToClipboard: true });
}
function QueryEditor2({
  globalScope,
  globalScopeMeta,
  value: input,
  settingsTab,
  execApi
}) {
  const appStateApi = useAppStateApi();
  const { currentView } = useAppState();
  const introspection = useQuery({
    queryKey: ["introspection"],
    queryFn: () => execApi("introspection", []),
    retry: false
  });
  const updateProp = React69.useCallback(
    function updateProp2(prop, value) {
      appStateApi.updateQueryDraft((draft) => ({
        ...draft,
        attributes: {
          ...draft.attributes,
          query: {
            ...draft.attributes.query,
            [prop]: value
          }
        }
      }));
    },
    [appStateApi]
  );
  const currentTab = React69.useMemo(() => {
    if (currentView.kind === "page" && currentView.view?.kind === "query" && currentView.queryPanel?.currentTabIndex !== void 0) {
      return currentView.queryPanel?.queryTabs?.[currentView.queryPanel?.currentTabIndex];
    }
    return null;
  }, [currentView]);
  const propTypeControls = usePropControlsContext();
  const { file: selectedFile = void 0, handler: selectedFunction = void 0 } = input.attributes.query.function ? parseLegacyFunctionId(input.attributes.query.function) : {};
  const selectedOption = React69.useMemo(() => {
    return introspection.data?.files.find((file) => file.name === selectedFile)?.handlers.find((handler) => handler.name === selectedFunction);
  }, [introspection.data?.files, selectedFile, selectedFunction]);
  const parameterDefs = React69.useMemo(
    () => Object.fromEntries(selectedOption?.parameters || []),
    [selectedOption?.parameters]
  );
  const paramsEntries = React69.useMemo(
    () => input.params?.filter(([key]) => !!parameterDefs[key]) || EMPTY_PARAMS2,
    [input.params, parameterDefs]
  );
  const paramsObject = Object.fromEntries(paramsEntries);
  const jsBrowserRuntime = useBrowserJsRuntime2();
  const paramsEditorLiveValue = useEvaluateLiveBindingEntries({
    jsRuntime: jsBrowserRuntime,
    input: paramsEntries,
    globalScope
  });
  const previewParams = React69.useMemo(
    () => Object.fromEntries(paramsEditorLiveValue.map(([key, binding]) => [key, binding?.value])),
    [paramsEditorLiveValue]
  );
  const handleToolsTabTypeChange = React69.useCallback(
    (value) => {
      appStateApi.updateQueryTab((tab) => ({
        ...tab,
        toolsTabType: value
      }));
    },
    [appStateApi]
  );
  const fetchServerPreview = React69.useCallback(
    async (query, params) => {
      return execApi("debugExec", [query, params]);
    },
    [execApi]
  );
  const { preview, runPreview, isLoading } = useQueryPreview(
    fetchServerPreview,
    input.attributes.query,
    previewParams
  );
  const handleRunPreview = React69.useCallback(() => {
    runPreview();
  }, [runPreview]);
  React69.useEffect(() => {
    appStateApi.updateQueryTab((tab) => ({
      ...tab,
      previewHandler: handleRunPreview,
      isPreviewLoading: isLoading
    }));
  }, [handleRunPreview, appStateApi, isLoading]);
  const liveBindings = useEvaluateLiveBindings({
    jsRuntime: jsBrowserRuntime,
    input: paramsObject,
    globalScope
  });
  const handleSelectFunction = React69.useCallback(
    (functionId) => {
      updateProp("function", functionId);
    },
    [updateProp]
  );
  const proposedFileName = React69.useMemo(() => {
    const existingNames = new Set(introspection.data?.files.map((file) => file.name) || []);
    const baseName = "functions";
    let counter = 2;
    while (existingNames.has(`${baseName}${counter}.ts`)) {
      counter += 1;
    }
    return `${baseName}${counter}.ts`;
  }, [introspection.data?.files]);
  const handleCreateNewCommit = React69.useCallback(async () => {
    try {
      await execApi("createNew", [proposedFileName]);
      await introspection.refetch();
    } catch (error) {
      console.error(errorFrom3(error).message);
    }
    return serializeFunctionId({ file: proposedFileName, handler: "default" });
  }, [execApi, introspection, proposedFileName]);
  const handleTabTypeChange = React69.useCallback(
    (value) => {
      appStateApi.updateQueryTab((tab) => ({
        ...tab,
        tabType: value
      }));
    },
    [appStateApi]
  );
  return currentTab ? /* @__PURE__ */ React69.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad/local-panel", direction: "horizontal" }, /* @__PURE__ */ React69.createElement(
    resizablePanels_exports.Panel,
    {
      defaultSize: 50,
      minSize: 40,
      style: { overflow: "auto", scrollbarGutter: "stable" },
      id: "local-query-left"
    },
    /* @__PURE__ */ React69.createElement(TabContext6, { value: currentTab?.tabType ?? "config" }, /* @__PURE__ */ React69.createElement(Stack11, { direction: "column", gap: 0 }, /* @__PURE__ */ React69.createElement(
      Stack11,
      {
        direction: "row",
        sx: {
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          pr: 0.5
        }
      },
      /* @__PURE__ */ React69.createElement(
        TabList5,
        {
          sx: { "& button": { fontSize: 12, fontWeight: "normal" } },
          onChange: (event, value) => handleTabTypeChange(value),
          "aria-label": "Query editor active tab type"
        },
        /* @__PURE__ */ React69.createElement(Tab5, { label: "Config", value: "config" }),
        /* @__PURE__ */ React69.createElement(Tab5, { label: "Settings", value: "settings" })
      ),
      /* @__PURE__ */ React69.createElement(
        HelpTooltipIcon,
        {
          helpText: /* @__PURE__ */ React69.createElement(Typography13, { variant: "inherit" }, "To configure a custom function, check out the", " ", /* @__PURE__ */ React69.createElement(
            Link8,
            {
              href: "https://mui.com/toolpad/studio/concepts/custom-functions/",
              target: "_blank",
              rel: "noopener"
            },
            "docs"
          ), ".")
        }
      )
    ), /* @__PURE__ */ React69.createElement(Divider7, null), /* @__PURE__ */ React69.createElement(TabPanel_default, { value: "config", disableGutters: true }, /* @__PURE__ */ React69.createElement(
      Stack11,
      {
        display: "flex",
        flexDirection: "row",
        sx: {
          alignItems: "flex-start",
          mt: 2,
          mx: 2
        }
      },
      /* @__PURE__ */ React69.createElement(
        FunctionSelector,
        {
          files: introspection.data?.files || [],
          selectedFunctionId: transformLegacyFunctionId(
            input.attributes.query.function || ""
          ),
          onCreateNew: handleCreateNewCommit,
          onSelect: handleSelectFunction
        }
      ),
      /* @__PURE__ */ React69.createElement(
        OpenCodeEditorButton,
        {
          filePath: selectedFile ?? "",
          fileType: "resource",
          disableRipple: true,
          disabled: !selectedFile,
          sx: (theme) => ({
            marginTop: theme.spacing(1),
            marginLeft: theme.spacing(1),
            border: "1px solid",
            borderColor: theme.palette.divider
          })
        }
      ),
      introspection.error ? /* @__PURE__ */ React69.createElement(
        Box20,
        {
          sx: {
            position: "absolute",
            inset: "0 0 0 0",
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
          }
        },
        errorFrom3(introspection.error).message
      ) : null
    )), /* @__PURE__ */ React69.createElement(TabPanel_default, { value: "settings", disableGutters: true }, settingsTab)))
  ), /* @__PURE__ */ React69.createElement(PanelResizeHandle, null), /* @__PURE__ */ React69.createElement(resizablePanels_exports.Panel, { id: "local-query-right", defaultSize: 50, minSize: 20 }, /* @__PURE__ */ React69.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad/local/params-tools-split", direction: "vertical" }, /* @__PURE__ */ React69.createElement(
    resizablePanels_exports.Panel,
    {
      id: "parameters-editor",
      defaultSize: 50,
      style: { overflow: "auto", scrollbarGutter: "stable" }
    },
    /* @__PURE__ */ React69.createElement(Box20, { display: "flex", flexDirection: "column" }, /* @__PURE__ */ React69.createElement(TabContext6, { value: "parameters" }, /* @__PURE__ */ React69.createElement(
      TabList5,
      {
        sx: {
          "& button": { fontSize: 12, fontWeight: "normal", cursor: "default" }
        },
        "aria-label": "Query editor parameters"
      },
      /* @__PURE__ */ React69.createElement(Tab5, { label: "Parameters", value: "parameters" })
    ), /* @__PURE__ */ React69.createElement(Divider7, { sx: { mb: 1.5 } }), /* @__PURE__ */ React69.createElement(TabPanel_default, { value: "parameters", disableGutters: true, sx: { ml: 1 } }, /* @__PURE__ */ React69.createElement(Grid3, { container: true, spacing: 1 }, Object.entries(parameterDefs).map(([name, definiton]) => {
      const Control = getDefaultControl(propTypeControls, definiton, liveBindings);
      if (!Control) {
        return /* @__PURE__ */ React69.createElement(Grid3, { size: 4, key: name, sx: { display: "flex", alignItems: "center" } }, /* @__PURE__ */ React69.createElement(Typography13, null, "Can't configure ", name));
      }
      return /* @__PURE__ */ React69.createElement(Grid3, { size: 4, key: name }, /* @__PURE__ */ React69.createElement(
        BindableEditor,
        {
          liveBinding: liveBindings[name],
          globalScope,
          globalScopeMeta,
          label: name,
          propType: definiton,
          jsRuntime: jsBrowserRuntime,
          renderControl: (renderControlParams) => /* @__PURE__ */ React69.createElement(Control, { ...renderControlParams, propType: definiton }),
          value: paramsObject[name],
          onChange: (newValue) => {
            const paramKeys = Object.keys(parameterDefs);
            const newParams = paramKeys.flatMap((key) => {
              const paramValue = key === name ? newValue : paramsObject[key];
              return paramValue ? [[key, paramValue]] : [];
            });
            appStateApi.updateQueryDraft((draft) => ({
              ...draft,
              params: newParams
            }));
          }
        }
      ));
    })))))
  ), /* @__PURE__ */ React69.createElement(PanelResizeHandle, null), /* @__PURE__ */ React69.createElement(
    resizablePanels_exports.Panel,
    {
      id: "preview",
      defaultSize: 50,
      style: { overflow: "auto", scrollbarGutter: "stable" }
    },
    /* @__PURE__ */ React69.createElement(TabContext6, { value: currentTab.toolsTabType }, /* @__PURE__ */ React69.createElement(
      Box20,
      {
        sx: {
          borderBottom: 1,
          borderColor: "divider",
          display: "flex",
          height: 32,
          justifyContent: "space-between"
        }
      },
      /* @__PURE__ */ React69.createElement(
        TabList5,
        {
          sx: { "& button": { fontSize: 12, fontWeight: "normal" } },
          onChange: (event, value) => handleToolsTabTypeChange(value),
          "aria-label": "Query tools active tab"
        },
        /* @__PURE__ */ React69.createElement(Tab5, { label: "Preview", value: "preview" })
      ),
      /* @__PURE__ */ React69.createElement(
        LoadingButton3,
        {
          variant: "text",
          size: "small",
          loading: isLoading,
          disabled: isLoading,
          onClick: runPreview,
          endIcon: /* @__PURE__ */ React69.createElement(PlayArrowIcon2, { "aria-label": "Run preview", onClick: runPreview })
        },
        "Run"
      )
    ), /* @__PURE__ */ React69.createElement(TabPanel_default, { value: "preview", disableGutters: true }, /* @__PURE__ */ React69.createElement(QueryPreview, { isLoading: currentTab.isPreviewLoading, error: preview?.error }, /* @__PURE__ */ React69.createElement(ResolvedPreview2, { preview }))))
  )))) : /* @__PURE__ */ React69.createElement(Alert6, { severity: "error" }, "An error occurred while rendering this tab. Please refresh and try again.");
}
function getInitialQueryValue2() {
  return {};
}
var dataSource2 = {
  displayName: "Custom",
  QueryEditor: QueryEditor2,
  getInitialQueryValue: getInitialQueryValue2,
  hasDefault: true
};
var client_default2 = dataSource2;

// src/toolpadDataSources/client.tsx
var dataSources = {
  rest: client_default,
  local: client_default2
};
var client_default3 = dataSources;

// src/toolpad/AppEditor/PageEditor/QueryEditor/QueryEditorPanel.tsx
function refetchIntervalInSeconds(maybeInterval) {
  if (typeof maybeInterval !== "number") {
    return void 0;
  }
  const seconds = Math.floor(maybeInterval / 1e3);
  return seconds > 0 ? seconds : void 0;
}
function QuerySettingsTab({
  draft,
  liveEnabled,
  pageState,
  globalScopeMeta,
  jsBrowserRuntime
}) {
  const appStateApi = useAppStateApi();
  const updateAttribute = React70.useCallback(
    function updateAttribute2(attrName, attrValue) {
      appStateApi.updateQueryDraft((node) => ({
        ...node,
        attributes: {
          ...node.attributes,
          [attrName]: attrValue
        }
      }));
    },
    [appStateApi]
  );
  const handleModeChange = React70.useCallback(
    (event) => {
      if (event.target.value === "mutation" || event.target.value === "query") {
        updateAttribute("mode", event.target.value);
      }
    },
    [updateAttribute]
  );
  const handleEnabledChange = React70.useCallback(
    (newValue) => {
      if (newValue !== null) {
        updateAttribute("enabled", newValue);
      }
    },
    [updateAttribute]
  );
  const handleRefetchIntervalChange = React70.useCallback(
    (event) => {
      const interval = Number(event.target.value);
      if (!Number.isNaN(interval) && interval > 0) {
        updateAttribute("refetchInterval", interval * 1e3);
      }
    },
    [updateAttribute]
  );
  return /* @__PURE__ */ React70.createElement(
    Box21,
    {
      display: "flex",
      flexDirection: "column",
      sx: {
        p: 0.25,
        mt: 1,
        ml: 1,
        mr: 1
      }
    },
    /* @__PURE__ */ React70.createElement(
      Stack12,
      {
        display: "grid",
        gridTemplateRows: "1fr 1fr 1fr",
        gridTemplateColumns: "0.45fr 1fr",
        rowGap: 0.5
      },
      /* @__PURE__ */ React70.createElement(Typography14, { fontSize: 12, sx: { alignSelf: "center" } }, "Set query mode:"),
      /* @__PURE__ */ React70.createElement(
        TextField16,
        {
          select: true,
          label: "mode",
          value: draft?.attributes?.mode ?? "query",
          onChange: handleModeChange,
          sx: {
            [`& .${inputLabelClasses4.root}`]: { fontSize: 12 },
            [`& .${inputBaseClasses4.root}`]: { fontSize: 12 }
          }
        },
        /* @__PURE__ */ React70.createElement(MenuItem6, { value: "query" }, "Fetch at any time to always be available on the page"),
        /* @__PURE__ */ React70.createElement(MenuItem6, { value: "mutation" }, "Only fetch on manual action")
      ),
      draft?.attributes?.mode !== "mutation" ? /* @__PURE__ */ React70.createElement(React70.Fragment, null, /* @__PURE__ */ React70.createElement(Typography14, { fontSize: 12, sx: { alignSelf: "center" } }, "Set refetch interval:"), /* @__PURE__ */ React70.createElement(
        TextField16,
        {
          sx: {
            [`& .${inputLabelClasses4.root}`]: { fontSize: 12 },
            [`& .${inputBaseClasses4.root}`]: { fontSize: 12 },
            maxWidth: 200
          },
          type: "number",
          label: "Refetch interval",
          value: refetchIntervalInSeconds(draft?.attributes?.refetchInterval) ?? "",
          onChange: handleRefetchIntervalChange,
          slotProps: {
            input: {
              startAdornment: /* @__PURE__ */ React70.createElement(InputAdornment4, { position: "start" }, "s")
            }
          }
        }
      ), /* @__PURE__ */ React70.createElement(Typography14, { fontSize: 12, sx: { alignSelf: "center" } }, "Set query enabled/disabled:"), /* @__PURE__ */ React70.createElement(
        BindableEditor,
        {
          liveBinding: liveEnabled,
          globalScope: pageState,
          globalScopeMeta,
          jsRuntime: jsBrowserRuntime,
          label: "Enabled",
          propType: { type: "boolean" },
          value: draft?.attributes?.enabled ?? true,
          onChange: handleEnabledChange,
          sx: { maxWidth: 100 }
        }
      )) : null
    )
  );
}
function QueryEditorPanel({ draft, saved }) {
  const { dom } = useAppState();
  const projectApi = useProjectApi();
  const connectionId = appDom19.deref(saved ? saved?.attributes?.connectionId : draft?.attributes?.connectionId) ?? null;
  const connection = connectionId ? appDom19.getMaybeNode(dom, connectionId, "connection") : null;
  const dataSourceId = saved ? saved?.attributes?.dataSource : draft?.attributes?.dataSource;
  const dataSource3 = dataSourceId && client_default3[dataSourceId] || null;
  const connectionParams = connection?.attributes?.params;
  const { pageState, globalScopeMeta } = usePageEditorState();
  const queryEditorContext = React70.useMemo(
    () => dataSourceId ? { dataSourceId, connectionId } : null,
    [dataSourceId, connectionId]
  );
  const jsBrowserRuntime = useBrowserJsRuntime3();
  const liveEnabled = useEvaluateLiveBinding({
    jsRuntime: jsBrowserRuntime,
    input: draft?.attributes?.enabled || null,
    globalScope: pageState
  });
  const execPrivate = React70.useCallback(
    (method, args) => {
      invariant9(dataSourceId, "dataSourceId must be set");
      return projectApi.methods.dataSourceExecPrivate(dataSourceId, method, args);
    },
    [projectApi, dataSourceId]
  );
  return dataSourceId && dataSource3 && queryEditorContext ? /* @__PURE__ */ React70.createElement(ConnectionContextProvider, { value: queryEditorContext }, /* @__PURE__ */ React70.createElement(Box21, { sx: { height: "100%", p: 0, overflow: "hidden" } }, /* @__PURE__ */ React70.createElement(
    dataSource3.QueryEditor,
    {
      connectionParams,
      value: draft,
      globalScope: pageState,
      globalScopeMeta,
      execApi: execPrivate,
      settingsTab: /* @__PURE__ */ React70.createElement(
        QuerySettingsTab,
        {
          ...{
            draft,
            liveEnabled,
            pageState,
            globalScopeMeta,
            jsBrowserRuntime
          }
        }
      )
    }
  ))) : /* @__PURE__ */ React70.createElement(Alert7, { severity: "error" }, 'Datasource "', dataSourceId, '" not found');
}

// src/utils/platform.tsx
import * as React71 from "react";
function isMac() {
  const userAgent = navigator.userAgent;
  return /Mac|iPod|iPhone|iPad/.test(userAgent);
}
function getModifierKey() {
  return isMac() ? "\u2318" : /* @__PURE__ */ React71.createElement("kbd", null, "Ctrl");
}

// src/toolpad/AppEditor/PageEditor/QueryEditor/index.tsx
function SaveShortcutIndicator() {
  return /* @__PURE__ */ React72.createElement("span", null, getModifierKey(), "+", /* @__PURE__ */ React72.createElement("kbd", null, "S"));
}
function TabCloseIcon({
  queryIndex,
  unsaved,
  queryId
}) {
  const appStateApi = useAppStateApi();
  const [notHovered, setNotHovered] = React72.useState(true);
  const onClose = React72.useCallback(() => {
    if (queryId === void 0) {
      return;
    }
    appStateApi.closeQueryTab(queryId, queryIndex);
  }, [appStateApi, queryIndex, queryId]);
  const { handleCloseWithUnsavedChanges: handleCloseTab } = useUnsavedChangesConfirm({
    hasUnsavedChanges: unsaved ?? false,
    onClose
  });
  return unsaved && notHovered ? /* @__PURE__ */ React72.createElement(
    CircleIcon,
    {
      "aria-label": `Unsaved changes ${queryIndex + 1}`,
      sx: {
        color: (theme) => theme.palette.mode === "dark" ? theme.palette.primaryDark[300] : theme.palette.primary.main,
        fontSize: 12
      },
      onMouseEnter: () => {
        setNotHovered(false);
      }
    }
  ) : /* @__PURE__ */ React72.createElement(
    ClearOutlinedIcon,
    {
      onMouseLeave: () => {
        setNotHovered(true);
      },
      onClick: (event) => {
        event.stopPropagation();
        handleCloseTab();
      },
      role: "button",
      "aria-label": `Close query tab ${queryIndex + 1}`,
      sx: {
        color: (theme) => theme.palette.mode === "dark" ? theme.palette.primaryDark[400] : theme.palette.grey[500],
        fontSize: 12,
        padding: "1px",
        "&:hover": {
          color: (theme) => theme.palette.mode === "dark" ? theme.palette.primaryDark[300] : theme.palette.grey[700],
          backgroundColor: (theme) => theme.palette.mode === "dark" ? theme.palette.primaryDark[700] : theme.palette.grey[300],
          borderRadius: "4px"
        }
      }
    }
  );
}
function QueryEditor3() {
  const { currentView, dom } = useAppState();
  const appStateApi = useAppStateApi();
  const state = usePageEditorState();
  const page = appDom20.getNode(dom, state.nodeId, "page");
  const currentQueryId = React72.useMemo(() => {
    if (currentView.kind === "page" && currentView.view?.kind === "query") {
      return currentView.view.nodeId;
    }
    return "";
  }, [currentView]);
  const currentTabIndex = React72.useMemo(() => {
    if (currentView.kind === "page" && currentView.view?.kind === "query") {
      return currentView.queryPanel?.currentTabIndex?.toString() || "";
    }
    return "";
  }, [currentView]);
  const handleTabChange = React72.useCallback(
    (event, newValue) => {
      if (currentView.kind === "page") {
        const tabIndex = Number(newValue);
        const queryId = currentView.queryPanel?.queryTabs?.[tabIndex]?.meta?.id;
        if (queryId) {
          appStateApi.setView({
            kind: "page",
            name: page.name,
            view: { kind: "query", nodeId: queryId },
            queryPanel: {
              ...currentView.queryPanel,
              currentTabIndex: tabIndex
            }
          });
        }
      }
    },
    [appStateApi, currentView, page.name]
  );
  const hasUnsavedChanges = React72.useCallback(
    (queryIndex) => {
      if (currentView.kind !== "page" || !currentView.name || !currentView.queryPanel?.queryTabs || queryIndex === void 0) {
        return false;
      }
      const tab = currentView.queryPanel?.queryTabs[queryIndex];
      const draft = tab?.draft;
      if (!tab || !tab.meta?.id || !draft) {
        return false;
      }
      return draft !== tab.saved;
    },
    [currentView]
  );
  const handleSave = React72.useCallback(() => {
    if (currentView.kind !== "page" || !currentView.name || !currentView.queryPanel?.queryTabs || currentView.queryPanel?.currentTabIndex === void 0) {
      return;
    }
    const currentTab = currentView.queryPanel?.queryTabs[currentView.queryPanel?.currentTabIndex];
    const currentQueryDraft = currentTab?.draft;
    if (!currentTab || !currentTab.meta?.id || !currentQueryDraft) {
      return;
    }
    appStateApi.saveQueryDraft(currentQueryDraft);
  }, [currentView, appStateApi]);
  const onClosePanel = React72.useCallback(() => {
    appStateApi.closeQueryPanel();
  }, [appStateApi]);
  const saveDisabled = React72.useMemo(
    () => !hasUnsavedChanges(Number(currentTabIndex)),
    [hasUnsavedChanges, currentTabIndex]
  );
  const hasUnsavedChangesInPanel = React72.useMemo(() => {
    if (currentView.kind !== "page" || !currentView.queryPanel?.queryTabs) {
      return false;
    }
    return currentView.queryPanel?.queryTabs.some((tab) => tab.draft !== tab.saved);
  }, [currentView]);
  const { handleCloseWithUnsavedChanges: handleClosePanel } = useUnsavedChangesConfirm({
    hasUnsavedChanges: hasUnsavedChangesInPanel,
    onClose: onClosePanel
  });
  useShortcut({ key: "s", metaKey: true, disabled: saveDisabled }, handleSave);
  return currentView.kind === "page" && currentView.view?.kind === "query" && currentQueryId && currentView?.queryPanel?.queryTabs ? /* @__PURE__ */ React72.createElement(
    Stack13,
    {
      direction: "column",
      sx: { height: "100%", overflow: "hidden", borderBottom: 5, borderColor: "divider" },
      "aria-label": "Query editor",
      role: "tabpanel"
    },
    /* @__PURE__ */ React72.createElement(TabContext7, { value: currentTabIndex }, /* @__PURE__ */ React72.createElement(
      Stack13,
      {
        direction: "row",
        justifyContent: "space-between",
        sx: { maxHeight: 36, borderBottom: 1, borderColor: "divider" }
      },
      /* @__PURE__ */ React72.createElement(TabList6, { onChange: handleTabChange, "aria-label": "Query editor tabs" }, currentView.queryPanel?.queryTabs?.map((query, index) => /* @__PURE__ */ React72.createElement(
        Tab6,
        {
          key: index,
          label: /* @__PURE__ */ React72.createElement(
            Chip3,
            {
              label: query?.meta?.name,
              size: "small",
              variant: "outlined",
              sx: {
                color: "inherit",
                border: 0,
                ml: -1,
                "&:hover": { color: "inherit" }
              },
              deleteIcon: /* @__PURE__ */ React72.createElement(
                TabCloseIcon,
                {
                  queryIndex: index,
                  unsaved: hasUnsavedChanges(index),
                  queryId: query?.meta?.id
                }
              ),
              onDelete: () => {
              }
            }
          ),
          value: index.toString(),
          icon: /* @__PURE__ */ React72.createElement(
            QueryIcon,
            {
              id: query?.meta?.dataSource || "default",
              mode: query?.meta?.mode ?? "query",
              sx: { mt: 0.2 }
            }
          ),
          iconPosition: "start"
        }
      ))),
      /* @__PURE__ */ React72.createElement("div", null, /* @__PURE__ */ React72.createElement(
        LoadingButton4,
        {
          disabled: saveDisabled,
          onClick: handleSave,
          variant: "contained",
          color: "primary",
          sx: { width: "fit-content", height: 32, my: "auto", mt: 0.2, mr: 2 }
        },
        "Save \xA0",
        /* @__PURE__ */ React72.createElement(SaveShortcutIndicator, null)
      ), /* @__PURE__ */ React72.createElement(IconButton12, { size: "small", disableRipple: true, onClick: handleClosePanel }, /* @__PURE__ */ React72.createElement(
        CancelPresentationIcon,
        {
          sx: {
            mr: 1,
            alignSelf: "center",
            color: (theme) => theme.palette.grey[500],
            transition: (theme) => theme.transitions.create("color", {
              duration: theme.transitions.duration.shortest
            }),
            "&:hover, &:focus": {
              color: (theme) => theme.palette.mode === "dark" ? theme.palette.primaryDark[300] : theme.palette.primary.main
            },
            fontSize: 16
          }
        }
      )))
    ), currentView.queryPanel?.queryTabs?.map((query, index) => {
      if (query && query.draft) {
        return /* @__PURE__ */ React72.createElement(
          TabPanel4,
          {
            key: index,
            value: index.toString(),
            "aria-label": query.meta?.name,
            sx: {
              p: 0,
              height: "100%",
              overflow: "hidden"
            }
          },
          /* @__PURE__ */ React72.createElement(React72.Suspense, { fallback: /* @__PURE__ */ React72.createElement(LinearProgress3, null) }, /* @__PURE__ */ React72.createElement(QueryEditorPanel, { draft: query.draft, saved: query.saved }))
        );
      }
      return null;
    }))
  ) : null;
}

// src/toolpad/AppEditor/PageEditor/index.tsx
var classes6 = {
  renderPanel: "Toolpad_RenderPanel"
};
var PageEditorRoot = styled33("div")({
  width: "100%",
  height: "100%",
  overflow: "hidden",
  display: "flex",
  flexDirection: "row",
  [`& .${classes6.renderPanel}`]: {
    flex: 1
  }
});
function PageEditorContent({ node }) {
  usePageTitle(`${appDom21.getPageTitle(node)} | Toolpad Studio editor`);
  const { currentView } = useAppState();
  const showQuery = currentView.kind === "page" && currentView.view?.kind === "query" && currentView.queryPanel?.queryTabs;
  return /* @__PURE__ */ React73.createElement(PageEditorProvider, { key: node.id, nodeId: node.id }, /* @__PURE__ */ React73.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad/editor-panel-split", direction: "vertical" }, /* @__PURE__ */ React73.createElement(resizablePanels_exports.Panel, { order: 1, id: "editor" }, /* @__PURE__ */ React73.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "editor/component-panel-split", direction: "horizontal" }, /* @__PURE__ */ React73.createElement(resizablePanels_exports.Panel, { id: "page-editor", defaultSize: 75, minSize: 50, maxSize: 80 }, /* @__PURE__ */ React73.createElement(PageEditorRoot, null, /* @__PURE__ */ React73.createElement(ComponentCatalog_default, null), /* @__PURE__ */ React73.createElement(RenderPanel_default, { className: classes6.renderPanel }))), /* @__PURE__ */ React73.createElement(PanelResizeHandle, null), /* @__PURE__ */ React73.createElement(resizablePanels_exports.Panel, { id: "component-panel", defaultSize: 25, maxSize: 50, minSize: 20 }, /* @__PURE__ */ React73.createElement(ComponentPanel, null)))), /* @__PURE__ */ React73.createElement(PanelResizeHandle, null), showQuery ? /* @__PURE__ */ React73.createElement(resizablePanels_exports.Panel, { minSize: 10, maxSize: 90, defaultSize: 35, order: 2, id: "query-panel" }, /* @__PURE__ */ React73.createElement(QueryEditor3, null)) : null));
}
function PageEditor({ name }) {
  const { dom } = useAppState();
  const pageNode = React73.useMemo(() => appDom21.getPageByName(dom, name), [dom, name]);
  useUndoRedo();
  return pageNode ? /* @__PURE__ */ React73.createElement(PageEditorContent, { node: pageNode }) : /* @__PURE__ */ React73.createElement(NotFoundEditor, { message: `Non-existing Page "${name}"` });
}

// src/toolpad/AppEditor/AppEditorShell.tsx
import { Box as Box33 } from "@mui/material";
import * as React98 from "react";

// src/toolpad/AppEditor/PagePanel.tsx
import * as React84 from "react";
import { styled as styled39, Box as Box25, Divider as Divider9, Typography as Typography19 } from "@mui/material";
import * as appDom26 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/PagesExplorer/index.tsx
import * as React79 from "react";
import { styled as styled36, Box as Box22, IconButton as IconButton14, Stack as Stack15, Tooltip as Tooltip12 } from "@mui/material";
import { SimpleTreeView, treeItemClasses } from "@mui/x-tree-view";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import clsx5 from "clsx";
import invariant10 from "invariant";
import { alphabeticComparator, createPropComparator } from "@toolpad/utils/comparators";
import useBoolean2 from "@toolpad/utils/hooks/useBoolean";
import * as appDom23 from "@toolpad/studio-runtime/appDom";

// src/toolpad/AppEditor/NodeMenu.tsx
import { MenuItem as MenuItem7, Menu, ListItemIcon, ListItemText } from "@mui/material";
import * as React76 from "react";
import DeleteIcon4 from "@mui/icons-material/Delete";
import ContentCopyIcon2 from "@mui/icons-material/ContentCopy";
import ModeEditIcon from "@mui/icons-material/ModeEdit";
import useLatest3 from "@toolpad/utils/hooks/useLatest";
import * as appDom22 from "@toolpad/studio-runtime/appDom";

// src/components/SystemDialogs.tsx
import { LoadingButton as LoadingButton5 } from "@mui/lab";
import {
  Dialog as Dialog6,
  DialogTitle as DialogTitle6,
  DialogContent as DialogContent6,
  DialogActions as DialogActions6,
  Button as Button10,
  TextField as TextField17
} from "@mui/material";
import * as React74 from "react";
var SystemDialog = Dialog6;
var SystemDialogTitle = DialogTitle6;
var SystemDialogContent = DialogContent6;
var SystemDialogActions = DialogActions6;
var SystemDialogCancelButton = React74.forwardRef(
  ({ children = "cancel", ...props }, ref) => /* @__PURE__ */ React74.createElement(Button10, { ref, color: "inherit", variant: "text", ...props }, children)
);
var SystemDialogOkButton = React74.forwardRef(
  ({ children = "ok", ...props }, ref) => /* @__PURE__ */ React74.createElement(LoadingButton5, { ref, ...props }, children)
);
function ConfirmDialog({
  open,
  onClose,
  title,
  children,
  cancelButton = "Cancel",
  okButton = "ok",
  severity,
  loading
}) {
  const handleCancel = React74.useCallback(
    (event) => onClose(false, event),
    [onClose]
  );
  const handleOk = React74.useCallback((event) => onClose(true, event), [onClose]);
  return /* @__PURE__ */ React74.createElement(SystemDialog, { open, onClose: handleCancel }, /* @__PURE__ */ React74.createElement(SystemDialogTitle, null, title ?? "Confirm"), /* @__PURE__ */ React74.createElement(SystemDialogContent, null, children), /* @__PURE__ */ React74.createElement(SystemDialogActions, null, /* @__PURE__ */ React74.createElement(SystemDialogCancelButton, { onClick: handleCancel }, cancelButton), /* @__PURE__ */ React74.createElement(SystemDialogOkButton, { color: severity, loading, onClick: handleOk }, okButton)));
}

// src/utils/useMenu.ts
import * as React75 from "react";
function useMenu() {
  const buttonId = React75.useId();
  const menuId = React75.useId();
  const [anchorEl, setAnchorEl] = React75.useState(null);
  const open = Boolean(anchorEl);
  const onMenuClose = React75.useCallback((event) => {
    event?.stopPropagation?.();
    setAnchorEl(null);
  }, []);
  const buttonProps = React75.useMemo(
    () => ({
      id: buttonId,
      "aria-controls": open ? menuId : void 0,
      "aria-haspopup": "true",
      "aria-expanded": open ? "true" : void 0,
      onClick(event) {
        event.stopPropagation();
        setAnchorEl(event.currentTarget);
      }
    }),
    [buttonId, menuId, open]
  );
  const menuProps = React75.useMemo(
    () => ({
      id: menuId,
      anchorEl,
      open,
      onClose: onMenuClose,
      MenuListProps: {
        "aria-labelledby": buttonId
      }
    }),
    [anchorEl, buttonId, menuId, onMenuClose, open]
  );
  return {
    buttonProps,
    menuProps,
    onMenuClose
  };
}

// src/toolpad/AppEditor/NodeMenu.tsx
function NodeMenu({
  nodeId,
  renderButton,
  renameLabelText = "Rename",
  deleteLabelText = "Delete",
  duplicateLabelText = "Duplicate",
  onRenameNode,
  onDeleteNode,
  onDuplicateNode
}) {
  const { dom } = useAppState();
  const { menuProps, buttonProps, onMenuClose } = useMenu();
  const [deletedNodeId, setDeletedNodeId] = React76.useState(null);
  const handleDeleteNodeDialogOpen = React76.useCallback(
    (event) => {
      event.stopPropagation();
      setDeletedNodeId(nodeId);
      onMenuClose(event);
    },
    [nodeId, onMenuClose]
  );
  const deletedNode = deletedNodeId && appDom22.getMaybeNode(dom, deletedNodeId);
  const latestDeletedNode = useLatest3(deletedNode);
  const isAction = React76.useMemo(() => {
    if (latestDeletedNode?.type === "query" && latestDeletedNode?.attributes?.mode === "mutation") {
      return true;
    }
    return false;
  }, [latestDeletedNode]);
  const handleDeleteNodeDialogClose = React76.useCallback(
    (confirmed, event) => {
      event.stopPropagation();
      setDeletedNodeId(null);
      if (confirmed && deletedNode) {
        onDeleteNode?.(deletedNodeId);
      }
    },
    [deletedNode, deletedNodeId, onDeleteNode]
  );
  const handleRenameClick = React76.useCallback(
    (event) => {
      onRenameNode?.(nodeId);
      onMenuClose(event);
    },
    [nodeId, onRenameNode, onMenuClose]
  );
  const handleDuplicateClick = React76.useCallback(
    (event) => {
      onMenuClose(event);
      onDuplicateNode?.(nodeId);
    },
    [onDuplicateNode, nodeId, onMenuClose]
  );
  return /* @__PURE__ */ React76.createElement(React76.Fragment, null, renderButton({
    buttonProps,
    menuProps
  }), /* @__PURE__ */ React76.createElement(
    Menu,
    {
      ...menuProps,
      onClick: (event) => {
        event.stopPropagation();
        menuProps.onClick?.(event);
      }
    },
    onRenameNode ? /* @__PURE__ */ React76.createElement(MenuItem7, { onClick: handleRenameClick }, /* @__PURE__ */ React76.createElement(ListItemIcon, null, /* @__PURE__ */ React76.createElement(ModeEditIcon, null)), /* @__PURE__ */ React76.createElement(ListItemText, null, renameLabelText)) : null,
    onDuplicateNode ? /* @__PURE__ */ React76.createElement(MenuItem7, { onClick: handleDuplicateClick }, /* @__PURE__ */ React76.createElement(ListItemIcon, null, /* @__PURE__ */ React76.createElement(ContentCopyIcon2, null)), /* @__PURE__ */ React76.createElement(ListItemText, null, duplicateLabelText)) : null,
    onDeleteNode ? /* @__PURE__ */ React76.createElement(MenuItem7, { onClick: handleDeleteNodeDialogOpen }, /* @__PURE__ */ React76.createElement(ListItemIcon, null, /* @__PURE__ */ React76.createElement(DeleteIcon4, null)), /* @__PURE__ */ React76.createElement(ListItemText, null, deleteLabelText)) : null
  ), /* @__PURE__ */ React76.createElement(
    ConfirmDialog,
    {
      open: !!deletedNode,
      severity: "error",
      onClose: handleDeleteNodeDialogClose,
      okButton: "Delete"
    },
    "Delete ",
    isAction ? "action" : "query",
    ' "',
    latestDeletedNode?.name,
    '"?'
  ));
}

// src/components/EditableTreeItem.tsx
import * as React77 from "react";
import { TreeItem } from "@mui/x-tree-view";
import {
  Alert as Alert8,
  CircularProgress as CircularProgress3,
  InputBase as InputBase2,
  Popover as Popover2,
  Typography as Typography15,
  alpha as alpha2,
  styled as styled34
} from "@mui/material";
var EditableTreeItemRoot = styled34(TreeItem, {
  shouldForwardProp: (prop) => prop !== "isEditing"
})(({ theme, isEditing }) => ({
  paddingLeft: theme.spacing(0.5),
  "> .MuiTreeItem-content": {
    padding: theme.spacing(0, 0.5),
    gap: theme.spacing(0.5),
    backgroundColor: isEditing ? alpha2(theme.palette.primary.main, 0.2) : void 0
  }
}));
var defaultRenderLabel = (children) => children;
function EditableTreeItem({
  labelText = "",
  renderLabel = defaultRenderLabel,
  suggestedNewItemName = "",
  validateItemName,
  isEditing: isExternalEditing = false,
  onEdit,
  onCancel,
  isLoading = false,
  inputProps,
  sx,
  ...rest
}) {
  const inputRef = React77.useRef(null);
  const [itemNameInput, setItemNameInput] = React77.useState(suggestedNewItemName);
  const [isInternalEditing, setIsInternalEditing] = React77.useState(false);
  const isEditing = isExternalEditing || isInternalEditing;
  const newItemValidationResult = React77.useMemo(
    () => validateItemName ? validateItemName(itemNameInput) : { isValid: true },
    [itemNameInput, validateItemName]
  );
  const validationErrorMessage = newItemValidationResult.errorMessage;
  React77.useEffect(() => {
    setItemNameInput(suggestedNewItemName);
  }, [suggestedNewItemName]);
  const handleClick = React77.useCallback(
    (event) => {
      if (event.detail === 2 && onEdit) {
        setIsInternalEditing(true);
      }
    },
    [onEdit]
  );
  const handleCancel = React77.useCallback(() => {
    setItemNameInput(suggestedNewItemName);
    setIsInternalEditing(false);
    if (onCancel) {
      onCancel();
    }
  }, [onCancel, suggestedNewItemName]);
  const handleConfirm = React77.useCallback(async () => {
    if (!itemNameInput || !newItemValidationResult.isValid || isLoading) {
      handleCancel();
      return;
    }
    if (onEdit) {
      await onEdit(itemNameInput);
    }
    setIsInternalEditing(false);
  }, [handleCancel, isLoading, itemNameInput, newItemValidationResult.isValid, onEdit]);
  const handleChange = React77.useCallback((event) => {
    setItemNameInput(event.target.value.replaceAll(/[^a-zA-Z0-9]/g, ""));
  }, []);
  const handleFocus = React77.useCallback((event) => {
    event.target.select();
    event.stopPropagation();
  }, []);
  const handleBlur = React77.useCallback(() => {
    handleConfirm();
  }, [handleConfirm]);
  const handleKeyDown = React77.useCallback(
    (event) => {
      event.stopPropagation();
      if (event.key === "Enter") {
        handleConfirm();
      } else if (event.key === "Escape") {
        handleCancel();
      }
    },
    [handleCancel, handleConfirm]
  );
  const inputErrorPopoverAnchorEl = inputRef.current;
  const labelTextSx = {
    fontSize: 14,
    pt: "4px",
    pb: "4px"
  };
  return /* @__PURE__ */ React77.createElement(
    EditableTreeItemRoot,
    {
      ...rest,
      onClick: handleClick,
      label: renderLabel(
        isEditing ? /* @__PURE__ */ React77.createElement(React77.Fragment, null, /* @__PURE__ */ React77.createElement(
          InputBase2,
          {
            ...inputProps,
            ref: inputRef,
            value: itemNameInput,
            onChange: handleChange,
            autoFocus: true,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onKeyDown: handleKeyDown,
            fullWidth: true,
            disabled: isLoading,
            endAdornment: isLoading ? /* @__PURE__ */ React77.createElement(CircularProgress3, { size: 14 }) : null,
            sx: {
              ...inputProps?.sx || {},
              ...labelTextSx,
              padding: 0
            }
          }
        ), inputErrorPopoverAnchorEl ? /* @__PURE__ */ React77.createElement(
          Popover2,
          {
            open: !!validationErrorMessage,
            anchorEl: inputErrorPopoverAnchorEl,
            disableAutoFocus: true,
            anchorOrigin: {
              vertical: "bottom",
              horizontal: "left"
            }
          },
          validationErrorMessage ? /* @__PURE__ */ React77.createElement(Alert8, { severity: "error", variant: "outlined" }, validationErrorMessage) : null
        ) : null) : /* @__PURE__ */ React77.createElement(
          Typography15,
          {
            variant: "body2",
            sx: {
              fontWeight: "inherit",
              flexGrow: 1,
              overflow: "hidden",
              textOverflow: "ellipsis",
              ...labelTextSx
            },
            noWrap: true
          },
          labelText
        )
      ),
      isEditing,
      sx
    }
  );
}

// src/toolpad/AppEditor/ExplorerHeader.tsx
import * as React78 from "react";
import {
  IconButton as IconButton13,
  Tooltip as Tooltip11,
  Stack as Stack14,
  Typography as Typography16,
  styled as styled35,
  InputAdornment as InputAdornment5,
  TextField as TextField18
} from "@mui/material";
import AddIcon3 from "@mui/icons-material/Add";
import SearchIcon from "@mui/icons-material/Search";
var ExplorerHeaderContainer = styled35(Stack14)(({ theme }) => ({
  backgroundColor: theme.palette.background.paper,
  width: "100%",
  height: 36
}));
var ExplorerHeaderTitle = styled35(Typography16)(({ theme }) => ({
  fontSize: 13,
  flexGrow: 1,
  fontWeight: theme.typography.fontWeightLight
}));
function ExplorerHeader({
  headerText,
  headerIcon,
  onCreate,
  onSearch,
  createLabelText,
  searchLabelText = "Search",
  hasPersistentSearch = false
}) {
  const [isSearching, setIsSearching] = React78.useState(hasPersistentSearch);
  const [searchTerm, setSearchTerm] = React78.useState("");
  const handleSearchClick = React78.useCallback(() => {
    if (isSearching && searchTerm) {
      setSearchTerm("");
    }
    setIsSearching((previousIsSearching) => !previousIsSearching);
  }, [isSearching, searchTerm]);
  const handleSearchChange = React78.useCallback((event) => {
    setSearchTerm(event.target.value);
  }, []);
  React78.useEffect(() => {
    if (onSearch) {
      onSearch(searchTerm);
    }
  }, [onSearch, searchTerm]);
  return /* @__PURE__ */ React78.createElement(
    ExplorerHeaderContainer,
    {
      direction: "row",
      alignItems: "center",
      justifyContent: "space-between",
      sx: { pl: isSearching ? 2 : 2.5 }
    },
    isSearching ? /* @__PURE__ */ React78.createElement(
      TextField18,
      {
        hiddenLabel: true,
        value: searchTerm,
        onChange: handleSearchChange,
        variant: "standard",
        fullWidth: true,
        size: "small",
        placeholder: `${searchLabelText}\u2026`,
        slotProps: {
          input: {
            startAdornment: hasPersistentSearch ? /* @__PURE__ */ React78.createElement(InputAdornment5, { position: "start" }, /* @__PURE__ */ React78.createElement(SearchIcon, { fontSize: "small", sx: { mt: "-4px" } })) : null,
            sx: {
              fontSize: 14,
              borderRadius: 0
            }
          }
        }
      }
    ) : /* @__PURE__ */ React78.createElement(React78.Fragment, null, headerIcon, /* @__PURE__ */ React78.createElement(
      ExplorerHeaderTitle,
      {
        variant: "body2",
        sx: {
          mx: 0.5,
          my: 0.5
        }
      },
      headerText
    )),
    onSearch && searchLabelText && !hasPersistentSearch ? /* @__PURE__ */ React78.createElement(Tooltip11, { title: searchLabelText }, /* @__PURE__ */ React78.createElement(IconButton13, { "aria-label": searchLabelText, size: "medium", onClick: handleSearchClick }, /* @__PURE__ */ React78.createElement(SearchIcon, { color: isSearching ? "primary" : "inherit" }))) : null,
    onCreate && createLabelText ? /* @__PURE__ */ React78.createElement(Tooltip11, { title: createLabelText }, /* @__PURE__ */ React78.createElement(IconButton13, { "aria-label": createLabelText, size: "small", onClick: onCreate }, /* @__PURE__ */ React78.createElement(AddIcon3, null))) : null
  );
}

// src/toolpad/AppEditor/PagesExplorer/index.tsx
var PagesExplorerRoot = styled36(Stack15)({
  height: "100%",
  width: "100%"
});
var classes7 = {
  treeItemMenuButton: "Toolpad__PagesExplorerTreeItem",
  treeItemMenuOpen: "Toolpad__PagesExplorerTreeItemMenuOpen"
};
var StyledEditableTreeItem = styled36(EditableTreeItem)({
  [`& .${classes7.treeItemMenuButton}`]: {
    visibility: "hidden"
  },
  [`
    & .${treeItemClasses.content}:hover .${classes7.treeItemMenuButton},
    & .${classes7.treeItemMenuOpen}
  `]: {
    visibility: "visible"
  }
});
function PagesExplorerTreeItem(props) {
  const {
    itemId,
    labelIcon,
    labelText,
    title,
    onRenameNode,
    onDeleteNode,
    onDuplicateNode,
    renameLabelText = "Rename",
    deleteLabelText = "Delete",
    duplicateLabelText = "Duplicate",
    toolpadNodeId,
    validateItemName,
    ...other
  } = props;
  const { value: isEditing, setTrue: startEditing, setFalse: stopEditing } = useBoolean2(false);
  const handleRenameConfirm = React79.useCallback(
    (updatedName) => {
      if (onRenameNode) {
        onRenameNode(itemId, updatedName);
        stopEditing();
      }
    },
    [itemId, onRenameNode, stopEditing]
  );
  const validateEditablePageName = React79.useCallback(
    (newName) => {
      if (newName !== labelText && validateItemName) {
        return validateItemName(newName);
      }
      return { isValid: true };
    },
    [labelText, validateItemName]
  );
  return /* @__PURE__ */ React79.createElement(
    StyledEditableTreeItem,
    {
      itemId,
      labelText,
      renderLabel: (children) => /* @__PURE__ */ React79.createElement(Tooltip12, { title, placement: "right", disableInteractive: true }, /* @__PURE__ */ React79.createElement(Box22, { sx: { display: "flex", alignItems: "center" } }, labelIcon, children, toolpadNodeId ? /* @__PURE__ */ React79.createElement(
        NodeMenu,
        {
          renderButton: ({ buttonProps, menuProps }) => /* @__PURE__ */ React79.createElement(
            IconButton14,
            {
              className: clsx5(classes7.treeItemMenuButton, {
                [classes7.treeItemMenuOpen]: menuProps.open
              }),
              "aria-label": "Open page explorer menu",
              size: "small",
              ...buttonProps
            },
            /* @__PURE__ */ React79.createElement(MoreVertIcon, { fontSize: "inherit" })
          ),
          nodeId: toolpadNodeId,
          renameLabelText,
          deleteLabelText,
          duplicateLabelText,
          onRenameNode: startEditing,
          onDeleteNode,
          onDuplicateNode
        }
      ) : null)),
      suggestedNewItemName: labelText,
      onCancel: stopEditing,
      isEditing,
      ...onRenameNode ? { onEdit: handleRenameConfirm } : {},
      validateItemName: validateEditablePageName,
      ...other
    }
  );
}
function getNodeEditorDomView(node) {
  switch (node.type) {
    case "page":
      return { kind: "page", name: node.name };
    default:
      return void 0;
  }
}
var DEFAULT_NEW_PAGE_NAME = "page";
function PagesExplorer({ className }) {
  const projectApi = useProjectApi();
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const app = appDom23.getApp(dom);
  const { pages = [] } = appDom23.getChildNodes(dom, app);
  const existingNames = React79.useMemo(
    () => appDom23.getExistingNamesForChildren(dom, appDom23.getApp(dom), "pages"),
    [dom]
  );
  const [expanded, setExpanded] = useLocalStorageState(
    `editor/${app.id}/pages-explorer-expansion`,
    [":pages"]
  );
  const activePage = currentView.name ? appDom23.getPageByName(dom, currentView.name) : null;
  const handleToggle = (event, nodeIds) => {
    setExpanded(nodeIds);
  };
  const handleSelect = (event, nodeIds) => {
    if (nodeIds.length <= 0) {
      return;
    }
    const rawNodeId = nodeIds[0];
    if (rawNodeId.startsWith(":")) {
      return;
    }
    const selectedNodeId = rawNodeId;
    const node = appDom23.getNode(dom, selectedNodeId);
    if (appDom23.isElement(node)) {
      const page = appDom23.getPageAncestor(dom, node);
      if (page) {
        appStateApi.setView({ kind: "page", name: page.name });
      }
    }
    if (appDom23.isPage(node)) {
      appStateApi.setView({ kind: "page", name: node.name });
    }
  };
  const pagesTreeRef = React79.useRef(null);
  const [hasMounted, setHasMounted] = React79.useState(false);
  React79.useEffect(() => {
    setHasMounted(true);
  }, []);
  React79.useEffect(() => {
    const pagesTree = pagesTreeRef.current;
    if (pagesTree && hasMounted) {
      const selectedItem = pagesTree.querySelector(`.${treeItemClasses.selected}`);
      if (selectedItem) {
        scrollIntoViewIfNeeded(selectedItem);
      }
    }
  }, [hasMounted, pages]);
  const {
    value: isCreateNewPageOpen,
    setTrue: handleOpenCreateNewPage,
    setFalse: handleCloseCreateNewPage
  } = useBoolean2(false);
  const nextProposedName = React79.useMemo(
    () => appDom23.proposeName(DEFAULT_NEW_PAGE_NAME, existingNames),
    [existingNames]
  );
  const handleCreateNewCommit = React79.useCallback(
    async (newPageName) => {
      const newNode = appDom23.createNode(dom, "page", {
        name: newPageName,
        attributes: {
          title: newPageName,
          display: "shell",
          authorization: {
            allowAll: true
          }
        }
      });
      const appNode = appDom23.getApp(dom);
      appStateApi.update((draft) => appDom23.addNode(draft, newNode, appNode, "pages"), {
        kind: "page",
        name: newNode.name
      });
      handleCloseCreateNewPage();
    },
    [appStateApi, dom, handleCloseCreateNewPage]
  );
  const validatePageName = React79.useCallback(
    (pageName) => {
      const validationErrorMessage = appDom23.validateNodeName(pageName, existingNames, "page");
      return {
        isValid: !validationErrorMessage,
        ...validationErrorMessage ? { errorMessage: validationErrorMessage } : {}
      };
    },
    [existingNames]
  );
  const handleDeletePage = React79.useCallback(
    async (nodeId) => {
      const deletedNode = appDom23.getNode(dom, nodeId);
      let domViewAfterDelete;
      if (nodeId === activePage?.id) {
        const siblings = appDom23.getSiblings(dom, deletedNode);
        const firstSiblingOfType = siblings.find((sibling) => sibling.type === deletedNode.type);
        domViewAfterDelete = firstSiblingOfType ? getNodeEditorDomView(firstSiblingOfType) : { kind: "page" };
      }
      await projectApi.methods.deletePage(deletedNode.name);
      appStateApi.update((draft) => appDom23.removeNode(draft, nodeId), domViewAfterDelete);
    },
    [projectApi, activePage?.id, appStateApi, dom]
  );
  const handleRenameNode = React79.useCallback(
    (nodeId, updatedName) => {
      appStateApi.update(
        (draft) => {
          const page = appDom23.getNode(draft, nodeId, "page");
          return appDom23.setNodeName(draft, page, updatedName);
        },
        {
          kind: "page",
          name: updatedName
        }
      );
      const oldNameNode = dom.nodes[nodeId];
      if (oldNameNode.type === "page" && updatedName !== oldNameNode.name) {
        setTimeout(async () => {
          await projectApi.methods.deletePage(oldNameNode.name);
        }, 300);
      }
    },
    [appStateApi, dom.nodes, projectApi.methods]
  );
  const handleDuplicateNode = React79.useCallback(
    (nodeId) => {
      const node = appDom23.getNode(dom, nodeId);
      invariant10(
        node.parentId && node.parentProp,
        "Duplication should never be called on nodes that are not placed in the dom"
      );
      const fragment = appDom23.cloneFragment(dom, nodeId);
      const newNode = appDom23.getNode(fragment, fragment.root);
      const editorDomView = getNodeEditorDomView(newNode);
      appStateApi.update(
        (draft) => appDom23.addFragment(draft, fragment, node.parentId, node.parentProp),
        editorDomView || { kind: "page" }
      );
    },
    [appStateApi, dom]
  );
  const alphabeticSortedPages = React79.useMemo(
    () => [...pages].sort(createPropComparator("name", alphabeticComparator)),
    [pages]
  );
  return /* @__PURE__ */ React79.createElement(PagesExplorerRoot, { "data-testid": "pages-explorer", direction: "column", className }, /* @__PURE__ */ React79.createElement(
    ExplorerHeader,
    {
      headerText: "Pages",
      onCreate: handleOpenCreateNewPage,
      createLabelText: "Create new page"
    }
  ), /* @__PURE__ */ React79.createElement(
    SimpleTreeView,
    {
      ref: pagesTreeRef,
      "aria-label": "Pages explorer",
      selectedItems: activePage ? [activePage.id] : [],
      onSelectedItemsChange: handleSelect,
      expandedItems: expanded,
      onExpandedItemsChange: handleToggle,
      multiSelect: true,
      sx: {
        overflow: "auto",
        scrollbarGutter: "stable"
      }
    },
    isCreateNewPageOpen ? /* @__PURE__ */ React79.createElement(
      EditableTreeItem,
      {
        itemId: "::create::",
        isEditing: true,
        suggestedNewItemName: nextProposedName,
        onEdit: handleCreateNewCommit,
        onCancel: handleCloseCreateNewPage,
        validateItemName: validatePageName
      }
    ) : null,
    alphabeticSortedPages.map((page) => /* @__PURE__ */ React79.createElement(
      PagesExplorerTreeItem,
      {
        key: page.id,
        itemId: page.id,
        toolpadNodeId: page.id,
        labelText: page.name,
        title: appDom23.getPageDisplayName(page),
        onRenameNode: handleRenameNode,
        onDuplicateNode: handleDuplicateNode,
        onDeleteNode: handleDeletePage,
        validateItemName: validatePageName
      }
    ))
  ));
}

// src/toolpad/AppEditor/HierarchyExplorer/index.tsx
import * as React80 from "react";
import clsx6 from "clsx";
import { Box as Box23, Typography as Typography17, styled as styled37, IconButton as IconButton15 } from "@mui/material";
import { SimpleTreeView as SimpleTreeView2, TreeItem as TreeItem2, treeItemClasses as treeItemClasses2 } from "@mui/x-tree-view";
import useBoolean3 from "@toolpad/utils/hooks/useBoolean";
import * as appDom24 from "@toolpad/studio-runtime/appDom";
import MoreVertIcon2 from "@mui/icons-material/MoreVert";
import invariant11 from "invariant";
var classes8 = {
  treeItemMenuButton: "Toolpad__HierarchyListItem",
  treeItemMenuOpen: "Toolpad__HierarchyListItemMenuOpen"
};
var StyledTreeItem = styled37(EditableTreeItem)({
  [`& .${classes8.treeItemMenuButton}`]: {
    visibility: "hidden"
  },
  [`& .${treeItemClasses2.content}:hover .${classes8.treeItemMenuButton}, & .${classes8.treeItemMenuOpen}`]: {
    visibility: "visible"
  }
});
function CustomTreeItem(props) {
  const domApi = useDomApi();
  const { dom } = useAppState();
  const appStateApi = useAppStateApi();
  const { label, node, ...other } = props;
  const {
    value: domNodeEditing,
    setTrue: startDomNodeEditing,
    setFalse: stopDomNodeEditing
  } = useBoolean3(false);
  const existingNames = React80.useMemo(() => appDom24.getExistingNamesForNode(dom, node), [dom, node]);
  const validateEditableNodeName = React80.useCallback(
    (newName) => {
      if (newName !== node.name) {
        const validationErrorMessage = appDom24.validateNodeName(newName, existingNames, node.type);
        return {
          isValid: !validationErrorMessage,
          ...validationErrorMessage ? { errorMessage: validationErrorMessage } : {}
        };
      }
      return { isValid: true };
    },
    [existingNames, node.name, node.type]
  );
  const handleNameSave = React80.useCallback(
    (newName) => {
      domApi.setNodeName(node.id, newName);
      stopDomNodeEditing();
    },
    [domApi, node.id, stopDomNodeEditing]
  );
  const handleNodeDelete = React80.useCallback(
    (nodeId) => {
      domApi.update((draft) => {
        const toRemove = appDom24.getNode(draft, nodeId);
        if (appDom24.isElement(toRemove)) {
          draft = removePageLayoutNode(draft, toRemove);
        }
        return draft;
      });
    },
    [domApi]
  );
  const handleNodeDuplicate = React80.useCallback(
    (nodeId) => {
      const currentNode = appDom24.getNode(dom, nodeId);
      invariant11(
        node.parentId && node.parentProp,
        "Duplication should never be called on nodes that are not placed in the dom"
      );
      domApi.update((draft) => {
        draft = appDom24.duplicateNode(draft, currentNode);
        return draft;
      });
    },
    [dom, domApi, node.parentId, node.parentProp]
  );
  const handleNodeHover = React80.useCallback(
    (event, nodeId) => {
      appStateApi.hoverNode(nodeId);
    },
    [appStateApi]
  );
  const handleNodeBlur = React80.useCallback(() => {
    appStateApi.blurHoverNode();
  }, [appStateApi]);
  return /* @__PURE__ */ React80.createElement(
    StyledTreeItem,
    {
      key: node.id,
      labelText: node.name,
      renderLabel: (children) => /* @__PURE__ */ React80.createElement(
        Box23,
        {
          sx: { display: "flex", alignItems: "center" },
          onMouseEnter: (event) => {
            handleNodeHover?.(event, node.id);
          },
          onMouseLeave: handleNodeBlur
        },
        /* @__PURE__ */ React80.createElement(
          ComponentIcon,
          {
            id: node.attributes.component,
            kind: "builtIn",
            sx: { marginRight: 1, fontSize: 18, opacity: 0.5 }
          }
        ),
        children,
        node.id ? /* @__PURE__ */ React80.createElement(
          NodeMenu,
          {
            renderButton: ({ buttonProps, menuProps }) => /* @__PURE__ */ React80.createElement(
              IconButton15,
              {
                className: clsx6(classes8.treeItemMenuButton, {
                  [classes8.treeItemMenuOpen]: menuProps.open
                }),
                "aria-label": "Open hierarchy menu",
                size: "small",
                ...buttonProps
              },
              /* @__PURE__ */ React80.createElement(MoreVertIcon2, { fontSize: "inherit" })
            ),
            nodeId: node.id,
            onRenameNode: startDomNodeEditing,
            onDuplicateNode: handleNodeDuplicate,
            onDeleteNode: handleNodeDelete
          }
        ) : null
      ),
      isEditing: domNodeEditing,
      onEdit: handleNameSave,
      suggestedNewItemName: node.name,
      onCancel: stopDomNodeEditing,
      validateItemName: validateEditableNodeName,
      ...other
    }
  );
}
function RecursiveSubTree({ dom, root }) {
  const { children = [], renderItem = [] } = React80.useMemo(
    () => appDom24.getChildNodes(dom, root),
    [dom, root]
  );
  if (children.length > 0) {
    return /* @__PURE__ */ React80.createElement(CustomTreeItem, { itemId: root.id, node: root }, children.map((childNode) => /* @__PURE__ */ React80.createElement(RecursiveSubTree, { key: childNode.id, dom, root: childNode })));
  }
  if (renderItem.length > 0) {
    return /* @__PURE__ */ React80.createElement(
      CustomTreeItem,
      {
        itemId: root.id,
        node: root,
        label: /* @__PURE__ */ React80.createElement(Typography17, { variant: "body2" }, root.name)
      },
      /* @__PURE__ */ React80.createElement(
        TreeItem2,
        {
          itemId: `${root.id}-renderItem`,
          label: /* @__PURE__ */ React80.createElement(Typography17, { variant: "body2" }, "renderItem")
        },
        renderItem.map((childNode) => /* @__PURE__ */ React80.createElement(RecursiveSubTree, { key: childNode.id, dom, root: childNode }))
      )
    );
  }
  return /* @__PURE__ */ React80.createElement(CustomTreeItem, { itemId: root.id, node: root });
}
function HierarchyExplorer() {
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const [expandedDomNodeIds, setExpandedDomNodeIds] = React80.useState([]);
  const currentPageNode = currentView?.name ? appDom24.getPageByName(dom, currentView.name) : null;
  const selectedDomNodeId = currentView?.selectedNodeId;
  const selectedNodeAncestorIds = React80.useMemo(() => {
    if (!selectedDomNodeId) {
      return [];
    }
    const selectedNode = appDom24.getMaybeNode(dom, selectedDomNodeId);
    if (selectedNode) {
      return appDom24.getAncestors(dom, selectedNode).map((node) => node.id);
    }
    return [];
  }, [dom, selectedDomNodeId]);
  const { children: rootChildren = [] } = React80.useMemo(() => {
    if (!currentPageNode) {
      return { children: [] };
    }
    return appDom24.getChildNodes(dom, currentPageNode);
  }, [dom, currentPageNode]);
  const handleNodeSelect = React80.useCallback(
    (event, itemIds) => {
      if (!itemIds) {
        return;
      }
      appStateApi.selectNode(itemIds);
    },
    [appStateApi]
  );
  const handleNodeFocus = React80.useCallback(
    (event, nodeId) => {
      appStateApi.hoverNode(nodeId);
    },
    [appStateApi]
  );
  const handleNodeToggle = React80.useCallback(
    (event, nodeIds) => {
      setExpandedDomNodeIds(nodeIds);
    },
    [setExpandedDomNodeIds]
  );
  const deleteNode = React80.useCallback(() => {
    if (!selectedDomNodeId) {
      return;
    }
    appStateApi.update(
      (draft) => {
        const toRemove = appDom24.getMaybeNode(dom, selectedDomNodeId);
        if (toRemove && appDom24.isElement(toRemove)) {
          draft = removePageLayoutNode(draft, toRemove);
        }
        return draft;
      },
      {
        ...currentView,
        selectedNodeId: null
      }
    );
  }, [selectedDomNodeId, appStateApi, currentView, dom]);
  const handleKeyDown = React80.useCallback(
    (event) => {
      if (event.key === "Backspace") {
        deleteNode();
      }
    },
    [deleteNode]
  );
  const expandedDomNodeIdSet = React80.useMemo(() => {
    return /* @__PURE__ */ new Set([...selectedNodeAncestorIds, ...expandedDomNodeIds]);
  }, [selectedNodeAncestorIds, expandedDomNodeIds]);
  return /* @__PURE__ */ React80.createElement(React80.Fragment, null, /* @__PURE__ */ React80.createElement(ExplorerHeader, { headerText: "Page hierarchy" }), /* @__PURE__ */ React80.createElement(
    SimpleTreeView2,
    {
      "aria-label": "Page hierarchy explorer",
      expandedItems: Array.from(expandedDomNodeIdSet),
      selectedItems: selectedDomNodeId,
      onSelectedItemsChange: handleNodeSelect,
      onItemFocus: handleNodeFocus,
      onExpandedItemsChange: handleNodeToggle,
      onKeyDown: handleKeyDown,
      sx: {
        flexGrow: 1,
        maxWidth: 400,
        maxHeight: "85%",
        overflowY: "auto",
        scrollbarGutter: "stable"
      }
    },
    rootChildren.map((childNode) => /* @__PURE__ */ React80.createElement(RecursiveSubTree, { key: childNode.id, dom, root: childNode }))
  ));
}

// src/toolpad/AppOptions/index.tsx
import * as React82 from "react";
import { Divider as Divider8, ListItemIcon as ListItemIcon2, ListItemText as ListItemText2, Menu as Menu2, MenuItem as MenuItem8 } from "@mui/material";
import IconButton16 from "@mui/material/IconButton";
import MoreVertIcon3 from "@mui/icons-material/MoreVert";
import CodeIcon2 from "@mui/icons-material/Code";
import useBoolean4 from "@toolpad/utils/hooks/useBoolean";

// src/toolpad/AppOptions/AppExportDialog.tsx
import * as React81 from "react";
import { Button as Button11, Dialog as Dialog7, DialogTitle as DialogTitle7, DialogContent as DialogContent7, DialogActions as DialogActions7 } from "@mui/material";
function AppExportDialog({ open, onClose, dom }) {
  const dialogTitleId = React81.useId();
  return /* @__PURE__ */ React81.createElement(Dialog7, { "aria-labelledby": dialogTitleId, fullWidth: true, maxWidth: "sm", open, onClose }, /* @__PURE__ */ React81.createElement(DialogTitle7, { id: dialogTitleId }, "Application DOM"), /* @__PURE__ */ React81.createElement(DialogContent7, { sx: { position: "relative", display: "flex", alignItems: "stretch" } }, /* @__PURE__ */ React81.createElement(JsonView, { sx: { flex: 1 }, copyToClipboard: true, src: dom, expandPaths: [], expandLevel: 5 })), /* @__PURE__ */ React81.createElement(DialogActions7, null, /* @__PURE__ */ React81.createElement(Button11, { onClick: onClose }, "Close")));
}
var AppExportDialog_default = AppExportDialog;

// src/toolpad/AppOptions/index.tsx
function AppOptions({ dom }) {
  const { buttonProps, menuProps, onMenuClose } = useMenu();
  const {
    setTrue: handleOpenAppExport,
    setFalse: handleCloseAppExport,
    value: appExportOpen
  } = useBoolean4(false);
  const handleAppExportClick = React82.useCallback(() => {
    onMenuClose();
    handleOpenAppExport();
  }, [handleOpenAppExport, onMenuClose]);
  return /* @__PURE__ */ React82.createElement(React82.Fragment, null, /* @__PURE__ */ React82.createElement(IconButton16, { ...buttonProps, "aria-label": "Application menu" }, /* @__PURE__ */ React82.createElement(MoreVertIcon3, null)), /* @__PURE__ */ React82.createElement(Menu2, { ...menuProps }, /* @__PURE__ */ React82.createElement(Divider8, null), dom ? /* @__PURE__ */ React82.createElement(MenuItem8, { onClick: handleAppExportClick }, /* @__PURE__ */ React82.createElement(ListItemIcon2, null, /* @__PURE__ */ React82.createElement(CodeIcon2, null)), /* @__PURE__ */ React82.createElement(ListItemText2, null, "View DOM")) : null), dom ? /* @__PURE__ */ React82.createElement(AppExportDialog_default, { open: appExportOpen, onClose: handleCloseAppExport, dom }) : null);
}
var AppOptions_default = AppOptions;

// src/toolpad/AppEditor/PageEditor/QueriesExplorer/index.tsx
import * as React83 from "react";
import clsx7 from "clsx";
import invariant12 from "invariant";
import {
  styled as styled38,
  Box as Box24,
  Button as Button12,
  IconButton as IconButton17,
  Typography as Typography18,
  Popover as Popover3,
  Stack as Stack16,
  Paper,
  Link as Link9
} from "@mui/material";
import { SimpleTreeView as SimpleTreeView3, treeItemClasses as treeItemClasses3 } from "@mui/x-tree-view";
import AddIcon4 from "@mui/icons-material/Add";
import MoreVertIcon4 from "@mui/icons-material/MoreVert";
import useBoolean5 from "@toolpad/utils/hooks/useBoolean";
import * as appDom25 from "@toolpad/studio-runtime/appDom";
var classes9 = {
  treeItemMenuButton: "Toolpad__QueryListItem",
  treeItemMenuOpen: "Toolpad__QueryListItemMenuOpen"
};
var StyledTreeItem2 = styled38(EditableTreeItem)({
  [`& .${classes9.treeItemMenuButton}`]: {
    visibility: "hidden"
  },
  [`
  & .${treeItemClasses3.content}:hover .${classes9.treeItemMenuButton},
      & .${classes9.treeItemMenuOpen}
    `]: {
    visibility: "visible"
  }
});
function DataTreeItem(props) {
  const {
    itemId,
    labelText,
    labelTextSx,
    labelIconSx,
    labelIconId,
    onCreate,
    onSelectNode,
    onDeleteNode,
    onDuplicateNode,
    onRenameNode,
    createLabelText,
    deleteLabelText = "Delete",
    duplicateLabelText = "Duplicate",
    renameLabelText = "Rename",
    toolpadNodeId,
    validateItemName,
    ...other
  } = props;
  const { value: isEditing, setTrue: startEditing, setFalse: stopEditing } = useBoolean5(false);
  const handleRenameConfirm = React83.useCallback(
    (updatedName) => {
      if (onRenameNode) {
        onRenameNode(itemId, updatedName);
        stopEditing();
      }
    },
    [itemId, onRenameNode, stopEditing]
  );
  const validateEditableQueryName = React83.useCallback(
    (newName) => {
      if (newName !== labelText && validateItemName) {
        return validateItemName(newName);
      }
      return { isValid: true };
    },
    [labelText, validateItemName]
  );
  const handleClick = React83.useCallback(() => {
    invariant12(toolpadNodeId, "DataTreeItem should only be used for nodes with a toolpadNodeId");
    onSelectNode?.(toolpadNodeId);
  }, [onSelectNode, toolpadNodeId]);
  const queryCreationMode = React83.useMemo(() => {
    if (props.itemId === ":query") {
      return "query";
    }
    if (props.itemId === ":mutation") {
      return "mutation";
    }
    return void 0;
  }, [props.itemId]);
  return /* @__PURE__ */ React83.createElement(
    StyledTreeItem2,
    {
      itemId,
      labelText,
      renderLabel: (children) => /* @__PURE__ */ React83.createElement(Box24, { sx: { display: "flex", alignItems: "center" }, onClick: handleClick }, /* @__PURE__ */ React83.createElement(QueryIcon, { id: labelIconId || "query", sx: { fontSize: 24, my: 0, ...labelIconSx } }), children, onCreate ? /* @__PURE__ */ React83.createElement(
        IconButton17,
        {
          "aria-label": createLabelText,
          onClick: (event) => {
            onCreate(event, queryCreationMode);
          },
          size: "small"
        },
        /* @__PURE__ */ React83.createElement(AddIcon4, { fontSize: "inherit" })
      ) : null, toolpadNodeId ? /* @__PURE__ */ React83.createElement(
        NodeMenu,
        {
          renderButton: ({ buttonProps, menuProps }) => /* @__PURE__ */ React83.createElement(
            IconButton17,
            {
              className: clsx7(classes9.treeItemMenuButton, {
                [classes9.treeItemMenuOpen]: menuProps.open
              }),
              "aria-label": "Open hierarchy menu",
              size: "small",
              ...buttonProps
            },
            /* @__PURE__ */ React83.createElement(MoreVertIcon4, { fontSize: "inherit" })
          ),
          nodeId: toolpadNodeId,
          deleteLabelText,
          duplicateLabelText,
          renameLabelText,
          onRenameNode: startEditing,
          onDeleteNode,
          onDuplicateNode
        }
      ) : null),
      suggestedNewItemName: labelText,
      onCancel: stopEditing,
      isEditing,
      ...onRenameNode ? { onEdit: handleRenameConfirm } : {},
      validateItemName: validateEditableQueryName,
      ...other
    }
  );
}
function CreatePopover({
  anchorEl,
  createPopoverOpen,
  handleCreateNode,
  handleCreateClose,
  createMode
}) {
  return /* @__PURE__ */ React83.createElement(
    Popover3,
    {
      open: createPopoverOpen,
      anchorEl,
      onClose: handleCreateClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React83.createElement(Paper, { sx: { p: 2, maxWidth: 500 } }, /* @__PURE__ */ React83.createElement(Typography18, { variant: "body2", sx: { mb: 2, textAlign: "center" } }, createMode === "query" ? /* @__PURE__ */ React83.createElement(React83.Fragment, null, "Make backend data available as state on the page. Read more in the", " ", /* @__PURE__ */ React83.createElement(
      Link9,
      {
        href: "https://mui.com/toolpad/studio/concepts/queries/#queries",
        target: "_blank",
        rel: "noopener"
      },
      "docs."
    )) : /* @__PURE__ */ React83.createElement(React83.Fragment, null, "Run an action on the page. Read more in the", " ", /* @__PURE__ */ React83.createElement(
      Link9,
      {
        href: "https://mui.com/toolpad/studio/concepts/queries/#actions",
        target: "_blank",
        rel: "noopener"
      },
      "docs."
    ))), /* @__PURE__ */ React83.createElement(Stack16, { direction: "row", gap: 1, display: "grid", gridTemplateColumns: "1fr 1fr" }, Object.keys(client_default3).map((dataSourceId) => {
      const dataSource3 = client_default3[dataSourceId];
      return /* @__PURE__ */ React83.createElement(
        Button12,
        {
          key: dataSourceId,
          sx: { minHeight: 50, minWidth: 150 },
          variant: "outlined",
          onClick: handleCreateNode(dataSourceId)
        },
        /* @__PURE__ */ React83.createElement(QueryIcon, { id: dataSourceId, sx: { fontSize: 28 } }),
        " ",
        dataSource3?.displayName || dataSourceId
      );
    })))
  );
}
function Explorer({ nodes, setAnchorEl, nodeName, headerText }) {
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const currentPageName = currentView.name;
  const handleQuerySelect = React83.useCallback(
    (selectedQueryId) => {
      appStateApi.openQueryTab(selectedQueryId);
    },
    [appStateApi]
  );
  const handleCreateClick = React83.useCallback(
    (event) => {
      event.stopPropagation();
      setAnchorEl(event.currentTarget);
    },
    [setAnchorEl]
  );
  const handleDeleteNode = React83.useCallback(
    (selectedQueryId) => {
      const selectedQueryTabIndex = currentView.queryPanel?.queryTabs?.findIndex(
        (tab) => tab.meta?.id === selectedQueryId
      );
      appStateApi.closeQueryTab(selectedQueryId, selectedQueryTabIndex, true);
    },
    [appStateApi, currentView]
  );
  const existingNames = React83.useMemo(() => {
    if (!currentPageName) {
      return void 0;
    }
    const currentPageNode = appDom25.getPageByName(dom, currentPageName);
    if (!currentPageNode) {
      return void 0;
    }
    return appDom25.getExistingNamesForChildren(dom, currentPageNode);
  }, [currentPageName, dom]);
  const handleDuplicateNode = React83.useCallback(
    (nodeId) => {
      const node = appDom25.getNode(dom, nodeId, "query");
      invariant12(
        currentPageName,
        "handleDuplicateNode should only be used for queries, which should always belong to a page"
      );
      const currentPageNode = appDom25.getPageByName(dom, currentPageName);
      const newName = appDom25.proposeName(node.name, existingNames);
      const copy = appDom25.createNode(dom, "query", { ...node, name: newName });
      if (!currentPageNode) {
        return;
      }
      appStateApi.update((draft) => appDom25.addNode(draft, copy, currentPageNode, "queries"), {
        kind: "page",
        name: currentPageName,
        view: { kind: "query", nodeId: copy.id }
      });
    },
    [dom, currentPageName, existingNames, appStateApi]
  );
  const validateName = React83.useCallback(
    (queryName) => {
      if (!existingNames) {
        return {
          isValid: true
        };
      }
      const validationErrorMessage = appDom25.validateNodeName(queryName, existingNames, "query");
      return {
        isValid: !validationErrorMessage,
        ...validationErrorMessage ? { errorMessage: validationErrorMessage } : {}
      };
    },
    [existingNames]
  );
  const handleRenameNode = React83.useCallback(
    (nodeId, updatedName) => {
      const node = appDom25.getNode(dom, nodeId, "query");
      appStateApi.update((draft) => appDom25.setNodeName(draft, node, updatedName), {
        ...currentView,
        queryPanel: {
          ...currentView.queryPanel,
          queryTabs: currentView.queryPanel?.queryTabs?.map((tab) => {
            if (tab?.meta?.id === nodeId && tab.draft && tab.saved) {
              const updatedNode = { ...tab.draft, name: updatedName };
              return {
                ...tab,
                meta: {
                  ...tab.meta,
                  name: updatedName
                },
                draft: updatedNode,
                saved: updatedNode
              };
            }
            return tab;
          })
        }
      });
    },
    [dom, appStateApi, currentView]
  );
  return /* @__PURE__ */ React83.createElement(Stack16, { "data-testid": `${nodeName}-explorer`, sx: { height: "100%", width: "100%" } }, /* @__PURE__ */ React83.createElement(
    ExplorerHeader,
    {
      headerIcon: /* @__PURE__ */ React83.createElement(QueryIcon, { mode: nodeName }),
      headerText,
      onCreate: handleCreateClick,
      createLabelText: `Create new ${nodeName}`
    }
  ), /* @__PURE__ */ React83.createElement(
    SimpleTreeView3,
    {
      "aria-label": `${nodeName} explorer`,
      defaultExpandedItems: [`:queries`],
      selectedItems: currentView.kind === "page" && currentView.view?.kind === "query" ? currentView.view.nodeId : "",
      sx: {
        flexGrow: 1,
        maxWidth: 400,
        overflowY: "auto",
        scrollbarGutter: "stable"
      }
    },
    nodes.map((node) => /* @__PURE__ */ React83.createElement(
      DataTreeItem,
      {
        key: node.id,
        itemId: node.id,
        toolpadNodeId: node.id,
        "aria-level": 1,
        "aria-label": node.name,
        labelText: node.name,
        labelTextSx: { fontSize: 13 },
        labelIconId: node.attributes?.dataSource,
        onDuplicateNode: handleDuplicateNode,
        onDeleteNode: handleDeleteNode,
        onSelectNode: handleQuerySelect,
        onRenameNode: handleRenameNode,
        validateItemName: validateName
      }
    ))
  ));
}
function QueriesExplorer() {
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const currentPageName = currentView.name;
  const queryNodes = React83.useMemo(() => {
    if (!currentPageName) {
      return [];
    }
    if (currentPageName) {
      const currentPageNode = appDom25.getPageByName(dom, currentPageName);
      if (currentPageNode) {
        return appDom25.getChildNodes(dom, currentPageNode).queries ?? [];
      }
    }
    return [];
  }, [currentPageName, dom]);
  const queries = React83.useMemo(() => {
    return queryNodes.filter(
      (query) => query.attributes?.mode === "query" || !query.attributes?.mode
    );
  }, [queryNodes]);
  const [anchorEl, setAnchorEl] = React83.useState(null);
  const createPopoverOpen = Boolean(anchorEl);
  const handleCreateClose = () => {
    setAnchorEl(null);
  };
  const handleCreateNode = React83.useCallback(
    (dataSourceId) => () => {
      const dataSource3 = client_default3[dataSourceId];
      invariant12(dataSource3, `Selected non-existing dataSource "${dataSourceId}"`);
      invariant12(
        currentPageName,
        "handleCreateNode should only be used for queries, which should always belong to a page"
      );
      appStateApi.createQueryTab(dataSource3, dataSourceId, "query");
      setAnchorEl(null);
    },
    [currentPageName, appStateApi]
  );
  return /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement(Explorer, { nodes: queries, setAnchorEl, headerText: "Queries", nodeName: "query" }), /* @__PURE__ */ React83.createElement(
    CreatePopover,
    {
      anchorEl,
      createPopoverOpen,
      handleCreateNode,
      handleCreateClose,
      createMode: "query"
    }
  ));
}
function ActionsExplorer() {
  const { dom, currentView } = useAppState();
  const appStateApi = useAppStateApi();
  const currentPageName = currentView.name;
  const queryNodes = React83.useMemo(() => {
    if (!currentPageName) {
      return [];
    }
    if (currentPageName) {
      const currentPageNode = appDom25.getPageByName(dom, currentPageName);
      if (currentPageNode) {
        return appDom25.getChildNodes(dom, currentPageNode).queries ?? [];
      }
    }
    return [];
  }, [currentPageName, dom]);
  const actions = React83.useMemo(() => {
    return queryNodes.filter((query) => query.attributes?.mode === "mutation");
  }, [queryNodes]);
  const [anchorEl, setAnchorEl] = React83.useState(null);
  const createPopoverOpen = Boolean(anchorEl);
  const handleCreateClose = () => {
    setAnchorEl(null);
  };
  const handleCreateNode = React83.useCallback(
    (dataSourceId) => () => {
      const dataSource3 = client_default3[dataSourceId];
      invariant12(dataSource3, `Selected non-existing dataSource "${dataSourceId}"`);
      invariant12(
        currentPageName,
        "handleCreateNode should only be used for queries, which should always belong to a page"
      );
      appStateApi.createQueryTab(dataSource3, dataSourceId, "mutation");
      setAnchorEl(null);
    },
    [currentPageName, appStateApi]
  );
  return /* @__PURE__ */ React83.createElement(React83.Fragment, null, /* @__PURE__ */ React83.createElement(Explorer, { nodes: actions, setAnchorEl, headerText: "Actions", nodeName: "action" }), /* @__PURE__ */ React83.createElement(
    CreatePopover,
    {
      anchorEl,
      createPopoverOpen,
      handleCreateNode,
      handleCreateClose,
      createMode: "mutation"
    }
  ));
}

// src/toolpad/AppEditor/PagePanel.tsx
var PAGE_PANEL_WIDTH = 250;
var PagePanelRoot = styled39("div")({
  display: "flex",
  flexDirection: "column",
  width: PAGE_PANEL_WIDTH
});
function PagePanel({ className, sx }) {
  const project = useProject();
  const { dom, currentView } = useAppState();
  const currentPageNode = currentView?.name ? appDom26.getPageByName(dom, currentView.name) : null;
  return /* @__PURE__ */ React84.createElement(PagePanelRoot, { className, sx }, /* @__PURE__ */ React84.createElement(
    Box25,
    {
      sx: {
        pl: 2,
        pr: 1,
        py: 1,
        display: "flex",
        flexDirection: "row",
        justifyContent: "space-between",
        alignItems: "center"
      }
    },
    /* @__PURE__ */ React84.createElement(Typography19, { noWrap: true }, project.rootDir.split(/[/\\]/).pop()),
    /* @__PURE__ */ React84.createElement(AppOptions_default, { dom })
  ), /* @__PURE__ */ React84.createElement(Divider9, null), /* @__PURE__ */ React84.createElement(resizablePanels_exports.PanelGroup, { autoSaveId: "toolpad-page-panel", direction: "vertical" }, /* @__PURE__ */ React84.createElement(resizablePanels_exports.Panel, { id: "pages-explorer", order: 1, minSize: 10, defaultSize: 25 }, /* @__PURE__ */ React84.createElement(PagesExplorer, null)), currentPageNode ? /* @__PURE__ */ React84.createElement(React84.Fragment, null, /* @__PURE__ */ React84.createElement(PanelResizeHandle, null), /* @__PURE__ */ React84.createElement(resizablePanels_exports.Panel, { id: "hierarchy-explorer", order: 2, minSize: 10, defaultSize: 25, maxSize: 90 }, /* @__PURE__ */ React84.createElement(HierarchyExplorer, null)), /* @__PURE__ */ React84.createElement(PanelResizeHandle, null), /* @__PURE__ */ React84.createElement(resizablePanels_exports.Panel, { id: "queries-explorer", order: 3, minSize: 10, defaultSize: 25, maxSize: 90 }, /* @__PURE__ */ React84.createElement(QueriesExplorer, null)), /* @__PURE__ */ React84.createElement(PanelResizeHandle, null), /* @__PURE__ */ React84.createElement(resizablePanels_exports.Panel, { id: "actions-explorer", order: 4, minSize: 10, defaultSize: 25, maxSize: 90 }, /* @__PURE__ */ React84.createElement(ActionsExplorer, null))) : null));
}

// src/toolpad/propertyControls/Markdown.tsx
import {
  Box as Box26,
  Button as Button13,
  Dialog as Dialog8,
  DialogActions as DialogActions8,
  DialogContent as DialogContent8,
  DialogTitle as DialogTitle8,
  Skeleton as Skeleton4
} from "@mui/material";
import * as React85 from "react";
var MarkdownEditor = lazyComponent(() => import("./MarkdownEditor-X7TRCJOM.mjs"), {
  noSsr: true,
  fallback: /* @__PURE__ */ React85.createElement(Skeleton4, { variant: "rectangular", height: "100%" })
});
function MarkdownPropEditor({ propType, value, onChange }) {
  const [dialogOpen, setDialogOpen] = React85.useState(false);
  useShortcut({ key: "s", metaKey: true, disabled: !dialogOpen }, () => {
    setDialogOpen(false);
  });
  return /* @__PURE__ */ React85.createElement(React85.Fragment, null, /* @__PURE__ */ React85.createElement(PropertyControl, { propType }, /* @__PURE__ */ React85.createElement(Button13, { variant: "outlined", color: "inherit", fullWidth: true, onClick: () => setDialogOpen(true) }, "Edit Markdown")), /* @__PURE__ */ React85.createElement(Dialog8, { fullWidth: true, open: dialogOpen, onClose: () => setDialogOpen(false) }, /* @__PURE__ */ React85.createElement(DialogTitle8, null, "Edit Markdown"), /* @__PURE__ */ React85.createElement(DialogContent8, null, /* @__PURE__ */ React85.createElement(Box26, { sx: { height: 200 } }, /* @__PURE__ */ React85.createElement(MarkdownEditor, { value, onChange: (newValue = "") => onChange(newValue) }))), /* @__PURE__ */ React85.createElement(DialogActions8, null, /* @__PURE__ */ React85.createElement(Button13, { color: "inherit", variant: "text", onClick: () => setDialogOpen(false) }, "Done"))));
}
var Markdown_default = MarkdownPropEditor;

// src/toolpad/propertyControls/GridColumns.tsx
import {
  Box as Box27,
  Button as Button14,
  Checkbox as Checkbox5,
  FormControlLabel as FormControlLabel4,
  IconButton as IconButton18,
  List,
  ListItem,
  ListItemButton,
  ListItemText as ListItemText3,
  Menu as Menu3,
  MenuItem as MenuItem9,
  Popover as Popover4,
  Stack as Stack17,
  TextField as TextField19,
  Tooltip as Tooltip13,
  Typography as Typography20
} from "@mui/material";
import * as React87 from "react";
import AddIcon5 from "@mui/icons-material/Add";
import DeleteIcon5 from "@mui/icons-material/Delete";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import RefreshIcon from "@mui/icons-material/Refresh";
import {
  inferColumns
} from "@toolpad/studio-components";
import { generateUniqueString } from "@toolpad/utils/strings";
import { NumberFormatEditor } from "@toolpad/studio-runtime/numberFormat";
import { DateFormatEditor } from "@toolpad/studio-runtime/dateFormat";
import { useAppHost as useAppHost2 } from "@toolpad/studio-runtime";

// src/components/ToggleButtonSelect.tsx
import * as React86 from "react";
import FormControl from "@mui/material/FormControl";
import FormLabel from "@mui/material/FormLabel";
import ToggleButton3, { toggleButtonClasses } from "@mui/material/ToggleButton";
import ToggleButtonGroup3 from "@mui/material/ToggleButtonGroup";
import { styled as styled40 } from "@mui/material";
var PropControlToggleButtonGroup = styled40(
  ToggleButtonGroup3,
  {}
)(({ fullWidth }) => ({
  display: "flex",
  [`& .${toggleButtonClasses.root}`]: fullWidth ? {
    flex: 1
  } : {}
}));
function ToggleButtonSelect({
  options: options2,
  label,
  value,
  onChange,
  disabled,
  fullWidth
}) {
  const handleChange = React86.useCallback(
    (event, newValue) => {
      onChange?.(newValue);
    },
    [onChange]
  );
  return /* @__PURE__ */ React86.createElement(FormControl, null, /* @__PURE__ */ React86.createElement(FormLabel, null, label), /* @__PURE__ */ React86.createElement(
    PropControlToggleButtonGroup,
    {
      color: "primary",
      value,
      exclusive: true,
      onChange: handleChange,
      "aria-label": "Platform",
      disabled,
      fullWidth
    },
    options2?.map((option) => {
      const optionValue = typeof option === "string" ? option : option.value;
      const optionLabel = (typeof option === "string" ? option : option.label) || optionValue;
      return /* @__PURE__ */ React86.createElement(ToggleButton3, { key: optionValue, value: optionValue }, optionLabel);
    })
  ));
}
var ToggleButtonSelect_default = ToggleButtonSelect;

// src/toolpad/propertyControls/GridColumns.tsx
var COLUMN_TYPES = [
  "string",
  "number",
  "date",
  "dateTime",
  "boolean",
  "link",
  "image",
  "codeComponent"
];
var ALIGNMENTS = ["left", "right", "center"];
function useImmediateTextField(props) {
  const { value, onChange, error, helperText, required, onBlur, validate } = props;
  const createInputState = React87.useCallback(
    (rawInput) => {
      const input = String(rawInput);
      let inputError = null;
      if (required && !input) {
        inputError = "Input required";
      } else if (validate) {
        inputError = validate(input);
      }
      return { input, error: inputError };
    },
    [validate, required]
  );
  const [state, setState] = React87.useState(createInputState(value));
  React87.useEffect(() => {
    setState(createInputState(value));
  }, [value, createInputState]);
  return {
    ...props,
    value: state.input,
    error: !!state.error || error,
    helperText: state.error || helperText,
    required,
    onBlur: (event) => {
      if (state.input !== value) {
        setState(createInputState(value));
      }
      onBlur?.(event);
    },
    onChange: (event) => {
      const newState = createInputState(event.target.value);
      setState(newState);
      if (!newState.error) {
        onChange?.(event);
      }
    }
  };
}
function GridColumnEditor({
  disabled,
  value: editedColumn,
  onChange: handleColumnChange
}) {
  const toolpadComponents = useToolpadComponents();
  const codeComponents = React87.useMemo(() => {
    return Object.values(toolpadComponents).filter(Boolean).filter((definition) => !definition.builtIn);
  }, [toolpadComponents]);
  const fieldInput = useImmediateTextField({
    label: "field",
    disabled,
    required: true,
    value: editedColumn.field,
    onChange: (event) => {
      handleColumnChange({ ...editedColumn, field: event.target.value });
    }
  });
  const appHost = useAppHost2();
  const isProPlan = appHost.plan === "pro";
  return /* @__PURE__ */ React87.createElement(Stack17, { gap: 1, py: 1 }, /* @__PURE__ */ React87.createElement(TextField19, { ...fieldInput }), /* @__PURE__ */ React87.createElement(
    TextField19,
    {
      label: "header",
      value: editedColumn.headerName || "",
      disabled,
      onChange: (event) => handleColumnChange({
        ...editedColumn,
        headerName: event.target.value ? event.target.value : void 0
      })
    }
  ), /* @__PURE__ */ React87.createElement(
    TextField19,
    {
      select: true,
      fullWidth: true,
      label: "align",
      value: editedColumn.align ?? "",
      disabled,
      onChange: (event) => handleColumnChange({
        ...editedColumn,
        align: event.target.value || void 0
      })
    },
    ALIGNMENTS.map((alignment) => /* @__PURE__ */ React87.createElement(MenuItem9, { key: alignment, value: alignment }, alignment))
  ), /* @__PURE__ */ React87.createElement(
    TextField19,
    {
      label: "width",
      type: "number",
      value: editedColumn.width,
      disabled,
      onChange: (event) => handleColumnChange({ ...editedColumn, width: Number(event.target.value) })
    }
  ), /* @__PURE__ */ React87.createElement(
    TextField19,
    {
      select: true,
      fullWidth: true,
      label: "type",
      value: editedColumn.type ?? "",
      disabled,
      onChange: (event) => handleColumnChange({
        ...editedColumn,
        type: event.target.value,
        numberFormat: void 0
      })
    },
    COLUMN_TYPES.map((type) => /* @__PURE__ */ React87.createElement(MenuItem9, { key: type, value: type }, type))
  ), /* @__PURE__ */ React87.createElement(Box27, { sx: { ml: 1, pl: 1, borderLeft: 1, borderColor: "divider" } }, editedColumn.type === "number" ? /* @__PURE__ */ React87.createElement(
    NumberFormatEditor,
    {
      disabled,
      value: editedColumn.numberFormat,
      onChange: (numberFormat) => handleColumnChange({ ...editedColumn, numberFormat })
    }
  ) : null, editedColumn.type === "date" ? /* @__PURE__ */ React87.createElement(
    DateFormatEditor,
    {
      disabled,
      disableTimeFormat: true,
      value: editedColumn.dateFormat,
      onChange: (dateFormat) => {
        handleColumnChange({ ...editedColumn, dateFormat });
      }
    }
  ) : null, editedColumn.type === "dateTime" ? /* @__PURE__ */ React87.createElement(
    DateFormatEditor,
    {
      disabled,
      value: editedColumn.dateTimeFormat,
      onChange: (dateTimeFormat) => {
        handleColumnChange({ ...editedColumn, dateTimeFormat });
      }
    }
  ) : null, editedColumn.type === "codeComponent" ? /* @__PURE__ */ React87.createElement(
    TextField19,
    {
      select: true,
      required: true,
      fullWidth: true,
      label: "Custom component",
      value: editedColumn.codeComponent ?? "",
      disabled,
      error: !editedColumn.codeComponent,
      helperText: editedColumn.codeComponent ? void 0 : "Please select a component",
      onChange: (event) => handleColumnChange({
        ...editedColumn,
        codeComponent: event.target.value
      })
    },
    codeComponents.map(({ displayName }) => /* @__PURE__ */ React87.createElement(MenuItem9, { key: displayName, value: displayName }, displayName))
  ) : null), /* @__PURE__ */ React87.createElement(Tooltip13, { title: "Initial visibility of this column." }, /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.visible ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            visible: event.target.checked
          })
        }
      ),
      label: "Visible"
    }
  )), /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.sortable ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            sortable: event.target.checked
          })
        }
      ),
      label: "Sortable"
    }
  ), /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.filterable ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            filterable: event.target.checked
          })
        }
      ),
      label: "Filterable"
    }
  ), /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.editable ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            editable: event.target.checked
          })
        }
      ),
      label: "Editable"
    }
  ), isProPlan ? /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.groupable ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            groupable: event.target.checked
          })
        }
      ),
      label: "Groupable"
    }
  ), /* @__PURE__ */ React87.createElement(
    FormControlLabel4,
    {
      control: /* @__PURE__ */ React87.createElement(
        Checkbox5,
        {
          checked: editedColumn.aggregable ?? true,
          disabled,
          onChange: (event) => handleColumnChange({
            ...editedColumn,
            aggregable: event.target.checked
          })
        }
      ),
      label: "Aggregable"
    }
  ), /* @__PURE__ */ React87.createElement(
    ToggleButtonSelect_default,
    {
      options: ["left", "center", "right"],
      fullWidth: true,
      label: "Pinned",
      value: editedColumn.pin ?? "center",
      onChange: (pin) => handleColumnChange({ ...editedColumn, pin: pin === "center" ? void 0 : pin })
    }
  )) : /* @__PURE__ */ React87.createElement(Typography20, { variant: "body2" }, "Grouping/aggregation/pinning", /* @__PURE__ */ React87.createElement(
    UpgradeChip,
    {
      sx: { ml: 1 },
      url: "https://mui.com/toolpad/studio/components/data-grid/#grouping"
    }
  )));
}
function GridColumnsPropEditor({
  propType,
  label,
  nodeId,
  value = [],
  onChange,
  disabled
}) {
  const { nodeData } = usePageEditorState();
  const [editedIndex, setEditedIndex] = React87.useState(null);
  const editedColumn = typeof editedIndex === "number" ? value[editedIndex] : null;
  const [menuAnchorEl, setMenuAnchorEl] = React87.useState(null);
  const menuOpen = Boolean(menuAnchorEl);
  const handleMenuClick = (event) => {
    setMenuAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setMenuAnchorEl(null);
  };
  const gridNodeData = nodeId && nodeData[nodeId];
  const rawRows = gridNodeData && gridNodeData.rawRows;
  const inferredColumns = React87.useMemo(
    () => inferColumns(Array.isArray(rawRows) ? rawRows : []),
    [rawRows]
  );
  const columnSuggestions = React87.useMemo(() => {
    const existingFields = new Set(value.map(({ field }) => field));
    return inferredColumns.filter((column) => !existingFields.has(column.field));
  }, [inferredColumns, value]);
  const handleCreateColumn = React87.useCallback(
    (suggestion) => () => {
      const existingFields = new Set(value.map(({ field }) => field));
      const newFieldName = generateUniqueString(suggestion.field, existingFields);
      const newValue = [...value, { ...suggestion, field: newFieldName }];
      onChange(newValue);
      setEditedIndex(newValue.length - 1);
      handleClose();
    },
    [value, onChange]
  );
  const handleColumnItemClick = React87.useCallback(
    (index) => () => {
      setEditedIndex(index);
    },
    []
  );
  const handleColumnChange = React87.useCallback(
    (newValue) => {
      onChange(value.map((column, i) => i === editedIndex ? newValue : column));
    },
    [editedIndex, onChange, value]
  );
  const handleColumnDelete = React87.useCallback(
    (deletedIndex) => (event) => {
      event.stopPropagation();
      onChange(value.filter((column, i) => i !== deletedIndex));
    },
    [onChange, value]
  );
  const handleRecreateColumns = React87.useCallback(() => {
    if (inferredColumns.length > 0) {
      onChange(inferredColumns);
    }
  }, [inferredColumns, onChange]);
  const [anchorEl, setAnchorEl] = React87.useState(null);
  const handlePopoverClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handlePopoverClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const popoverIdValue = React87.useId();
  const popoverId = open ? popoverIdValue : void 0;
  React87.useEffect(() => {
    if (open) {
      setEditedIndex(null);
    }
  }, [open]);
  return /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(PropertyControl, { propType }, /* @__PURE__ */ React87.createElement(Button14, { "aria-describedby": popoverId, onClick: handlePopoverClick }, label)), /* @__PURE__ */ React87.createElement(
    Popover4,
    {
      id: popoverId,
      open,
      anchorEl,
      onClose: handlePopoverClose,
      anchorOrigin: {
        vertical: "center",
        horizontal: "left"
      },
      transformOrigin: {
        vertical: "center",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React87.createElement(Box27, { sx: { minWidth: 300, p: 2 }, "aria-label": "Column editor" }, editedColumn ? /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(IconButton18, { "aria-label": "Back", onClick: () => setEditedIndex(null) }, /* @__PURE__ */ React87.createElement(ArrowBackIcon, null)), /* @__PURE__ */ React87.createElement(
      GridColumnEditor,
      {
        value: editedColumn,
        onChange: handleColumnChange,
        disabled
      }
    )) : /* @__PURE__ */ React87.createElement(React87.Fragment, null, /* @__PURE__ */ React87.createElement(Tooltip13, { describeChild: true, title: "Recreate columns" }, /* @__PURE__ */ React87.createElement("span", null, /* @__PURE__ */ React87.createElement(
      IconButton18,
      {
        "aria-label": "Recreate columns",
        onClick: handleRecreateColumns,
        disabled: inferredColumns.length <= 0
      },
      /* @__PURE__ */ React87.createElement(RefreshIcon, null)
    ))), /* @__PURE__ */ React87.createElement(Tooltip13, { title: "Add column" }, /* @__PURE__ */ React87.createElement(IconButton18, { onClick: handleMenuClick, disabled }, /* @__PURE__ */ React87.createElement(AddIcon5, null))), /* @__PURE__ */ React87.createElement(
      Menu3,
      {
        id: "new-column-menu",
        anchorEl: menuAnchorEl,
        open: menuOpen,
        onClose: handleClose,
        MenuListProps: {
          "aria-labelledby": "basic-button"
        }
      },
      columnSuggestions.map((suggestion) => /* @__PURE__ */ React87.createElement(MenuItem9, { key: suggestion.field, onClick: handleCreateColumn(suggestion) }, suggestion.field)),
      /* @__PURE__ */ React87.createElement(MenuItem9, { onClick: handleCreateColumn({ field: "new" }) }, "New column")
    ), /* @__PURE__ */ React87.createElement(List, null, value.map((colDef, i) => {
      return /* @__PURE__ */ React87.createElement(
        ListItem,
        {
          key: colDef.field,
          disableGutters: true,
          onClick: handleColumnItemClick(i),
          secondaryAction: /* @__PURE__ */ React87.createElement(
            IconButton18,
            {
              "aria-label": "Remove column",
              edge: "end",
              onClick: handleColumnDelete(i)
            },
            /* @__PURE__ */ React87.createElement(DeleteIcon5, null)
          )
        },
        /* @__PURE__ */ React87.createElement(ListItemButton, null, /* @__PURE__ */ React87.createElement(ListItemText3, { primary: colDef.headerName || colDef.field }))
      );
    }))))
  ));
}
var GridColumns_default = GridColumnsPropEditor;

// src/toolpad/propertyControls/ToggleButtons.tsx
import {
  Box as Box28,
  ToggleButton as ToggleButton4,
  ToggleButtonGroup as ToggleButtonGroup4,
  Typography as Typography21,
  styled as styled41,
  toggleButtonClasses as toggleButtonClasses2
} from "@mui/material";
import * as React88 from "react";
var PropControlToggleButtonGroup2 = styled41(ToggleButtonGroup4)({
  display: "flex",
  [`& .${toggleButtonClasses2.root}`]: {
    flex: 1
  }
});
function SelectPropEditor2({ label, propType, value, onChange, disabled }) {
  const items = propType.type === "string" ? propType.enum ?? [] : [];
  const handleChange = React88.useCallback(
    (event, newValue) => {
      onChange(newValue || void 0);
    },
    [onChange]
  );
  const enumLabels = propType.type === "string" ? propType.enumLabels ?? {} : {};
  return /* @__PURE__ */ React88.createElement(PropertyControl, { propType }, /* @__PURE__ */ React88.createElement(Box28, { sx: { my: 0.5 } }, /* @__PURE__ */ React88.createElement(Typography21, { variant: "body2" }, label), /* @__PURE__ */ React88.createElement(
    PropControlToggleButtonGroup2,
    {
      color: "primary",
      value,
      exclusive: true,
      onChange: handleChange,
      "aria-label": "Platform",
      disabled
    },
    items.map((item) => /* @__PURE__ */ React88.createElement(ToggleButton4, { key: item, value: item }, enumLabels[item] || item))
  )));
}
var ToggleButtons_default = SelectPropEditor2;

// src/toolpad/propertyControls/SelectOptions.tsx
import {
  Button as Button15,
  Dialog as Dialog9,
  DialogActions as DialogActions9,
  DialogContent as DialogContent9,
  DialogTitle as DialogTitle9,
  IconButton as IconButton19,
  List as List2,
  ListItem as ListItem2,
  ListItemButton as ListItemButton2,
  ListItemText as ListItemText4,
  Stack as Stack18,
  TextField as TextField20
} from "@mui/material";
import * as React89 from "react";
import DeleteIcon6 from "@mui/icons-material/Delete";
import ArrowBackIcon2 from "@mui/icons-material/ArrowBack";
function SelectOptionsPropEditor({
  propType,
  label,
  value = [],
  onChange
}) {
  const [editOptionsDialogOpen, setEditOptionsDialogOpen] = React89.useState(false);
  const [editingIndex, setEditingIndex] = React89.useState(null);
  const [input, setInput] = React89.useState("");
  const editingOption = React89.useMemo(() => {
    if (typeof editingIndex === "number") {
      const option = value[editingIndex];
      if (typeof option === "string") {
        return {
          value: option,
          label: ""
        };
      }
      return option;
    }
    return null;
  }, [editingIndex, value]);
  const handleOptionTextInput = React89.useCallback(
    (event) => {
      if (event.key === "Enter") {
        onChange([...value, input]);
        setInput("");
      }
    },
    [input, onChange, value]
  );
  const handleOptionDelete = React89.useCallback(
    (deletedIndex) => (event) => {
      event.stopPropagation();
      onChange(value.filter((column, i) => i !== deletedIndex));
    },
    [onChange, value]
  );
  const handleDeleteAll = React89.useCallback(() => {
    onChange([]);
  }, [onChange]);
  const handleOptionItemClick = React89.useCallback(
    (index) => () => {
      setEditingIndex(index);
    },
    []
  );
  const handleOptionChange = React89.useCallback(
    (newOption) => {
      if (typeof newOption === "object") {
        if (!newOption.label) {
          newOption = newOption.value;
        }
      }
      onChange(value.map((option, i) => i === editingIndex ? newOption : option));
    },
    [editingIndex, onChange, value]
  );
  const handleEditOptionsDialogClose = React89.useCallback(() => {
    setEditingIndex(null);
    setEditOptionsDialogOpen(false);
  }, []);
  return /* @__PURE__ */ React89.createElement(React89.Fragment, null, /* @__PURE__ */ React89.createElement(PropertyControl, { propType }, /* @__PURE__ */ React89.createElement(
    Button15,
    {
      variant: "outlined",
      color: "inherit",
      fullWidth: true,
      onClick: () => {
        setEditOptionsDialogOpen(true);
      }
    },
    label
  )), /* @__PURE__ */ React89.createElement(
    Dialog9,
    {
      fullWidth: true,
      open: editOptionsDialogOpen,
      onClose: () => {
        setEditOptionsDialogOpen(false);
      }
    },
    editingOption ? /* @__PURE__ */ React89.createElement(React89.Fragment, null, /* @__PURE__ */ React89.createElement(DialogTitle9, null, /* @__PURE__ */ React89.createElement(IconButton19, { "aria-label": "Back", onClick: () => setEditingIndex(null) }, /* @__PURE__ */ React89.createElement(ArrowBackIcon2, null)), "Edit option \u201C", editingOption.value, "\u201D"), /* @__PURE__ */ React89.createElement(DialogContent9, null, /* @__PURE__ */ React89.createElement(Stack18, { gap: 1, py: 1 }, /* @__PURE__ */ React89.createElement(
      TextField20,
      {
        label: "Value",
        value: editingOption.value,
        onChange: (event) => {
          handleOptionChange({ ...editingOption, value: event.target.value });
        }
      }
    ), /* @__PURE__ */ React89.createElement(
      TextField20,
      {
        label: "Label",
        value: editingOption.label,
        onChange: (event) => {
          handleOptionChange({ ...editingOption, label: event.target.value });
        }
      }
    )))) : /* @__PURE__ */ React89.createElement(React89.Fragment, null, /* @__PURE__ */ React89.createElement(DialogTitle9, null, "Edit options", value.length > 0 ? /* @__PURE__ */ React89.createElement(
      Button15,
      {
        "aria-label": "Delete all options",
        variant: "text",
        color: "inherit",
        onClick: handleDeleteAll,
        sx: {
          position: "absolute",
          right: 16,
          top: 16
        }
      },
      "Delete All"
    ) : null), /* @__PURE__ */ React89.createElement(DialogContent9, null, value.length > 0 ? /* @__PURE__ */ React89.createElement(List2, null, value.map((option, i) => {
      return /* @__PURE__ */ React89.createElement(
        ListItem2,
        {
          key: i,
          disableGutters: true,
          onClick: handleOptionItemClick(i),
          secondaryAction: /* @__PURE__ */ React89.createElement(
            IconButton19,
            {
              "aria-label": "Delete option",
              edge: "end",
              onClick: handleOptionDelete(i)
            },
            /* @__PURE__ */ React89.createElement(DeleteIcon6, null)
          )
        },
        /* @__PURE__ */ React89.createElement(ListItemButton2, null, /* @__PURE__ */ React89.createElement(
          ListItemText4,
          {
            primary: typeof option === "string" ? option : option.value,
            secondary: typeof option === "object" ? `Label: "${option.label}"` : null
          }
        ))
      );
    })) : null, /* @__PURE__ */ React89.createElement(
      TextField20,
      {
        fullWidth: true,
        sx: { my: 1 },
        variant: "outlined",
        value: input,
        onChange: (event) => setInput(event.target.value),
        onKeyUp: handleOptionTextInput,
        label: "Add option",
        helperText: /* @__PURE__ */ React89.createElement("span", null, "Press ", /* @__PURE__ */ React89.createElement("kbd", null, "Enter"), " or ", /* @__PURE__ */ React89.createElement("kbd", null, "Return"), " to add")
      }
    ))),
    /* @__PURE__ */ React89.createElement(DialogActions9, null, /* @__PURE__ */ React89.createElement(Button15, { color: "inherit", variant: "text", onClick: handleEditOptionsDialogClose }, "Close"))
  ));
}
var SelectOptions_default = SelectOptionsPropEditor;

// src/toolpad/propertyControls/ChartData.tsx
import * as React91 from "react";
import {
  Autocomplete as Autocomplete4,
  Box as Box30,
  Button as Button16,
  IconButton as IconButton21,
  List as List3,
  ListItem as ListItem3,
  ListItemButton as ListItemButton3,
  ListItemText as ListItemText5,
  MenuItem as MenuItem10,
  Popover as Popover6,
  Stack as Stack19,
  TextField as TextField22,
  Typography as Typography22
} from "@mui/material";
import AddIcon6 from "@mui/icons-material/Add";
import { useBrowserJsRuntime as useBrowserJsRuntime4 } from "@toolpad/studio-runtime/jsBrowserRuntime";
import DeleteIcon7 from "@mui/icons-material/Delete";
import ContentCopyIcon3 from "@mui/icons-material/ContentCopy";
import ScatterPlotIcon from "@mui/icons-material/ScatterPlot";
import BarChartIcon from "@mui/icons-material/BarChart";
import ShowChartIcon from "@mui/icons-material/ShowChart";
import LegendToggleIcon from "@mui/icons-material/LegendToggle";
import { evaluateBindable as evaluateBindable2 } from "@toolpad/studio-runtime/jsRuntime";
import { blueberryTwilightPalette } from "@mui/x-charts/colorPalettes";
import { updateArray, remove } from "@toolpad/utils/immutability";
import * as appDom27 from "@toolpad/studio-runtime/appDom";

// src/components/ColorPicker.tsx
import { Box as Box29, IconButton as IconButton20, InputAdornment as InputAdornment6, Popover as Popover5, TextField as TextField21 } from "@mui/material";
import * as React90 from "react";
function ColorPickerIconButton({ label, value, onChange }) {
  const [anchorEl, setAnchorEl] = React90.useState(null);
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const id = React90.useId();
  return /* @__PURE__ */ React90.createElement(React90.Fragment, null, /* @__PURE__ */ React90.createElement(IconButton20, { "aria-label": "select color", edge: "end", onClick: handleClick }, /* @__PURE__ */ React90.createElement(
    Box29,
    {
      sx: {
        background: value,
        width: 24,
        height: 24,
        borderRadius: "50%",
        boxShadow: 1
      }
    }
  )), /* @__PURE__ */ React90.createElement(
    Popover5,
    {
      id: open ? id : void 0,
      open,
      anchorEl,
      onClose: handleClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React90.createElement(ColorTool_default, { sx: { m: 2 }, label, value, onChange })
  ));
}
function ColorPicker({ label, value, onChange }) {
  return /* @__PURE__ */ React90.createElement(
    TextField21,
    {
      label,
      value,
      onChange: (event) => onChange?.(event.target.value),
      slotProps: {
        input: {
          endAdornment: /* @__PURE__ */ React90.createElement(InputAdornment6, { position: "end" }, /* @__PURE__ */ React90.createElement(ColorPickerIconButton, { value, onChange, label }))
        }
      }
    }
  );
}

// src/toolpad/propertyControls/ChartData.tsx
var CHART_KIND_OPTIONS = [
  { kind: "line", icon: ShowChartIcon },
  { kind: "bar", icon: BarChartIcon },
  { kind: "area", icon: LegendToggleIcon },
  { kind: "scatter", icon: ScatterPlotIcon }
];
function ChartDataPropEditor({
  nodeId,
  propType,
  value = [],
  onChange
}) {
  const { dom } = useAppState();
  const domApi = useDomApi();
  const { pageState, bindings, globalScopeMeta } = usePageEditorState();
  const jsBrowserRuntime = useBrowserJsRuntime4();
  const appTheme = React91.useMemo(() => createToolpadAppTheme(dom), [dom]);
  const defaultPalette = blueberryTwilightPalette(appTheme.palette.mode);
  const [dataSeriesEditIndex, setDataSeriesEditIndex] = React91.useState(null);
  const [popoverAnchorElement, setPopoverAnchorElement] = React91.useState(null);
  const handleAddDataSeries = React91.useCallback(() => {
    const newDataSeriesCount = value.length + 1;
    const newDataSeriesLabel = `dataSeries${newDataSeriesCount}`;
    onChange([
      ...value,
      {
        label: newDataSeriesLabel,
        kind: "line",
        data: [],
        color: defaultPalette[(newDataSeriesCount - 1) % defaultPalette.length]
      }
    ]);
  }, [defaultPalette, onChange, value]);
  const previousDataSeriesCountRef = React91.useRef(value.length);
  React91.useEffect(() => {
    if (previousDataSeriesCountRef.current === 0 && value.length === 1) {
      setDataSeriesEditIndex(0);
      setPopoverAnchorElement(document.getElementById("data-series-button-1"));
    }
    previousDataSeriesCountRef.current = value.length;
  }, [value.length]);
  const handleDataSeriesClick = React91.useCallback(
    (index) => (event) => {
      setDataSeriesEditIndex(index);
      setPopoverAnchorElement(event.currentTarget);
    },
    []
  );
  const handleDuplicateDataSeries = React91.useCallback(
    (index) => () => {
      const newDataSeriesCount = value.length + 1;
      onChange([
        ...value.slice(0, index + 1),
        {
          ...value[index],
          color: defaultPalette[(newDataSeriesCount - 1) % defaultPalette.length]
        },
        ...value.slice(index + 1)
      ]);
    },
    [defaultPalette, onChange, value]
  );
  const handleRemoveDataSeries = React91.useCallback(
    (index) => () => {
      onChange(remove(value, index));
    },
    [onChange, value]
  );
  const popoverId = React91.useId();
  const isPopoverOpen = Boolean(popoverAnchorElement);
  const handlePopoverClose = React91.useCallback(() => {
    setPopoverAnchorElement(null);
  }, []);
  const updateDataSeriesProp = React91.useCallback(
    (draft, index, newValue, propName, defaultValue = "") => {
      const draftNode = nodeId ? appDom27.getMaybeNode(draft, nodeId) : null;
      if (draftNode) {
        const previousData = draftNode.props?.data || [];
        return appDom27.setNodeNamespacedProp(
          draft,
          draftNode,
          "props",
          "data",
          updateArray(
            previousData,
            {
              ...previousData[index],
              [propName]: newValue || defaultValue
            },
            index
          )
        );
      }
      return draft;
    },
    [nodeId]
  );
  const handleDataSeriesDataChange = React91.useCallback(
    (index) => (newValue) => {
      const previousDataSeries = value[index];
      domApi.update((draft) => {
        draft = updateDataSeriesProp(draft, index, newValue, "data", []);
        if (!previousDataSeries.xKey || !previousDataSeries.yKey) {
          const newDataResult = evaluateBindable2(jsBrowserRuntime, newValue, pageState).value || [];
          let inferredXKey;
          const keySuggestions = newDataResult.flatMap((dataSeriesPoint) => Object.keys(dataSeriesPoint)).filter((key, pointIndex, array) => array.indexOf(key) === pointIndex);
          if (!previousDataSeries.xKey) {
            inferredXKey = keySuggestions.find(
              (key) => newDataResult.every((dataSeriesPoint) => typeof dataSeriesPoint[key] === "string")
            ) || keySuggestions[0];
            draft = updateDataSeriesProp(draft, index, inferredXKey, "xKey");
          }
          if (!previousDataSeries.yKey) {
            const xKey = previousDataSeries.xKey || inferredXKey;
            const inferredYKey = xKey && xKey === keySuggestions[0] ? keySuggestions[1] : keySuggestions[0];
            draft = updateDataSeriesProp(draft, index, inferredYKey, "yKey");
          }
        }
        return draft;
      });
    },
    [domApi, jsBrowserRuntime, pageState, updateDataSeriesProp, value]
  );
  const handleDataSeriesTextInputPropChange = React91.useCallback(
    (index, propName) => (event) => {
      const newValue = event.target.value;
      domApi.update((draft) => updateDataSeriesProp(draft, index, newValue, propName));
    },
    [domApi, updateDataSeriesProp]
  );
  const handleDataSeriesAutocompletePropChange = React91.useCallback(
    (index, propName) => (event, newValue) => {
      domApi.update((draft) => updateDataSeriesProp(draft, index, newValue, propName));
    },
    [domApi, updateDataSeriesProp]
  );
  const handleDataSeriesColorChange = React91.useCallback(
    (index) => (newValue) => {
      domApi.update((draft) => updateDataSeriesProp(draft, index, newValue, "color"));
    },
    [domApi, updateDataSeriesProp]
  );
  const dataSeriesKeySuggestions = React91.useMemo(
    () => value.map((dataSeries) => {
      const dataResult = evaluateBindable2(jsBrowserRuntime, dataSeries.data, pageState).value || [];
      return Array.isArray(dataResult) ? dataResult.flatMap((dataSeriesPoint) => Object.keys(dataSeriesPoint)).filter((key, index, array) => array.indexOf(key) === index) : [];
    }),
    [jsBrowserRuntime, pageState, value]
  );
  const editDataSeries = dataSeriesEditIndex !== null ? value[dataSeriesEditIndex] : null;
  return /* @__PURE__ */ React91.createElement(React91.Fragment, null, /* @__PURE__ */ React91.createElement(PropertyControl, { propType }, /* @__PURE__ */ React91.createElement("div", null, /* @__PURE__ */ React91.createElement(List3, { sx: { mb: 1 } }, value.map((dataSeries, index) => {
    const { label } = dataSeries;
    return /* @__PURE__ */ React91.createElement(ListItem3, { key: index, disableGutters: true }, /* @__PURE__ */ React91.createElement(
      ListItemButton3,
      {
        id: `data-series-button-${index + 1}`,
        onClick: handleDataSeriesClick(index),
        "aria-describedby": popoverId
      },
      /* @__PURE__ */ React91.createElement(
        ListItemText5,
        {
          primary: label,
          primaryTypographyProps: {
            style: { overflow: "hidden", textOverflow: "ellipsis", maxWidth: 166 }
          }
        }
      )
    ), /* @__PURE__ */ React91.createElement(
      IconButton21,
      {
        "aria-label": "Duplicate data series",
        onClick: handleDuplicateDataSeries(index)
      },
      /* @__PURE__ */ React91.createElement(ContentCopyIcon3, null)
    ), /* @__PURE__ */ React91.createElement(
      IconButton21,
      {
        "aria-label": "Delete data series",
        onClick: handleRemoveDataSeries(index)
      },
      /* @__PURE__ */ React91.createElement(DeleteIcon7, null)
    ));
  })), /* @__PURE__ */ React91.createElement(
    Button16,
    {
      variant: "outlined",
      startIcon: /* @__PURE__ */ React91.createElement(AddIcon6, null),
      fullWidth: true,
      onClick: handleAddDataSeries
    },
    "Add data series"
  ))), /* @__PURE__ */ React91.createElement(
    Popover6,
    {
      id: popoverId,
      open: isPopoverOpen,
      anchorEl: popoverAnchorElement,
      onClose: handlePopoverClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "center"
      }
    },
    editDataSeries && dataSeriesEditIndex !== null ? /* @__PURE__ */ React91.createElement(Box30, { sx: { minWidth: 300, p: 2 } }, /* @__PURE__ */ React91.createElement(Typography22, { variant: "body1", sx: { mb: 1 } }, editDataSeries.label), /* @__PURE__ */ React91.createElement(Stack19, { gap: 1, py: 1 }, /* @__PURE__ */ React91.createElement(
      TextField22,
      {
        label: "label",
        value: editDataSeries?.label,
        onChange: handleDataSeriesTextInputPropChange(dataSeriesEditIndex, "label")
      }
    ), /* @__PURE__ */ React91.createElement(
      TextField22,
      {
        select: true,
        label: "kind",
        value: editDataSeries?.kind,
        onChange: handleDataSeriesTextInputPropChange(dataSeriesEditIndex, "kind")
      },
      CHART_KIND_OPTIONS.map((option) => /* @__PURE__ */ React91.createElement(MenuItem10, { key: option.kind, value: option.kind }, /* @__PURE__ */ React91.createElement(Stack19, { direction: "row", alignItems: "center" }, /* @__PURE__ */ React91.createElement(option.icon, null), /* @__PURE__ */ React91.createElement(ListItemText5, { sx: { ml: 1 } }, option.kind))))
    ), /* @__PURE__ */ React91.createElement(
      BindableEditor,
      {
        liveBinding: bindings[`${nodeId}.props.data[${dataSeriesEditIndex}].data`],
        globalScope: pageState,
        globalScopeMeta,
        label: "data",
        jsRuntime: jsBrowserRuntime,
        propType: { type: "array" },
        value: editDataSeries?.data ?? null,
        onChange: handleDataSeriesDataChange(dataSeriesEditIndex)
      }
    ), /* @__PURE__ */ React91.createElement(
      Autocomplete4,
      {
        freeSolo: true,
        options: dataSeriesKeySuggestions[dataSeriesEditIndex],
        value: editDataSeries?.xKey || "",
        onInputChange: handleDataSeriesAutocompletePropChange(dataSeriesEditIndex, "xKey"),
        renderInput: (params) => {
          const keyExists = !editDataSeries?.xKey || dataSeriesKeySuggestions[dataSeriesEditIndex].includes(editDataSeries.xKey);
          return /* @__PURE__ */ React91.createElement(
            TextField22,
            {
              ...params,
              label: "xKey",
              error: !keyExists,
              helperText: keyExists ? "" : "Property not present in data"
            }
          );
        }
      }
    ), /* @__PURE__ */ React91.createElement(
      Autocomplete4,
      {
        freeSolo: true,
        options: dataSeriesKeySuggestions[dataSeriesEditIndex],
        value: editDataSeries?.yKey || "",
        onInputChange: handleDataSeriesAutocompletePropChange(dataSeriesEditIndex, "yKey"),
        renderInput: (params) => {
          const keyExists = !editDataSeries?.yKey || dataSeriesKeySuggestions[dataSeriesEditIndex].includes(editDataSeries.yKey);
          return /* @__PURE__ */ React91.createElement(
            TextField22,
            {
              ...params,
              label: "yKey",
              error: !keyExists,
              helperText: keyExists ? "" : "Property not present in data"
            }
          );
        }
      }
    ), /* @__PURE__ */ React91.createElement(
      ColorPicker,
      {
        label: "color",
        value: editDataSeries?.color,
        onChange: handleDataSeriesColorChange(dataSeriesEditIndex)
      }
    ))) : null
  ));
}
var ChartData_default = ChartDataPropEditor;

// src/toolpad/propertyControls/RowIdFieldSelect.tsx
import * as React92 from "react";
function ColumnSelect({ propType, nodeId, ...props }) {
  const { bindings } = usePageEditorState();
  const { helperText } = propType;
  const columnsValue = nodeId && bindings[`${nodeId}.props.columns`];
  const definedColumns = columnsValue?.value;
  const newPropType = React92.useMemo(() => {
    const columnNames = definedColumns?.map((column) => column.field);
    return { type: "string", enum: columnNames, helperText };
  }, [helperText, definedColumns]);
  return /* @__PURE__ */ React92.createElement(select_default, { nodeId, ...props, propType: newPropType });
}
var RowIdFieldSelect_default = ColumnSelect;

// src/toolpad/propertyControls/HorizontalAlign.tsx
import * as React93 from "react";
import { ToggleButton as ToggleButton5, ToggleButtonGroup as ToggleButtonGroup5, Typography as Typography23 } from "@mui/material";
import AlignHorizontalLeftIcon from "@mui/icons-material/AlignHorizontalLeft";
import AlignHorizontalCenterIcon from "@mui/icons-material/AlignHorizontalCenter";
import AlignHorizontalRightIcon from "@mui/icons-material/AlignHorizontalRight";
function HorizontalAlignPropEditor({
  propType,
  label,
  value = "start",
  onChange,
  disabled
}) {
  const handleHorizontalAlign = (event, newHorizontalAlign) => {
    if (newHorizontalAlign) {
      onChange(newHorizontalAlign);
    }
  };
  return /* @__PURE__ */ React93.createElement(PropertyControl, { propType }, /* @__PURE__ */ React93.createElement("div", null, label ? /* @__PURE__ */ React93.createElement(Typography23, { variant: "body2" }, label, ":") : null, /* @__PURE__ */ React93.createElement(
    ToggleButtonGroup5,
    {
      exclusive: true,
      disabled,
      value,
      onChange: handleHorizontalAlign,
      "aria-label": "HorizontalAlign"
    },
    /* @__PURE__ */ React93.createElement(ToggleButton5, { value: "start", "aria-label": "start" }, /* @__PURE__ */ React93.createElement(AlignHorizontalLeftIcon, null)),
    /* @__PURE__ */ React93.createElement(ToggleButton5, { value: "center", "aria-label": "center" }, /* @__PURE__ */ React93.createElement(AlignHorizontalCenterIcon, null)),
    /* @__PURE__ */ React93.createElement(ToggleButton5, { value: "end", "aria-label": "end" }, /* @__PURE__ */ React93.createElement(AlignHorizontalRightIcon, null))
  )));
}
var HorizontalAlign_default = HorizontalAlignPropEditor;

// src/toolpad/propertyControls/VerticalAlign.tsx
import * as React94 from "react";
import { ToggleButton as ToggleButton6, ToggleButtonGroup as ToggleButtonGroup6, Typography as Typography24 } from "@mui/material";
import AlignverticalTopIcon from "@mui/icons-material/AlignVerticalTop";
import AlignVerticalCenterIcon from "@mui/icons-material/AlignVerticalCenter";
import AlignVerticalBottomIcon from "@mui/icons-material/AlignVerticalBottom";
function VerticalAlignPropEditor({
  propType,
  label,
  value = "start",
  onChange,
  disabled
}) {
  const VerticalAlign = (event, newVerticalAlign) => {
    if (newVerticalAlign) {
      onChange(newVerticalAlign);
    }
  };
  return /* @__PURE__ */ React94.createElement(PropertyControl, { propType }, /* @__PURE__ */ React94.createElement("div", null, label ? /* @__PURE__ */ React94.createElement(Typography24, { variant: "body2" }, label, ":") : null, /* @__PURE__ */ React94.createElement(
    ToggleButtonGroup6,
    {
      exclusive: true,
      disabled,
      value,
      onChange: VerticalAlign,
      "aria-label": "VerticalAlign"
    },
    /* @__PURE__ */ React94.createElement(ToggleButton6, { value: "start", "aria-label": "start" }, /* @__PURE__ */ React94.createElement(AlignverticalTopIcon, null)),
    /* @__PURE__ */ React94.createElement(ToggleButton6, { value: "center", "aria-label": "center" }, /* @__PURE__ */ React94.createElement(AlignVerticalCenterIcon, null)),
    /* @__PURE__ */ React94.createElement(ToggleButton6, { value: "end", "aria-label": "end" }, /* @__PURE__ */ React94.createElement(AlignVerticalBottomIcon, null))
  )));
}
var VerticalAlign_default = VerticalAlignPropEditor;

// src/toolpad/propertyControls/NumberFormat.tsx
import * as React95 from "react";
import { NumberFormatEditor as NumberFormatEditor2 } from "@toolpad/studio-runtime/numberFormat";
function NumberFormatPropEditor({
  propType,
  label,
  value,
  onChange,
  disabled
}) {
  return /* @__PURE__ */ React95.createElement(PropertyControl, { propType }, /* @__PURE__ */ React95.createElement("span", null, /* @__PURE__ */ React95.createElement(NumberFormatEditor2, { label, disabled, value, onChange })));
}
var NumberFormat_default = NumberFormatPropEditor;

// src/toolpad/propertyControls/ColorScale.tsx
import * as React96 from "react";
import {
  Box as Box31,
  Stack as Stack20,
  Popover as Popover7,
  Button as Button17,
  IconButton as IconButton22,
  List as List4,
  ListItem as ListItem4,
  Input as Input2,
  Typography as Typography25,
  styled as styled42
} from "@mui/material";
import AddIcon7 from "@mui/icons-material/Add";
import DeleteIcon8 from "@mui/icons-material/Delete";
var ListItemRoot = styled42(ListItem4)({
  gap: 1
});
var EMPTY_STOPS = [];
function ColorScaleListItem({
  valueLabel,
  value,
  onChange,
  onDelete,
  ...props
}) {
  return /* @__PURE__ */ React96.createElement(ListItemRoot, { ...props }, valueLabel ? /* @__PURE__ */ React96.createElement(Typography25, null, valueLabel) : /* @__PURE__ */ React96.createElement(React96.Fragment, null, ">", /* @__PURE__ */ React96.createElement(
    Input2,
    {
      type: "number",
      value: value?.value ?? 0,
      onChange: (event) => onChange?.({ ...value, value: Number(event.target.value) })
    }
  )), /* @__PURE__ */ React96.createElement(FlexFill_default, null), /* @__PURE__ */ React96.createElement(
    ColorPickerIconButton,
    {
      value: value?.color,
      onChange: (newValue) => {
        if (newValue) {
          onChange?.({ value: 0, ...value, color: newValue });
        }
      }
    }
  ), /* @__PURE__ */ React96.createElement(
    IconButton22,
    {
      onClick: onDelete,
      size: "small",
      sx: { visibility: onDelete ? "visible" : "hidden" }
    },
    /* @__PURE__ */ React96.createElement(DeleteIcon8, { fontSize: "inherit" })
  ));
}
function getOrderedIndices(stops) {
  return stops.map((stop, index) => {
    return { index, value: stop.value };
  }).sort((stop1, stop2) => stop1.value - stop2.value).map(({ index }) => index);
}
function ColorScaleEditor({ value, onChange }) {
  const stops = value?.stops ?? EMPTY_STOPS;
  const stopsOrder = React96.useMemo(() => getOrderedIndices(stops), [stops]);
  const handleRemoveStop = (toRemoveIndex) => (event) => {
    event.stopPropagation();
    const newStops = stops.filter((existingStop, index) => index !== toRemoveIndex);
    onChange({
      ...value,
      stops: newStops
    });
  };
  const handleStopChange = (toChangeIndex) => (newValue) => {
    onChange({
      ...value,
      stops: stops.map(
        (existingStop, index) => index === toChangeIndex ? newValue : existingStop
      )
    });
  };
  const handleAddStop = () => {
    const lastStop = stops.length > 0 ? stops[stops.length - 1] : void 0;
    const newStop = lastStop ? { ...lastStop, value: lastStop.value + 10 } : { value: 10 };
    onChange({
      ...value,
      stops: [...stops, newStop]
    });
  };
  return /* @__PURE__ */ React96.createElement(Stack20, { spacing: 1, direction: "row" }, /* @__PURE__ */ React96.createElement(
    Box31,
    {
      sx: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        gap: 1
      }
    },
    /* @__PURE__ */ React96.createElement(Box31, { sx: { maxHeight: 300, overflow: "auto" } }, /* @__PURE__ */ React96.createElement(List4, { sx: { width: 300 } }, /* @__PURE__ */ React96.createElement(
      ColorScaleListItem,
      {
        valueLabel: "Base color",
        value: value?.base ? { value: -Infinity, color: value.base } : void 0,
        onChange: ({ color }) => onChange({ ...value, base: color })
      }
    ), stopsOrder.map((index) => {
      const stop = stops[index];
      return /* @__PURE__ */ React96.createElement(
        ColorScaleListItem,
        {
          key: index,
          value: stop,
          onChange: handleStopChange(index),
          onDelete: handleRemoveStop(index)
        }
      );
    }))),
    /* @__PURE__ */ React96.createElement(Button17, { startIcon: /* @__PURE__ */ React96.createElement(AddIcon7, null), onClick: handleAddStop }, "Add Stop")
  ));
}
function ColorScaleControl({ label, propType, value, onChange }) {
  const [anchorEl, setAnchorEl] = React96.useState(null);
  const handlePopoverClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handlePopoverClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const popoverIdValue = React96.useId();
  const popoverId = open ? popoverIdValue : void 0;
  return /* @__PURE__ */ React96.createElement(React96.Fragment, null, /* @__PURE__ */ React96.createElement(PropertyControl, { propType }, /* @__PURE__ */ React96.createElement(Button17, { "aria-describedby": popoverId, onClick: handlePopoverClick }, label)), /* @__PURE__ */ React96.createElement(
    Popover7,
    {
      id: popoverId,
      open,
      anchorEl,
      onClose: handlePopoverClose,
      anchorOrigin: {
        vertical: "center",
        horizontal: "left"
      },
      transformOrigin: {
        vertical: "center",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React96.createElement(Box31, { sx: { minWidth: 300, p: 1 } }, /* @__PURE__ */ React96.createElement(
      ColorScaleEditor,
      {
        value,
        onChange: (newValue) => {
          onChange(newValue);
        }
      }
    ))
  ));
}

// src/toolpad/propertyControls/DataProviderSelector.tsx
import * as React97 from "react";
import {
  Autocomplete as Autocomplete5,
  TextField as TextField23,
  styled as styled43,
  autocompleteClasses as autocompleteClasses2,
  createFilterOptions,
  DialogContentText as DialogContentText2,
  DialogContent as DialogContent10,
  DialogTitle as DialogTitle10,
  Dialog as Dialog10,
  DialogActions as DialogActions10,
  Button as Button18,
  Box as Box32,
  FormControl as FormControl2,
  FormLabel as FormLabel2,
  RadioGroup,
  FormControlLabel as FormControlLabel5,
  Radio as Radio2,
  FormHelperText,
  Stack as Stack21
} from "@mui/material";
import { errorFrom as errorFrom4 } from "@toolpad/utils/errors";
import AddIcon8 from "@mui/icons-material/Add";
import { useMutation } from "@tanstack/react-query";
import { LoadingButton as LoadingButton6 } from "@mui/lab";
import { generateUniqueString as generateUniqueString2 } from "@toolpad/utils/strings";
var PAGINATION_DOCUMENTATION_URL = "https://mui.com/toolpad/studio/concepts/data-providers/#pagination";
function useFunctionsIntrospectQuery() {
  const projectApi = useProjectApi();
  return projectApi.useQuery("introspect", []);
}
function handleInputFocus2(event) {
  event.target.select();
}
var filter = createFilterOptions();
var classes10 = {
  editButton: "DataProviderSelector_editButton"
};
var DataProviderSelectorRoot = styled43("div")({
  [`& .${classes10.editButton}`]: {
    visibility: "hidden"
  },
  [`&:hover .${classes10.editButton}, & .${autocompleteClasses2.focused} .${classes10.editButton}`]: {
    visibility: "visible"
  }
});
function CreateNewDataProviderDialog({
  open,
  onClose,
  onCommit,
  existingNames,
  initialName
}) {
  const projectApi = useProjectApi();
  const [newName, setNewName] = React97.useState(initialName);
  React97.useEffect(() => {
    if (open) {
      setNewName(initialName);
    }
  }, [open, initialName]);
  const [options2, setOptions] = React97.useState({
    paginationMode: "index"
  });
  const createProviderMutation = useMutation({
    mutationKey: [newName, options2],
    mutationFn: () => projectApi.methods.createDataProvider(newName, options2),
    onSuccess: () => {
      onCommit(newName);
      onClose();
    }
  });
  const handleSubmit = (event) => {
    event.preventDefault();
    createProviderMutation.mutate();
  };
  const nameExists = existingNames.has(newName);
  const errorMessage2 = React97.useMemo(() => {
    if (nameExists) {
      return `Provider "${newName}" already exists`;
    }
    if (createProviderMutation.error) {
      return errorFrom4(createProviderMutation.error).message;
    }
    return null;
  }, [nameExists, createProviderMutation.error, newName]);
  const paginationModeSelectId = React97.useId();
  return /* @__PURE__ */ React97.createElement(Dialog10, { open, onClose }, /* @__PURE__ */ React97.createElement("form", { onSubmit: handleSubmit }, /* @__PURE__ */ React97.createElement(DialogTitle10, null, "Create a new data provider"), /* @__PURE__ */ React97.createElement(DialogContent10, null, /* @__PURE__ */ React97.createElement(DialogContentText2, null, "To create a new data provider please enter the name here."), /* @__PURE__ */ React97.createElement(Stack21, { sx: { gap: 2 } }, /* @__PURE__ */ React97.createElement(
    TextField23,
    {
      autoFocus: true,
      margin: "dense",
      fullWidth: true,
      value: newName,
      onChange: (event) => setNewName(event.target.value),
      label: "name",
      type: "text",
      onFocus: handleInputFocus2,
      required: true,
      error: !!errorMessage2,
      helperText: errorMessage2
    }
  ), /* @__PURE__ */ React97.createElement(FormControl2, null, /* @__PURE__ */ React97.createElement(FormLabel2, { id: paginationModeSelectId }, "Pagination mode"), /* @__PURE__ */ React97.createElement(
    RadioGroup,
    {
      row: true,
      "aria-labelledby": paginationModeSelectId,
      value: options2.paginationMode,
      onChange: (event) => setOptions((existing) => ({
        ...existing,
        paginationMode: event.target.value
      }))
    },
    /* @__PURE__ */ React97.createElement(FormControlLabel5, { value: "index", control: /* @__PURE__ */ React97.createElement(Radio2, null), label: "Index based" }),
    /* @__PURE__ */ React97.createElement(FormControlLabel5, { value: "cursor", control: /* @__PURE__ */ React97.createElement(Radio2, null), label: "Cursor based" })
  ), /* @__PURE__ */ React97.createElement(FormHelperText, null, "How is your backend data paginated? By index, or by cursor? Find more about pagination modes in the", " ", /* @__PURE__ */ React97.createElement("a", { href: PAGINATION_DOCUMENTATION_URL, target: "_blank", rel: "noopener" }, "documentation"), ".")))), /* @__PURE__ */ React97.createElement(DialogActions10, null, /* @__PURE__ */ React97.createElement(Button18, { onClick: onClose }, "Cancel"), /* @__PURE__ */ React97.createElement(
    LoadingButton6,
    {
      type: "submit",
      disabled: !newName || !!errorMessage2,
      loading: createProviderMutation.isPending
    },
    "Create"
  ))));
}
function getProviderNameFromFile(file) {
  return file.name.replace(/\.[^.]+$/, "");
}
function DataProviderSelector({ value, onChange }) {
  const { data: introspection, isLoading, error } = useFunctionsIntrospectQuery();
  const options2 = React97.useMemo(() => {
    return introspection?.files.flatMap(
      (file) => file.dataProviders?.filter((dataProvider) => dataProvider.name === "default").map((dataProvider) => ({
        kind: "option",
        file,
        dataProvider,
        displayName: getProviderNameFromFile(file)
      }))
    ) ?? [];
  }, [introspection]);
  const [fileName = null, providerName = null] = value ? value.split(":") : [];
  const autocompleteValue = React97.useMemo(() => {
    return options2.find(
      (option) => option.kind === "option" && option.file.name === fileName && option.dataProvider.name === providerName
    ) ?? null;
  }, [fileName, providerName, options2]);
  const errorMessage2 = error ? errorFrom4(error).message : void 0;
  const [dialogOpen, setDialogOpen] = React97.useState(false);
  const handleClose = () => {
    setDialogOpen(false);
  };
  const [dialogValue, setDialogValue] = React97.useState("");
  const existingNames = React97.useMemo(
    () => new Set(introspection?.files.map((file) => getProviderNameFromFile(file))),
    [introspection]
  );
  const handleCreateNewDataProvider = React97.useCallback((suggestion) => {
    setDialogValue(suggestion);
    setDialogOpen(true);
  }, []);
  return /* @__PURE__ */ React97.createElement(DataProviderSelectorRoot, null, /* @__PURE__ */ React97.createElement(
    CreateNewDataProviderDialog,
    {
      open: dialogOpen,
      onClose: handleClose,
      onCommit: (newName) => onChange(`${newName}.ts:default`),
      initialName: dialogValue,
      existingNames
    }
  ), /* @__PURE__ */ React97.createElement(
    Autocomplete5,
    {
      options: options2,
      getOptionLabel: (option) => {
        if (typeof option === "string" || option.kind === "create") {
          const inputValue = typeof option === "string" ? option : option.inputValue;
          return inputValue ? `Create data provider "${inputValue}"` : "Create new data provider";
        }
        return option.displayName;
      },
      renderInput: (params) => /* @__PURE__ */ React97.createElement(
        TextField23,
        {
          ...params,
          label: "Data Provider",
          placeholder: "Click to create or select a data provider",
          error: !!errorMessage2,
          helperText: errorMessage2,
          slotProps: {
            input: {
              ...params.InputProps,
              endAdornment: /* @__PURE__ */ React97.createElement(React97.Fragment, null, fileName ? /* @__PURE__ */ React97.createElement(
                OpenCodeEditorButton,
                {
                  className: classes10.editButton,
                  filePath: fileName,
                  fileType: "resource",
                  iconButton: true
                }
              ) : null, params.InputProps.endAdornment)
            },
            inputLabel: {
              shrink: true
            }
          }
        }
      ),
      filterOptions: (unfilteredOptions, params) => {
        const filtered = filter(unfilteredOptions, params);
        if (!existingNames.has(params.inputValue)) {
          filtered.push({
            kind: "create",
            inputValue: params.inputValue
          });
        }
        return filtered;
      },
      value: autocompleteValue,
      loading: isLoading,
      onChange: (event, newValue) => {
        if (typeof newValue === "string") {
          handleCreateNewDataProvider(
            newValue || generateUniqueString2("dataProvider", existingNames)
          );
        } else if (newValue && newValue.kind === "create") {
          handleCreateNewDataProvider(
            newValue.inputValue || generateUniqueString2("dataProvider", existingNames)
          );
        } else {
          onChange(newValue ? `${newValue.file.name}:${newValue.dataProvider.name}` : void 0);
        }
      },
      renderOption: (props, option, state, ownerState) => {
        const icon = option.kind === "create" ? /* @__PURE__ */ React97.createElement(AddIcon8, null) : void 0;
        return /* @__PURE__ */ React97.createElement("li", { ...props }, /* @__PURE__ */ React97.createElement(Box32, { sx: { display: "flex", flexDirection: "row", alignItems: "center", gap: 1 } }, icon, ownerState.getOptionLabel(option)));
      },
      selectOnFocus: true,
      clearOnBlur: true,
      freeSolo: true,
      sx: { flex: 1 }
    }
  ));
}
var DataProviderSelector_default = DataProviderSelector;

// src/toolpad/AppEditor/AppEditorShell.tsx
var PROP_TYPE_CONTROLS = {
  string: string_default,
  boolean: boolean_default,
  number: number_default,
  select: select_default,
  json: json_default,
  markdown: Markdown_default,
  event: event_default,
  GridColumns: GridColumns_default,
  ToggleButtons: ToggleButtons_default,
  SelectOptions: SelectOptions_default,
  ChartData: ChartData_default,
  RowIdFieldSelect: RowIdFieldSelect_default,
  HorizontalAlign: HorizontalAlign_default,
  VerticalAlign: VerticalAlign_default,
  NumberFormat: NumberFormat_default,
  ColorScale: ColorScaleControl,
  DataProviderSelector: DataProviderSelector_default
};
function AppEditorShell({ children }) {
  return /* @__PURE__ */ React98.createElement(PropControlsContextProvider, { value: PROP_TYPE_CONTROLS }, /* @__PURE__ */ React98.createElement(
    Box33,
    {
      sx: {
        display: "flex",
        flexDirection: "row",
        overflow: "hidden",
        height: "100%"
      }
    },
    /* @__PURE__ */ React98.createElement(
      PagePanel,
      {
        sx: {
          width: 250,
          borderRight: 1,
          borderColor: "divider"
        }
      }
    ),
    /* @__PURE__ */ React98.createElement(
      Box33,
      {
        sx: {
          flex: 1,
          overflow: "hidden",
          position: "relative"
        }
      },
      children
    )
  ));
}

// src/toolpad/AppEditor/NoPageFound.tsx
import { Grid as Grid4, Typography as Typography26, Button as Button20 } from "@mui/material";
import * as React100 from "react";
import useBoolean6 from "@toolpad/utils/hooks/useBoolean";

// src/toolpad/AppEditor/PagesExplorer/CreatePageNodeDialog.tsx
import {
  Button as Button19,
  Dialog as Dialog11,
  DialogActions as DialogActions11,
  DialogContent as DialogContent11,
  DialogTitle as DialogTitle11,
  TextField as TextField24
} from "@mui/material";
import * as React99 from "react";
import invariant13 from "invariant";
import useEventCallback5 from "@mui/utils/useEventCallback";
import * as appDom28 from "@toolpad/studio-runtime/appDom";
var DEFAULT_NAME2 = "page";
function CreatePageDialog({ open, onClose, ...props }) {
  const { dom } = useAppState();
  const appStateApi = useAppStateApi();
  const existingNames = React99.useMemo(
    () => appDom28.getExistingNamesForChildren(dom, appDom28.getApp(dom), "pages"),
    [dom]
  );
  const [name, setName] = React99.useState(appDom28.proposeName(DEFAULT_NAME2, existingNames));
  const handleReset = useEventCallback5(
    () => setName(appDom28.proposeName(DEFAULT_NAME2, existingNames))
  );
  React99.useEffect(() => {
    if (open) {
      handleReset();
    }
  }, [open, handleReset]);
  const inputErrorMsg = useNodeNameValidation(name, existingNames, "page");
  const isNameValid = !inputErrorMsg;
  const isFormValid = isNameValid;
  return /* @__PURE__ */ React99.createElement(Dialog11, { open, onClose, ...props }, /* @__PURE__ */ React99.createElement(
    DialogForm,
    {
      autoComplete: "off",
      onSubmit: (event) => {
        invariant13(isFormValid, "Invalid form should not be submitted when submit is disabled");
        event.preventDefault();
        const newNode = appDom28.createNode(dom, "page", {
          name,
          attributes: {
            title: name,
            display: "shell",
            authorization: {
              allowAll: true
            }
          }
        });
        const appNode = appDom28.getApp(dom);
        appStateApi.update((draft) => appDom28.addNode(draft, newNode, appNode, "pages"), {
          kind: "page",
          name: newNode.name
        });
        onClose();
      }
    },
    /* @__PURE__ */ React99.createElement(DialogTitle11, null, "Create a new Page"),
    /* @__PURE__ */ React99.createElement(DialogContent11, null, /* @__PURE__ */ React99.createElement(
      TextField24,
      {
        sx: { my: 1 },
        required: true,
        autoFocus: true,
        fullWidth: true,
        label: "name",
        value: name,
        onChange: (event) => setName(event.target.value),
        error: !isNameValid,
        helperText: inputErrorMsg
      }
    )),
    /* @__PURE__ */ React99.createElement(DialogActions11, null, /* @__PURE__ */ React99.createElement(Button19, { color: "inherit", variant: "text", onClick: onClose }, "Cancel"), /* @__PURE__ */ React99.createElement(Button19, { type: "submit", disabled: !isFormValid }, "Create"))
  ));
}

// src/toolpad/AppEditor/NoPageFound.tsx
function NoPageFound() {
  const {
    value: createPageDialogOpen,
    setTrue: handleCreatePageDialogOpen,
    setFalse: handleCreatepageDialogClose
  } = useBoolean6(false);
  return /* @__PURE__ */ React100.createElement(
    Grid4,
    {
      container: true,
      sx: { minHeight: "100%", m: 1 },
      spacing: 1,
      justifyContent: "center",
      alignItems: "center",
      direction: "column"
    },
    /* @__PURE__ */ React100.createElement(Grid4, { item: true }, /* @__PURE__ */ React100.createElement(Typography26, { variant: "h6" }, "No pages in this app.")),
    /* @__PURE__ */ React100.createElement(Grid4, { item: true }, /* @__PURE__ */ React100.createElement(Button20, { variant: "outlined", color: "inherit", onClick: handleCreatePageDialogOpen }, "Create new")),
    /* @__PURE__ */ React100.createElement(CreatePageDialog, { open: !!createPageDialogOpen, onClose: handleCreatepageDialogClose })
  );
}

// src/toolpad/AppEditor/index.tsx
var classes11 = {
  content: "Toolpad_Content",
  hierarchyPanel: "Toolpad_HierarchyPanel",
  editorPanel: "Toolpad_EditorPanel"
};
var EditorRoot2 = styled44("div")(({ theme }) => ({
  height: 1,
  minHeight: "100%",
  display: "flex",
  flexDirection: "column",
  overflow: "hidden",
  [`& .${classes11.content}`]: {
    flex: 1,
    display: "flex",
    flexDirection: "row",
    overflow: "hidden"
  },
  [`& .${classes11.hierarchyPanel}`]: {
    width: 250,
    borderRight: `1px solid ${theme.palette.divider}`
  },
  [`& .${classes11.editorPanel}`]: {
    flex: 1,
    overflow: "hidden"
  }
}));
function FileEditor() {
  const { currentView } = useAppState();
  const location = useLocation2();
  const navigate = useNavigate();
  React101.useEffect(() => {
    const newPathname = getPathnameFromView(currentView);
    if (newPathname !== location.pathname) {
      navigate({ pathname: newPathname }, { replace: true });
    }
  }, [currentView, location.pathname, navigate]);
  const currentViewContent = React101.useMemo(() => {
    switch (currentView.kind) {
      case "page": {
        if (currentView.name) {
          return /* @__PURE__ */ React101.createElement(PageEditor, { name: currentView.name });
        }
        return /* @__PURE__ */ React101.createElement(NoPageFound, null);
      }
      default:
        return /* @__PURE__ */ React101.createElement(NoPageFound, null);
    }
  }, [currentView.kind, currentView.name]);
  return /* @__PURE__ */ React101.createElement(AppEditorShell, null, currentViewContent);
}
function Editor2() {
  return /* @__PURE__ */ React101.createElement(EditorRoot2, null, /* @__PURE__ */ React101.createElement(FileEditor, null));
}

// src/ThemeContext.tsx
import * as React102 from "react";
import { ScopedCssBaseline } from "@mui/material";
import { ThemeProvider as MuiThemeProvider, createTheme as createTheme2 } from "@mui/material/styles";
import { deepmerge } from "@mui/utils";
import useMediaQuery from "@mui/material/useMediaQuery";
function usePreferredMode() {
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");
  return prefersDarkMode ? "dark" : "light";
}
function useThemeMode() {
  const [themeMode, setThemeMode] = useLocalStorageState(
    "toolpad-palette-mode",
    "system"
  );
  return { themeMode, setThemeMode };
}
function usePaletteMode() {
  const preferredMode = usePreferredMode();
  const { themeMode } = useThemeMode();
  return themeMode === "system" ? preferredMode : themeMode;
}
function ThemeProvider({ children }) {
  const paletteMode = usePaletteMode();
  const theme = React102.useMemo(() => {
    const brandingDesignTokens = getDesignTokens(paletteMode);
    let nextTheme = createTheme2({
      ...brandingDesignTokens,
      palette: {
        ...brandingDesignTokens.palette,
        mode: paletteMode
      }
    });
    nextTheme = deepmerge(nextTheme, getThemedComponents(nextTheme));
    return nextTheme;
  }, [paletteMode]);
  React102.useMemo(() => {
    let meta = document.querySelector("meta[name='theme-color']");
    if (!meta) {
      meta = document.createElement("meta");
      meta.name = "theme-color";
      document.head.appendChild(meta);
    }
    meta.setAttribute("content", getMetaThemeColor(paletteMode));
    meta.setAttribute("media", `(prefers-color-scheme: ${paletteMode})`);
  }, [paletteMode]);
  return /* @__PURE__ */ React102.createElement(MuiThemeProvider, { theme }, /* @__PURE__ */ React102.createElement(ScopedCssBaseline, { enableColorScheme: true }, children));
}

// src/toolpad/ToolpadShell/index.tsx
import * as React107 from "react";
import { Stack as Stack23, styled as styled46 } from "@mui/material";

// src/toolpad/ToolpadShell/Header/index.tsx
import * as React105 from "react";
import { AppBar, Box as Box35, Toolbar as Toolbar4, Tooltip as Tooltip16, Chip as Chip5, Link as Link10, useTheme as useTheme4 } from "@mui/material";

// src/toolpad/ToolpadShell/Header/UserFeedback/index.tsx
import * as React103 from "react";
import {
  Chip as Chip4,
  Divider as Divider10,
  ListItemText as ListItemText6,
  IconButton as IconButton23,
  Menu as Menu4,
  MenuItem as MenuItem11,
  Tooltip as Tooltip14,
  Button as Button21,
  Dialog as Dialog12,
  DialogActions as DialogActions12,
  DialogContent as DialogContent12,
  DialogContentText as DialogContentText3,
  DialogTitle as DialogTitle12,
  Box as Box34
} from "@mui/material";
import HelpOutlinedIcon from "@mui/icons-material/HelpOutlined";
import OpenInNewIcon2 from "@mui/icons-material/OpenInNew";
import invariant14 from "invariant";
import useBoolean7 from "@toolpad/utils/hooks/useBoolean";
var REPORT_BUG_URL = "https://github.com/mui/toolpad/issues/new/choose";
var FEATURE_REQUEST_URL = "https://github.com/mui/toolpad/issues";
var SUPPORT_URL = "https://mui.com/toolpad/studio/getting-started/support";
function CliCommandSnippet({ children }) {
  return /* @__PURE__ */ React103.createElement(
    Box34,
    {
      component: "pre",
      sx: {
        p: 1,
        backgroundColor: "background.paper",
        borderRadius: 1,
        border: 1,
        borderColor: "divider"
      }
    },
    children
  );
}
function FeedbackMenuItemLink({ href, children }) {
  return /* @__PURE__ */ React103.createElement(MenuItem11, { component: "a", target: "_blank", href }, /* @__PURE__ */ React103.createElement(ListItemText6, null, children), /* @__PURE__ */ React103.createElement(OpenInNewIcon2, { fontSize: "inherit", sx: { ml: 3, color: "text.secondary" } }));
}
function getUpgradeMessage(packageManager) {
  const pkgName = "@toolpad/studio";
  switch (packageManager) {
    case "yarn":
      return `yarn add ${pkgName}`;
    case "pnpm":
      return `pnpm add ${pkgName}`;
    default:
      return `npm install ${pkgName}`;
  }
}
function UserFeedback() {
  const { buttonProps, menuProps } = useMenu();
  const projectApi = useProjectApi();
  invariant14(process.env.TOOLPAD_VERSION, "Missing env var TOOLPAD_VERSION");
  invariant14(process.env.TOOLPAD_BUILD, "Missing env var TOOLPAD_BUILD");
  const { data: versionInfo } = projectApi.useQuery("getVersionInfo", [], {
    staleTime: VERSION_CHECK_INTERVAL
  });
  const {
    value: updateDialogOpen,
    setFalse: handleUpdateDialogClose,
    setTrue: handleUpdateDialogOpen
  } = useBoolean7(false);
  const updateAvailable = !!versionInfo?.updateAvailable;
  return /* @__PURE__ */ React103.createElement(React103.Fragment, null, /* @__PURE__ */ React103.createElement(Dialog12, { open: updateDialogOpen, onClose: handleUpdateDialogClose, maxWidth: "xs" }, /* @__PURE__ */ React103.createElement(DialogTitle12, null, "Update Toolpad"), /* @__PURE__ */ React103.createElement(DialogContent12, null, /* @__PURE__ */ React103.createElement(DialogContentText3, null, "A new Toolpad Studio version is available. To upgrade to the latest version, run:", /* @__PURE__ */ React103.createElement(CliCommandSnippet, null, getUpgradeMessage(versionInfo?.packageManager ?? null)))), /* @__PURE__ */ React103.createElement(DialogActions12, null, /* @__PURE__ */ React103.createElement(Button21, { onClick: handleUpdateDialogClose, autoFocus: true }, "Close"))), /* @__PURE__ */ React103.createElement(Tooltip14, { title: "Help and resources" }, /* @__PURE__ */ React103.createElement(IconButton23, { ...buttonProps, color: "primary" }, /* @__PURE__ */ React103.createElement(HelpOutlinedIcon, null))), /* @__PURE__ */ React103.createElement(Menu4, { ...menuProps }, /* @__PURE__ */ React103.createElement(FeedbackMenuItemLink, { href: DOCUMENTATION_URL }, "Documentation"), /* @__PURE__ */ React103.createElement(FeedbackMenuItemLink, { href: REPORT_BUG_URL }, "Report bug"), /* @__PURE__ */ React103.createElement(FeedbackMenuItemLink, { href: FEATURE_REQUEST_URL }, "Request or upvote feature"), /* @__PURE__ */ React103.createElement(FeedbackMenuItemLink, { href: SUPPORT_URL }, "Request support"), /* @__PURE__ */ React103.createElement(Divider10, null), /* @__PURE__ */ React103.createElement(
    MenuItem11,
    {
      disabled: !updateAvailable,
      onClick: handleUpdateDialogOpen,
      sx: { justifyContent: "space-between" }
    },
    "Version ",
    process.env.TOOLPAD_VERSION,
    updateAvailable ? /* @__PURE__ */ React103.createElement(Chip4, { size: "small", color: "error", variant: "outlined", label: "Update", clickable: true }) : null
  ), /* @__PURE__ */ React103.createElement(MenuItem11, { disabled: true }, "Build ", process.env.TOOLPAD_BUILD)));
}
var UserFeedback_default = UserFeedback;

// src/toolpad/ToolpadShell/Header/ThemeModeMenu.tsx
import * as React104 from "react";
import { IconButton as IconButton24, Menu as Menu5, MenuItem as MenuItem12, ListItemText as ListItemText7, ListItemIcon as ListItemIcon3, Tooltip as Tooltip15 } from "@mui/material";
import LightModeOutlined from "@mui/icons-material/LightMode";
import DarkModeOutlined from "@mui/icons-material/DarkMode";
import SettingsBrightnessOutlined from "@mui/icons-material/SettingsBrightnessOutlined";
var options = {
  light: {
    label: "Light",
    value: "light",
    icon: /* @__PURE__ */ React104.createElement(LightModeOutlined, null)
  },
  dark: {
    label: "Dark",
    value: "dark",
    icon: /* @__PURE__ */ React104.createElement(DarkModeOutlined, null)
  },
  system: {
    label: "System",
    value: "system",
    icon: /* @__PURE__ */ React104.createElement(SettingsBrightnessOutlined, null)
  }
};
function ThemeModeMenu({ mode, onChange }) {
  const { buttonProps, menuProps, onMenuClose } = useMenu();
  return /* @__PURE__ */ React104.createElement(React104.Fragment, null, /* @__PURE__ */ React104.createElement(Tooltip15, { title: "Change theme" }, /* @__PURE__ */ React104.createElement(IconButton24, { ...buttonProps, "aria-label": "Change theme", color: "primary" }, options[mode].icon)), /* @__PURE__ */ React104.createElement(Menu5, { ...menuProps }, Object.values(options).map((option) => /* @__PURE__ */ React104.createElement(
    MenuItem12,
    {
      key: option.value,
      selected: option.value === mode,
      onClick: (event) => {
        onChange(event, option.value);
        onMenuClose();
      }
    },
    /* @__PURE__ */ React104.createElement(ListItemIcon3, null, option.icon),
    /* @__PURE__ */ React104.createElement(ListItemText7, { primary: option.label })
  ))));
}
var ThemeModeMenu_default = ThemeModeMenu;

// src/toolpad/ToolpadShell/Header/index.tsx
import productIconDark from "./product-icon-dark-XGNA2SGZ.svg";
import productIconLight from "./product-icon-light-AJK4O7HC.svg";
function Header({ navigation, actions, status, enableUserFeedback = true }) {
  const theme = useTheme4();
  const { themeMode, setThemeMode } = useThemeMode();
  const handleThemeModeChange = React105.useCallback(
    (event, mode) => {
      setThemeMode(mode);
    },
    [setThemeMode]
  );
  const productIcon = theme.palette.mode === "dark" ? productIconDark : productIconLight;
  return /* @__PURE__ */ React105.createElement(React105.Fragment, null, /* @__PURE__ */ React105.createElement(
    AppBar,
    {
      position: "fixed",
      color: "default",
      elevation: 0,
      sx: { zIndex: theme.zIndex.drawer + 1, borderBottom: 1, borderColor: "divider" }
    },
    /* @__PURE__ */ React105.createElement(Toolbar4, null, /* @__PURE__ */ React105.createElement(
      Box35,
      {
        sx: {
          flex: 1,
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "start"
        }
      },
      /* @__PURE__ */ React105.createElement(Tooltip16, { title: "Home" }, /* @__PURE__ */ React105.createElement(
        Link10,
        {
          color: "inherit",
          "aria-label": "Home",
          href: "/",
          underline: "none",
          sx: { display: "flex", flexDirection: "row", alignItems: "center", gap: 1 }
        },
        /* @__PURE__ */ React105.createElement("img", { src: productIcon, alt: "Toolpad product icon", width: 25, height: 25 }),
        /* @__PURE__ */ React105.createElement(
          Box35,
          {
            "data-testid": "brand",
            sx: {
              color: "primary.main",
              lineHeight: "21px",
              fontSize: "16px",
              fontWeight: 700,
              letterSpacing: 0,
              fontFamily: theme.typography.fontFamily
            }
          },
          "Toolpad Studio"
        )
      )),
      /* @__PURE__ */ React105.createElement(Chip5, { sx: { ml: 1 }, label: "Beta", size: "small", color: "grey" }),
      navigation
    ), /* @__PURE__ */ React105.createElement(
      Box35,
      {
        sx: {
          flex: 1,
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "center"
        }
      },
      actions
    ), /* @__PURE__ */ React105.createElement(
      Box35,
      {
        sx: {
          flex: 1,
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "end",
          gap: 2
        }
      },
      status,
      /* @__PURE__ */ React105.createElement(ThemeModeMenu_default, { mode: themeMode, onChange: handleThemeModeChange }),
      enableUserFeedback ? /* @__PURE__ */ React105.createElement(UserFeedback_default, null) : null
    ))
  ), /* @__PURE__ */ React105.createElement(Toolbar4, null));
}
var Header_default = Header;

// src/toolpad/ToolpadShell/ToolpadNavigation.tsx
import * as React106 from "react";
import { styled as styled45 } from "@mui/material/styles";
import ArticleIcon from "@mui/icons-material/Article";
import FunctionsIcon from "@mui/icons-material/Functions";
import {
  ListItem as ListItem5,
  Toolbar as Toolbar5,
  Drawer as MuiDrawer,
  List as List5,
  Stack as Stack22,
  IconButton as IconButton25,
  Tooltip as Tooltip17
} from "@mui/material";
import { Link as Link11, matchPath as matchPath2, useLocation as useLocation3 } from "react-router-dom";
var DRAWER_WIDTH = 44;
var Drawer = styled45(MuiDrawer)({
  width: DRAWER_WIDTH,
  "& .MuiDrawer-paper": {
    overflow: "hidden",
    width: DRAWER_WIDTH
  }
});
var navigationOptions = [
  {
    name: "Pages",
    path: "/app/pages",
    icon: ArticleIcon
  },
  {
    name: "Functions",
    path: "/app/functions",
    icon: FunctionsIcon
  }
];
function ToolpadNavigation() {
  const location = useLocation3();
  return /* @__PURE__ */ React106.createElement(Drawer, { variant: "permanent", anchor: "left", open: true }, /* @__PURE__ */ React106.createElement(Toolbar5, { variant: "dense" }), /* @__PURE__ */ React106.createElement(List5, { component: "nav", sx: { pt: 1 } }, navigationOptions.map(({ name, path, icon }) => {
    const OptionIcon = icon;
    const isSelected = !!matchPath2(`${path}/*`, location.pathname);
    return /* @__PURE__ */ React106.createElement(ListItem5, { key: name, sx: { pt: 0.5, pb: 0.5, pl: 0, pr: 0 } }, /* @__PURE__ */ React106.createElement(Link11, { to: path, style: { textDecoration: "none", color: "inherit" } }, /* @__PURE__ */ React106.createElement(
      Stack22,
      {
        flex: 1,
        direction: "column",
        alignItems: "center",
        sx: { width: DRAWER_WIDTH - 1 }
      },
      /* @__PURE__ */ React106.createElement(Tooltip17, { title: name, placement: "right" }, /* @__PURE__ */ React106.createElement(IconButton25, null, /* @__PURE__ */ React106.createElement(OptionIcon, { color: isSelected ? "primary" : "action", fontSize: "medium" })))
    )));
  })));
}

// src/toolpad/ToolpadShell/index.tsx
var ToolpadShellRoot = styled46("div")({
  height: "100vh",
  display: "flex",
  flexDirection: "column"
});
var ViewPort = styled46("div")({
  flex: 1,
  width: "100%",
  overflow: "auto",
  position: "relative"
});
function ToolpadShell({ children, ...props }) {
  return /* @__PURE__ */ React107.createElement(ToolpadShellRoot, null, /* @__PURE__ */ React107.createElement(Header_default, { ...props }), /* @__PURE__ */ React107.createElement(Stack23, { direction: "row", sx: { flex: 1 } }, FEATURE_FLAG_GLOBAL_FUNCTIONS ? /* @__PURE__ */ React107.createElement(ToolpadNavigation, null) : null, /* @__PURE__ */ React107.createElement(ViewPort, null, children)));
}

// src/toolpad/FunctionsEditor/index.tsx
import * as React108 from "react";
import {
  Box as Box36,
  Portal as Portal2,
  Skeleton as Skeleton5,
  IconButton as IconButton26,
  generateUtilityClasses,
  styled as styled47,
  Stack as Stack24,
  useTheme as useTheme5,
  alpha as alpha3,
  Typography as Typography27,
  Button as Button22,
  Link as Link12,
  Snackbar as Snackbar3,
  Toolbar as Toolbar6
} from "@mui/material";
import { errorFrom as errorFrom5 } from "@toolpad/utils/errors";
import { treeItemClasses as treeItemClasses4, TreeItem as TreeItem3, SimpleTreeView as SimpleTreeView4 } from "@mui/x-tree-view";
import AddIcon9 from "@mui/icons-material/Add";
import CloseIcon2 from "@mui/icons-material/Close";
import JavascriptIcon2 from "@mui/icons-material/Javascript";
import PlayArrowIcon3 from "@mui/icons-material/PlayArrow";
import useBoolean8 from "@toolpad/utils/hooks/useBoolean";
import { useQuery as useQuery2 } from "@tanstack/react-query";
import { ensureSuffix } from "@toolpad/utils/strings";
import usePageTitle2 from "@toolpad/utils/hooks/usePageTitle";
import * as appDom29 from "@toolpad/studio-runtime/appDom";
var fileTreeItemClasses = generateUtilityClasses("FileTreeItem", ["actionButton", "handlerItem"]);
var FileTreeItemRoot = styled47(EditableTreeItem)(({ theme }) => ({
  [`& .${treeItemClasses4.label}`]: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    [`&:hover .${fileTreeItemClasses.actionButton}`]: {
      visibility: "visible"
    }
  },
  [`& .${treeItemClasses4.groupTransition}`]: {
    borderLeft: `1px solid ${alpha3(theme.palette.text.primary, 0.2)}`,
    position: "relative",
    left: "-2px"
  },
  [`& .${fileTreeItemClasses.actionButton}`]: {
    visibility: "hidden"
  },
  [`& .${fileTreeItemClasses.handlerItem} .${treeItemClasses4.label}`]: {
    fontFamily: theme.typography.fontFamilyCode,
    fontSize: 14,
    padding: 4,
    display: "inline-block",
    overflow: "hidden",
    textOverflow: "ellipsis"
  }
}));
function HandlerFileTreeItem({
  file,
  itemId,
  validateItemName,
  onRename,
  ...other
}) {
  const { value: isEditing, setFalse: stopEditing } = useBoolean8(false);
  const labelText = file.name;
  const validateEditableFileName = React108.useCallback(
    (newName) => {
      if (newName !== labelText && validateItemName) {
        return validateItemName(newName);
      }
      return { isValid: true };
    },
    [labelText, validateItemName]
  );
  return /* @__PURE__ */ React108.createElement(
    FileTreeItemRoot,
    {
      key: file.name,
      itemId,
      labelText,
      renderLabel: (children) => /* @__PURE__ */ React108.createElement(React108.Fragment, null, /* @__PURE__ */ React108.createElement(JavascriptIcon2, { fontSize: "large" }), children, /* @__PURE__ */ React108.createElement(FlexFill_default, null), /* @__PURE__ */ React108.createElement(
        OpenCodeEditorButton,
        {
          className: fileTreeItemClasses.actionButton,
          iconButton: true,
          filePath: file.name,
          fileType: "resource"
        }
      )),
      isEditing,
      suggestedNewItemName: labelText,
      onCancel: stopEditing,
      validateItemName: validateEditableFileName,
      ...other
    },
    file.handlers.map((handler) => {
      return /* @__PURE__ */ React108.createElement(
        TreeItem3,
        {
          className: fileTreeItemClasses.handlerItem,
          key: handler.name,
          itemId: serializeFunctionId({ file: file.name, handler: handler.name }),
          label: handler.name
        }
      );
    })
  );
}
function FunctionsEditor() {
  usePageTitle2(`Functions | Toolpad Studio editor`);
  const theme = useTheme5();
  const projectApi = useProjectApi();
  const [selectedHandler, setSelectedHandler] = React108.useState(null);
  const { file: selectedFile = void 0, handler: selectedFunction = void 0 } = selectedHandler ? parseLegacyFunctionId(selectedHandler) : {};
  const selectedNodeId = selectedFile ? serializeFunctionId({
    file: selectedFile,
    handler: selectedFunction
  }) : null;
  const [expanded, setExpanded] = React108.useState(selectedFile ? [selectedFile] : []);
  const [latestCreatedHandler, setLatestCreatedHandler] = React108.useState(null);
  const execPrivate = React108.useCallback(
    (method, args) => {
      return projectApi.methods.dataSourceExecPrivate("local", method, args);
    },
    [projectApi.methods]
  );
  const introspection = useQuery2({
    queryKey: ["introspection"],
    queryFn: () => execPrivate("introspection", []),
    retry: false
  });
  const handleSelectFunction = React108.useCallback(
    (_event, itemId) => {
      if (!itemId) {
        return;
      }
      const parsed = parseFunctionId(itemId);
      if (parsed.handler) {
        setSelectedHandler(itemId);
      }
    },
    [setSelectedHandler]
  );
  const handlerTreeRef = React108.useRef(null);
  React108.useEffect(() => {
    handlerTreeRef.current?.querySelector(`.${treeItemClasses4.selected}`)?.scrollIntoView();
  }, []);
  const [newHandlerLoading, setNewHandlerLoading] = React108.useState(false);
  const [hasMounted, setHasMounted] = React108.useState(false);
  React108.useEffect(() => {
    setHasMounted(true);
  }, []);
  React108.useEffect(() => {
    const handlerTree = handlerTreeRef.current;
    if (handlerTree && hasMounted) {
      const selectedItem = handlerTree.querySelector(`.${treeItemClasses4.selected}`);
      if (selectedItem) {
        scrollIntoViewIfNeeded(selectedItem);
      }
    }
  }, [hasMounted, introspection.data]);
  const {
    value: isCreateNewHandlerOpen,
    setTrue: handleOpenCreateNewHandler,
    setFalse: handleCloseCreateNewHandler
  } = useBoolean8(false);
  const existingFileNames = React108.useMemo(
    () => new Set(
      introspection.data?.files.flatMap((file) => [
        file.name,
        `${file.name.substring(0, file.name.lastIndexOf("."))}`
      ]) ?? []
    ),
    [introspection]
  );
  const validateFileName = React108.useCallback(
    (fileName) => {
      const alreadyExists = existingFileNames.has(fileName);
      return {
        isValid: !alreadyExists,
        ...alreadyExists ? { errorMessage: "File already exists" } : {}
      };
    },
    [existingFileNames]
  );
  const nextProposedName = React108.useMemo(
    () => appDom29.proposeName("myfunctions", existingFileNames),
    [existingFileNames]
  );
  const handleCreateNewCommit = React108.useCallback(
    async (newFileName) => {
      const fileName = ensureSuffix(newFileName, ".ts");
      setNewHandlerLoading(true);
      try {
        await execPrivate("createNew", [fileName]);
        await introspection.refetch();
      } catch (error) {
        window.alert(errorFrom5(error).message);
      } finally {
        setNewHandlerLoading(false);
        setLatestCreatedHandler(fileName);
      }
      const newNodeId = serializeFunctionId({ file: fileName, handler: "default" });
      setSelectedHandler(newNodeId);
      setExpanded([fileName]);
      handleCloseCreateNewHandler();
    },
    [execPrivate, handleCloseCreateNewHandler, introspection]
  );
  const handleSnackbarClose = React108.useCallback(() => {
    setLatestCreatedHandler(null);
  }, []);
  const [searchTerm, setSearchTerm] = React108.useState("");
  const handleSearch = React108.useCallback((newSearchTerm) => {
    setSearchTerm(newSearchTerm);
  }, []);
  const handleFileRename = React108.useCallback(async () => {
    try {
      await introspection.refetch();
    } catch (error) {
      window.alert(errorFrom5(error).message);
    }
  }, [introspection]);
  const functionFiles = React108.useMemo(() => {
    const regex = new RegExp(searchTerm.split("").join(".*"), "i");
    return (introspection.data?.files?.filter((file) => searchTerm ? regex.test(file.name) : true) || []).filter((file) => file.handlers.length > 0);
  }, [introspection.data?.files, searchTerm]);
  return /* @__PURE__ */ React108.createElement(React108.Fragment, null, /* @__PURE__ */ React108.createElement(Box36, { sx: { height: "calc(100vh - 48px)" } }, /* @__PURE__ */ React108.createElement(resizablePanels_exports.PanelGroup, { direction: "horizontal" }, /* @__PURE__ */ React108.createElement(resizablePanels_exports.Panel, { defaultSize: 16, minSize: 16 }, /* @__PURE__ */ React108.createElement(
    Stack24,
    {
      direction: "column",
      sx: {
        height: "100%",
        position: "relative"
      }
    },
    /* @__PURE__ */ React108.createElement(
      ExplorerHeader,
      {
        headerText: "Functions",
        createLabelText: "Create new function file",
        onCreate: handleOpenCreateNewHandler,
        onSearch: handleSearch,
        hasPersistentSearch: true
      }
    ),
    /* @__PURE__ */ React108.createElement(
      SimpleTreeView4,
      {
        ref: handlerTreeRef,
        selectedItems: selectedNodeId,
        onSelectedItemsChange: handleSelectFunction,
        expandedItems: expanded,
        onExpandedItemsChange: (_event, itemIds) => setExpanded(itemIds),
        sx: {
          px: 1,
          overflow: "auto",
          scrollbarGutter: "stable"
        }
      },
      isCreateNewHandlerOpen ? /* @__PURE__ */ React108.createElement(
        EditableTreeItem,
        {
          itemId: "::create::",
          isEditing: true,
          suggestedNewItemName: nextProposedName,
          onEdit: handleCreateNewCommit,
          onCancel: handleCloseCreateNewHandler,
          validateItemName: validateFileName,
          isLoading: newHandlerLoading,
          renderLabel: (children) => /* @__PURE__ */ React108.createElement(Box36, { sx: { display: "flex", alignItems: "center" } }, /* @__PURE__ */ React108.createElement(JavascriptIcon2, { fontSize: "large" }), children)
        }
      ) : null,
      functionFiles.map((file) => /* @__PURE__ */ React108.createElement(
        HandlerFileTreeItem,
        {
          key: file.name,
          itemId: serializeFunctionId({ file: file.name }),
          file,
          validateItemName: validateFileName,
          onRename: handleFileRename
        }
      )),
      introspection.data?.files.length === 0 ? /* @__PURE__ */ React108.createElement(Stack24, { alignItems: "center", sx: { mt: 2 } }, /* @__PURE__ */ React108.createElement(Typography27, { variant: "body1", fontSize: 14 }, "You don't have any functions yet\u2026"), /* @__PURE__ */ React108.createElement(
        Button22,
        {
          onClick: handleOpenCreateNewHandler,
          variant: "outlined",
          startIcon: /* @__PURE__ */ React108.createElement(AddIcon9, null),
          size: "medium",
          sx: { mt: 1 }
        },
        "Create function file"
      )) : null,
      introspection.isLoading ? /* @__PURE__ */ React108.createElement(React108.Fragment, null, /* @__PURE__ */ React108.createElement(TreeItem3, { disabled: true, itemId: "loading-1", label: /* @__PURE__ */ React108.createElement(Skeleton5, null) }), /* @__PURE__ */ React108.createElement(TreeItem3, { disabled: true, itemId: "loading-2", label: /* @__PURE__ */ React108.createElement(Skeleton5, null) }), /* @__PURE__ */ React108.createElement(TreeItem3, { disabled: true, itemId: "loading-3", label: /* @__PURE__ */ React108.createElement(Skeleton5, null) })) : null
    ),
    introspection.error ? /* @__PURE__ */ React108.createElement(
      Box36,
      {
        sx: {
          position: "absolute",
          inset: "0 0 0 0",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          color: theme.palette.error.main
        }
      },
      errorFrom5(introspection.error).message
    ) : null
  )), /* @__PURE__ */ React108.createElement(PanelResizeHandle, null), /* @__PURE__ */ React108.createElement(resizablePanels_exports.Panel, null, selectedHandler && selectedFile && selectedFunction ? /* @__PURE__ */ React108.createElement(Toolbar6, { sx: { borderBottom: `1px solid ${theme.palette.divider}` } }, /* @__PURE__ */ React108.createElement(
    Stack24,
    {
      direction: "row",
      alignItems: "center",
      justifyContent: "space-between",
      sx: { width: "100%", p: 1 }
    },
    /* @__PURE__ */ React108.createElement(Stack24, { direction: "row", alignItems: "center" }, /* @__PURE__ */ React108.createElement(JavascriptIcon2, { fontSize: "large" }), /* @__PURE__ */ React108.createElement(Typography27, { variant: "subtitle1", fontSize: 14 }, selectedFile, "\xA0\xA0\u203A\xA0\xA0", /* @__PURE__ */ React108.createElement("span", { style: { fontFamily: theme.typography.fontFamilyCode } }, selectedFunction))),
    /* @__PURE__ */ React108.createElement(Stack24, { direction: "row", alignItems: "center", gap: 1 }, /* @__PURE__ */ React108.createElement(
      OpenCodeEditorButton,
      {
        className: fileTreeItemClasses.actionButton,
        filePath: selectedFile,
        fileType: "resource",
        actionText: "Edit",
        variant: "outlined"
      }
    ), /* @__PURE__ */ React108.createElement(Button22, { variant: "contained", size: "medium", startIcon: /* @__PURE__ */ React108.createElement(PlayArrowIcon3, null) }, "Preview"))
  )) : /* @__PURE__ */ React108.createElement(
    Box36,
    {
      sx: {
        height: "100%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }
    },
    /* @__PURE__ */ React108.createElement(Stack24, { alignItems: "center", sx: { px: 4 } }, /* @__PURE__ */ React108.createElement(Typography27, { variant: "body1", textAlign: "center", fontSize: 14 }, /* @__PURE__ */ React108.createElement("strong", null, "Custom Functions"), " allow you to run your own JavaScript code, directly from your file system."), /* @__PURE__ */ React108.createElement(
      Link12,
      {
        href: "https://mui.com/toolpad/studio/concepts/custom-functions",
        target: "_blank",
        rel: "noopener",
        textAlign: "center",
        sx: { mt: 1 },
        fontSize: 14
      },
      "Read more about Custom Functions"
    ))
  )))), /* @__PURE__ */ React108.createElement(Portal2, null, latestCreatedHandler ? /* @__PURE__ */ React108.createElement(
    Snackbar3,
    {
      open: !!latestCreatedHandler,
      onClose: handleSnackbarClose,
      message: `Function "${latestCreatedHandler}" created`,
      anchorOrigin: { vertical: "bottom", horizontal: "right" },
      autoHideDuration: 6e3,
      action: /* @__PURE__ */ React108.createElement(React108.Fragment, null, /* @__PURE__ */ React108.createElement(
        OpenCodeEditorButton,
        {
          className: fileTreeItemClasses.actionButton,
          filePath: latestCreatedHandler,
          fileType: "resource"
        }
      ), /* @__PURE__ */ React108.createElement(
        IconButton26,
        {
          size: "small",
          "aria-label": "close",
          color: "inherit",
          onClick: handleSnackbarClose
        },
        /* @__PURE__ */ React108.createElement(CloseIcon2, { fontSize: "small" })
      ))
    }
  ) : null));
}

// src/toolpad/AppEditor/AppAuthorizationEditor.tsx
import * as React110 from "react";
import {
  Alert as Alert9,
  Box as Box37,
  Button as Button23,
  Checkbox as Checkbox6,
  Dialog as Dialog13,
  DialogActions as DialogActions13,
  DialogContent as DialogContent13,
  DialogTitle as DialogTitle13,
  FormControl as FormControl3,
  FormHelperText as FormHelperText2,
  InputLabel,
  Link as Link13,
  MenuItem as MenuItem13,
  Select,
  Snackbar as Snackbar4,
  Stack as Stack25,
  Tab as Tab7,
  TextField as TextField25,
  Tooltip as Tooltip18,
  Typography as Typography28
} from "@mui/material";
import DeleteIcon9 from "@mui/icons-material/Delete";
import AddIcon10 from "@mui/icons-material/Add";
import {
  DataGrid,
  GridActionsCellItem,
  GridRowModes,
  GridToolbarContainer
} from "@mui/x-data-grid";
import GitHubIcon from "@mui/icons-material/GitHub";
import GoogleIcon from "@mui/icons-material/Google";
import { TabContext as TabContext8, TabList as TabList7 } from "@mui/lab";
import { updateArray as updateArray2 } from "@toolpad/utils/immutability";
import * as appDom30 from "@toolpad/studio-runtime/appDom";
import invariant15 from "invariant";

// src/components/icons/AzureIcon.tsx
import * as React109 from "react";
function AzureIcon({ size = 18, color = "currentColor" }) {
  return /* @__PURE__ */ React109.createElement("svg", { viewBox: "0 0 59.242 47.271", width: size, height: size, xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ React109.createElement(
    "path",
    {
      d: "m32.368 0-17.468 15.145-14.9 26.75h13.437zm2.323 3.543-7.454 21.008 14.291 17.956-27.728 4.764h45.442z",
      fill: color
    }
  ));
}

// src/toolpad/AppEditor/AppAuthorizationEditor.tsx
var AUTH_PROVIDER_OPTIONS = /* @__PURE__ */ new Map([
  ["github", { name: "GitHub", icon: /* @__PURE__ */ React110.createElement(GitHubIcon, { fontSize: "small" }), hasRoles: false }],
  ["google", { name: "Google", icon: /* @__PURE__ */ React110.createElement(GoogleIcon, { fontSize: "small" }), hasRoles: false }],
  [
    "azure-ad",
    {
      name: "Azure AD",
      icon: /* @__PURE__ */ React110.createElement(AzureIcon, null),
      hasRoles: true
    }
  ]
]);
function AppAuthenticationEditor() {
  const { dom } = useAppState();
  const appState = useAppStateApi();
  const plan = appDom30.getPlan(dom);
  const isPaidPlan = plan !== void 0 && plan !== "free";
  const handleAuthProvidersChange = React110.useCallback(
    (event) => {
      const {
        target: { value: providers }
      } = event;
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authentication", {
          ...app.attributes?.authentication,
          providers: (typeof providers === "string" ? providers.split(",") : providers).map(
            (provider) => ({ provider })
          )
        });
        return draft;
      });
    },
    [appState]
  );
  const handleRestrictedDomainsChange = React110.useCallback(
    (index) => (event) => {
      const {
        target: { value: domain }
      } = event;
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authentication", {
          ...app.attributes?.authentication,
          restrictedDomains: updateArray2(
            app.attributes?.authentication?.restrictedDomains ?? [],
            domain,
            index
          ).filter((restrictedDomain) => restrictedDomain !== "")
        });
        return draft;
      });
    },
    [appState]
  );
  const appNode = appDom30.getApp(dom);
  const { authentication } = appNode.attributes;
  const authProviders = React110.useMemo(
    () => authentication?.providers ?? [],
    [authentication?.providers]
  ).map((providerConfig) => providerConfig.provider);
  const restrictedDomains = authentication?.restrictedDomains ?? [];
  return /* @__PURE__ */ React110.createElement(Stack25, { direction: "column" }, /* @__PURE__ */ React110.createElement(Typography28, { variant: "subtitle1", mb: 1 }, "Providers"), /* @__PURE__ */ React110.createElement(FormControl3, null, /* @__PURE__ */ React110.createElement(InputLabel, { id: "auth-providers-label" }, "Authentication providers"), /* @__PURE__ */ React110.createElement(
    Select,
    {
      labelId: "auth-providers-label",
      label: "Authentication providers",
      id: "auth-providers",
      multiple: true,
      value: authProviders,
      onChange: handleAuthProvidersChange,
      fullWidth: true,
      renderValue: (selected) => selected.filter((selectedValue) => AUTH_PROVIDER_OPTIONS.has(selectedValue)).map((selectedValue) => AUTH_PROVIDER_OPTIONS.get(selectedValue)?.name ?? "").join(", ")
    },
    [...AUTH_PROVIDER_OPTIONS].map(([value, { name, icon, hasRoles }]) => /* @__PURE__ */ React110.createElement(MenuItem13, { key: value, value, disabled: hasRoles && !isPaidPlan }, /* @__PURE__ */ React110.createElement(Stack25, { direction: "row", alignItems: "center" }, /* @__PURE__ */ React110.createElement(Checkbox6, { checked: authProviders.indexOf(value) > -1 }), icon, /* @__PURE__ */ React110.createElement(Typography28, { mx: 1 }, name), hasRoles && !isPaidPlan ? /* @__PURE__ */ React110.createElement(UpgradeAlert, { type: "warning", message: `${name} requires a paid plan.` }) : null)))
  ), /* @__PURE__ */ React110.createElement(FormHelperText2, { id: "auth-providers-helper-text" }, "If set, only authenticated users can use the app.")), /* @__PURE__ */ React110.createElement(Alert9, { severity: "info", sx: { mt: 1 } }, "Certain environment variables must be set for authentication providers to work.", " ", /* @__PURE__ */ React110.createElement(Link13, { href: "https://mui.com/toolpad/studio/concepts/authentication", target: "_blank" }, "Learn how to set up authentication"), "."), /* @__PURE__ */ React110.createElement(Typography28, { variant: "subtitle1", mt: 2 }, "Required email domains"), /* @__PURE__ */ React110.createElement(Typography28, { variant: "body2", mt: 1 }, "If set, authenticated user emails must be in one of the domains below."), [...restrictedDomains, ""].map((domain, index) => /* @__PURE__ */ React110.createElement(
    TextField25,
    {
      key: index,
      value: domain,
      onChange: handleRestrictedDomainsChange(index),
      placeholder: "example.com"
    }
  )), /* @__PURE__ */ React110.createElement("div", { style: { position: "absolute", bottom: 0 } }, !isPaidPlan ? /* @__PURE__ */ React110.createElement(
    UpgradeAlert,
    {
      type: "info",
      message: "Using authentication with a few specific providers (Azure AD) requires a paid plan.",
      action: true
    }
  ) : /* @__PURE__ */ React110.createElement(
    UpgradeAlert,
    {
      type: "warning",
      message: "You are using features that are not covered by our MIT License. You will have to buy a license to use them in production."
    }
  )));
}
function RolesToolbar({ addNewRoleDisabled, onAddNewRole }) {
  invariant15(typeof addNewRoleDisabled === "boolean", "addNewRoleDisabled is required in slotProps");
  invariant15(typeof onAddNewRole === "function", "onAddNewRole is required in slotProps");
  return /* @__PURE__ */ React110.createElement(GridToolbarContainer, null, /* @__PURE__ */ React110.createElement(
    Button23,
    {
      color: "primary",
      startIcon: /* @__PURE__ */ React110.createElement(AddIcon10, null),
      onClick: onAddNewRole,
      disabled: addNewRoleDisabled
    },
    "Add role"
  ));
}
function AppRolesEditor({ onRowUpdateError }) {
  const { dom } = useAppState();
  const appState = useAppStateApi();
  const [draftRow, setDraftRow] = React110.useState(null);
  const addRole = React110.useCallback(
    (role) => {
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authorization", {
          ...app.attributes?.authorization,
          roles: [...app.attributes?.authorization?.roles ?? [], role]
        });
        return draft;
      });
    },
    [appState]
  );
  const updateRole = React110.useCallback(
    (name, values) => {
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authorization", {
          ...app.attributes?.authorization,
          roles: (app.attributes?.authorization?.roles ?? []).map((role) => {
            if (role.name === name) {
              return {
                ...role,
                ...values
              };
            }
            return role;
          })
        });
        return draft;
      });
    },
    [appState]
  );
  const deleteRole = React110.useCallback(
    (name) => {
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authorization", {
          ...app.attributes?.authorization,
          roles: (app.attributes?.authorization?.roles ?? []).filter((role) => role.name !== name)
        });
        return draft;
      });
    },
    [appState]
  );
  const rolesRows = React110.useMemo(() => {
    const appNode = appDom30.getApp(dom);
    const authorization = appNode.attributes.authorization;
    const roles = authorization?.roles;
    const { pages = [] } = appDom30.getChildNodes(dom, appNode);
    const existingRows = roles?.map((role) => ({
      ...role,
      id: role.name,
      pages: pages.filter((page) => page.attributes.authorization?.allowedRoles?.includes(role.name)).map((page) => page.name)
    })) ?? [];
    return [...existingRows, ...draftRow ? [draftRow] : []];
  }, [dom, draftRow]);
  const rolesColumns = React110.useMemo(() => {
    return [
      {
        field: "name",
        headerName: "Name",
        editable: true,
        flex: 0.4
      },
      {
        field: "description",
        headerName: "Description",
        editable: true,
        flex: 1
      },
      {
        field: "pages",
        headerName: "Pages",
        type: "number",
        renderCell: ({ value }) => {
          const previewLength = 3;
          const preview = `${value.slice(0, previewLength).join(", ")}${value.length > previewLength ? "..." : ""}`;
          return /* @__PURE__ */ React110.createElement(Tooltip18, { title: preview }, /* @__PURE__ */ React110.createElement("span", null, value.length));
        }
      },
      {
        field: "actions",
        type: "actions",
        headerName: "",
        width: 50,
        cellClassName: "actions",
        getActions: ({ row }) => {
          const isBlockedByPages = row.pages.length > 0;
          const deleteButton = /* @__PURE__ */ React110.createElement(
            GridActionsCellItem,
            {
              key: "delete",
              disabled: isBlockedByPages || row.isNew,
              icon: /* @__PURE__ */ React110.createElement(DeleteIcon9, null),
              label: "Delete",
              onClick: () => deleteRole(row.name),
              color: "inherit"
            }
          );
          return [
            isBlockedByPages ? /* @__PURE__ */ React110.createElement(
              Tooltip18,
              {
                key: "delete",
                title: "This role can't be deleted because it is still associated with existing pages."
              },
              /* @__PURE__ */ React110.createElement("span", null, deleteButton)
            ) : deleteButton
          ];
        }
      }
    ];
  }, [deleteRole]);
  const [rowModesModel, setRowModesModel] = React110.useState({});
  const handleRowModesModelChange = (newRowModesModel) => {
    setRowModesModel(newRowModesModel);
  };
  const processRowUpdate = (newRow, oldRow) => {
    setDraftRow(null);
    if (!newRow.name) {
      throw new Error(`Invalid row`);
    }
    const exists = rolesRows.some((row) => row.id !== newRow.id && row.name === newRow.name);
    if (exists) {
      throw new Error(`Role "${newRow.name}" already exists`);
    }
    if (oldRow.isNew) {
      addRole({
        name: newRow.name,
        description: newRow.description
      });
    } else {
      updateRole(newRow.name, {
        description: newRow.description
      });
    }
    return {
      ...newRow,
      id: newRow.name,
      pages: [],
      isNew: false
    };
  };
  const handleAddNewRole = React110.useCallback(() => {
    const draftRowId = `<draft_row>-${Math.random()}`;
    setDraftRow({ id: draftRowId, name: "", description: "", pages: [], isNew: true });
    setRowModesModel((oldModel) => ({
      ...oldModel,
      [draftRowId]: { mode: GridRowModes.Edit, fieldToFocus: "name" }
    }));
  }, []);
  return (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    /* @__PURE__ */ React110.createElement(
      "div",
      {
        style: { height: 350, width: "100%" },
        onKeyDown: (event) => {
          if (Object.keys(rowModesModel).length > 0) {
            event.stopPropagation();
          }
        }
      },
      /* @__PURE__ */ React110.createElement(
        DataGrid,
        {
          rows: rolesRows,
          columns: rolesColumns,
          hideFooter: true,
          editMode: "row",
          rowModesModel,
          onRowModesModelChange: handleRowModesModelChange,
          processRowUpdate,
          onProcessRowUpdateError: onRowUpdateError,
          isCellEditable: (params) => {
            if (params.field === "name") {
              return !!params.row.isNew;
            }
            return true;
          },
          slots: {
            toolbar: RolesToolbar
          },
          slotProps: {
            toolbar: {
              onAddNewRole: handleAddNewRole,
              addNewRoleDisabled: !!draftRow
            }
          },
          autoHeight: true
        }
      )
    )
  );
}
function AppRoleMappingsEditor({
  roleEnabledActiveAuthProviderOptions,
  onRowUpdateError
}) {
  const { dom } = useAppState();
  const appState = useAppStateApi();
  const [activeAuthProvider, setAuthProvider] = React110.useState(
    roleEnabledActiveAuthProviderOptions[0]?.[0] ?? null
  );
  const handleAuthProviderChange = React110.useCallback(
    (event) => {
      const { value: provider } = event.target;
      setAuthProvider(provider);
    },
    []
  );
  const updateRoleMapping = React110.useCallback(
    (role, providerRoles) => {
      if (!activeAuthProvider) {
        return;
      }
      appState.update((draft) => {
        const app = appDom30.getApp(draft);
        const activeAuthProviderConfig = app.attributes?.authentication?.providers?.find(
          (providerConfig) => providerConfig.provider === activeAuthProvider
        );
        draft = appDom30.setNodeNamespacedProp(draft, app, "attributes", "authentication", {
          ...app.attributes?.authentication,
          providers: [
            ...(app.attributes?.authentication?.providers ?? []).filter(
              (providerConfig) => providerConfig.provider !== activeAuthProvider
            ),
            {
              ...activeAuthProviderConfig,
              provider: activeAuthProvider,
              roles: [
                ...(activeAuthProviderConfig?.roles ?? []).filter(
                  (roleMapping) => roleMapping.target !== role
                ),
                {
                  source: (providerRoles || role).split(",").map((updatedRole) => updatedRole.trim()),
                  target: role
                }
              ]
            }
          ]
        });
        return draft;
      });
    },
    [activeAuthProvider, appState]
  );
  const roleMappingsRows = React110.useMemo(() => {
    if (!activeAuthProvider) {
      return [];
    }
    const appNode = appDom30.getApp(dom);
    const authorization = appNode.attributes.authorization;
    const roles = authorization?.roles ?? [];
    const authentication = appNode.attributes.authentication;
    const roleMappings = activeAuthProvider ? authentication?.providers?.find(
      (providerConfig) => providerConfig.provider === activeAuthProvider
    )?.roles ?? [] : [];
    const existingRows = roles?.map((role) => {
      const targetRoleMapping = roleMappings.find(
        (roleMapping) => roleMapping.target === role.name
      );
      return {
        id: role.name,
        role: role.name,
        providerRoles: targetRoleMapping ? targetRoleMapping.source.join(", ") : role.name
      };
    }) ?? [];
    return existingRows;
  }, [activeAuthProvider, dom]);
  const roleMappingsColumns = React110.useMemo(() => {
    return [
      {
        field: "role",
        headerName: "Role",
        editable: false,
        flex: 0.4
      },
      {
        field: "providerRoles",
        headerName: "Provider roles",
        editable: true,
        flex: 1
      }
    ];
  }, []);
  const [rowModesModel, setRowModesModel] = React110.useState({});
  const handleRowModesModelChange = (newRowModesModel) => {
    setRowModesModel(newRowModesModel);
  };
  const processRowUpdate = (newRow) => {
    updateRoleMapping(newRow.id, newRow.providerRoles);
    return { ...newRow, providerRoles: newRow.providerRoles || newRow.role };
  };
  return /* @__PURE__ */ React110.createElement(React110.Fragment, null, /* @__PURE__ */ React110.createElement(
    TextField25,
    {
      label: "Authentication provider",
      id: "auth-provider",
      value: activeAuthProvider ?? void 0,
      onChange: handleAuthProviderChange,
      fullWidth: true,
      select: true,
      sx: { mt: 2 }
    },
    roleEnabledActiveAuthProviderOptions.map(([value, { name }]) => /* @__PURE__ */ React110.createElement(MenuItem13, { key: value, value }, name))
  ), /* @__PURE__ */ React110.createElement(
    "div",
    {
      style: { height: 350, width: "100%" },
      onKeyDown: (event) => {
        if (Object.keys(rowModesModel).length > 0) {
          event.stopPropagation();
        }
      }
    },
    /* @__PURE__ */ React110.createElement(
      DataGrid,
      {
        rows: roleMappingsRows,
        columns: roleMappingsColumns,
        hideFooter: true,
        editMode: "row",
        rowModesModel,
        onRowModesModelChange: handleRowModesModelChange,
        processRowUpdate,
        onProcessRowUpdateError: onRowUpdateError,
        autoHeight: true,
        localeText: {
          noRowsLabel: activeAuthProvider ? "No roles defined" : "No provider selected"
        }
      }
    )
  ));
}
function AppAuthorizationDialog({ open, onClose }) {
  const { dom } = useAppState();
  const plan = appDom30.getPlan(dom);
  const isPaidPlan = plan !== void 0 && plan !== "free";
  const [activeTab, setActiveTab] = React110.useState(
    "authentication"
  );
  const handleActiveTabChange = React110.useCallback((event, newTab) => {
    setActiveTab(newTab);
  }, []);
  const [errorSnackbarMessage, setErrorSnackbarMessage] = React110.useState("");
  const handleRowUpdateError = React110.useCallback((error) => {
    setErrorSnackbarMessage(error.message);
  }, []);
  const handleErrorSnackbarClose = React110.useCallback(() => {
    setErrorSnackbarMessage("");
  }, []);
  const roleEnabledActiveAuthProviderOptions = React110.useMemo(() => {
    const appNode = appDom30.getApp(dom);
    const authProviders = (appNode.attributes.authentication?.providers ?? []).filter((providerConfig) => AUTH_PROVIDER_OPTIONS.has(providerConfig.provider)).map((providerConfig) => providerConfig.provider);
    return [...AUTH_PROVIDER_OPTIONS].filter(
      ([optionKey, { hasRoles }]) => hasRoles && authProviders.includes(optionKey)
    );
  }, [dom]);
  return /* @__PURE__ */ React110.createElement(React110.Fragment, null, /* @__PURE__ */ React110.createElement(Dialog13, { open, onClose, fullWidth: true, maxWidth: "md" }, /* @__PURE__ */ React110.createElement(DialogTitle13, null, "Authorization"), /* @__PURE__ */ React110.createElement(TabContext8, { value: activeTab }, /* @__PURE__ */ React110.createElement(Box37, { sx: { borderBottom: 1, borderColor: "divider" } }, /* @__PURE__ */ React110.createElement(
    TabList7,
    {
      onChange: handleActiveTabChange,
      "aria-label": "Authorization configuration options"
    },
    /* @__PURE__ */ React110.createElement(Tab7, { label: "Authentication", value: "authentication", sx: { px: 2 } }),
    /* @__PURE__ */ React110.createElement(Tab7, { label: "Roles", value: "roles", sx: { px: 2 } }),
    roleEnabledActiveAuthProviderOptions.length > 0 ? /* @__PURE__ */ React110.createElement(Tab7, { label: "Role mappings", value: "roleMappings", sx: { px: 2 } }) : null
  )), /* @__PURE__ */ React110.createElement(DialogContent13, { sx: { minHeight: 480, position: "relative" } }, /* @__PURE__ */ React110.createElement(TabPanel_default, { disableGutters: true, value: "authentication" }, /* @__PURE__ */ React110.createElement(AppAuthenticationEditor, null)), /* @__PURE__ */ React110.createElement(React110.Fragment, null, /* @__PURE__ */ React110.createElement(TabPanel_default, { disableGutters: true, value: "roles" }, isPaidPlan ? /* @__PURE__ */ React110.createElement(React110.Fragment, null, /* @__PURE__ */ React110.createElement(Typography28, { variant: "body2" }, "Define the roles for your application. You can configure your pages to be accessible to specific roles only."), /* @__PURE__ */ React110.createElement(AppRolesEditor, { onRowUpdateError: handleRowUpdateError })) : /* @__PURE__ */ React110.createElement(
    UpgradeAlert,
    {
      type: "info",
      message: "Role based access control requires a paid plan."
    }
  )), /* @__PURE__ */ React110.createElement(TabPanel_default, { disableGutters: true, value: "roleMappings" }, isPaidPlan ? /* @__PURE__ */ React110.createElement(React110.Fragment, null, /* @__PURE__ */ React110.createElement(Typography28, { variant: "body2" }, "Define mappings from authentication provider roles to Toolpad Studio roles."), /* @__PURE__ */ React110.createElement(
    AppRoleMappingsEditor,
    {
      onRowUpdateError: handleRowUpdateError,
      roleEnabledActiveAuthProviderOptions
    }
  )) : /* @__PURE__ */ React110.createElement(UpgradeAlert, { type: "info", message: "Role mapping requires a paid plan." }))))), /* @__PURE__ */ React110.createElement(DialogActions13, null, /* @__PURE__ */ React110.createElement(Button23, { color: "inherit", variant: "text", onClick: onClose }, "Close"))), /* @__PURE__ */ React110.createElement(
    Snackbar4,
    {
      open: !!errorSnackbarMessage,
      autoHideDuration: 6e3,
      onClose: handleErrorSnackbarClose
    },
    errorSnackbarMessage ? /* @__PURE__ */ React110.createElement(Alert9, { onClose: handleErrorSnackbarClose, severity: "error" }, errorSnackbarMessage) : void 0
  ));
}

// src/toolpad/Toolpad.tsx
var Centered = styled48("div")({
  height: "100%",
  width: "100%",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
function FullPageLoader() {
  return /* @__PURE__ */ React111.createElement(Centered, null, /* @__PURE__ */ React111.createElement(CircularProgress4, null));
}
function FullPageError({ error }) {
  return /* @__PURE__ */ React111.createElement(Centered, { sx: { p: 4 } }, /* @__PURE__ */ React111.createElement(ErrorAlert, { sx: { width: "100%" }, error }));
}
function ErrorFallback({ error }) {
  return /* @__PURE__ */ React111.createElement(FullPageError, { error });
}
function renderAppSaveState(appState) {
  if (appState.saveDomError) {
    return /* @__PURE__ */ React111.createElement(Tooltip19, { title: "Error while saving" }, /* @__PURE__ */ React111.createElement(SyncProblemIcon, { color: "primary" }));
  }
  const isSaving = appState.unsavedDomChanges > 0;
  if (isSaving) {
    return /* @__PURE__ */ React111.createElement(Tooltip19, { title: "Saving changes\u2026" }, /* @__PURE__ */ React111.createElement(SyncIcon, { color: "primary" }));
  }
  return /* @__PURE__ */ React111.createElement(Tooltip19, { title: "All changes saved!" }, /* @__PURE__ */ React111.createElement(CloudDoneIcon, { color: "primary" }));
}
function EditorShell({ children }) {
  const appState = useAppStateContext();
  const location = useLocation4();
  const previewPath = React111.useMemo(() => {
    const currentView = getViewFromPathname(location.pathname);
    if (!currentView) {
      return null;
    }
    const currentPageName = currentView?.kind === "page" ? currentView.name : null;
    return currentPageName ? `${appState.appUrl}/pages/${currentPageName}` : appState.appUrl;
  }, [appState.appUrl, location.pathname]);
  const {
    value: authorizationDialogOpen,
    setTrue: handleAuthorizationDialogOpen,
    setFalse: handleAuthorizationDialogClose
  } = useBoolean9(false);
  return /* @__PURE__ */ React111.createElement(
    ToolpadShell,
    {
      navigation: /* @__PURE__ */ React111.createElement(Stack26, { sx: { ml: 3 } }, /* @__PURE__ */ React111.createElement(Button24, { onClick: handleAuthorizationDialogOpen }, "Authorization")),
      actions: previewPath ? /* @__PURE__ */ React111.createElement(Stack26, { direction: "row", gap: 1, alignItems: "center" }, /* @__PURE__ */ React111.createElement(
        Button24,
        {
          variant: "outlined",
          endIcon: /* @__PURE__ */ React111.createElement(OpenInNewIcon3, null),
          color: "primary",
          component: "a",
          href: previewPath,
          target: "_blank"
        },
        "Preview"
      )) : null,
      status: renderAppSaveState(appState)
    },
    children,
    /* @__PURE__ */ React111.createElement(
      AppAuthorizationDialog,
      {
        open: authorizationDialogOpen,
        onClose: handleAuthorizationDialogClose
      }
    )
  );
}
var queryClient2 = new QueryClient2({
  defaultOptions: {
    queries: {
      networkMode: "always"
    },
    mutations: {
      networkMode: "always"
    }
  }
});
function ToolpadEditorRoutes({ appUrl }) {
  return /* @__PURE__ */ React111.createElement(ThemeProvider, null, /* @__PURE__ */ React111.createElement(CssBaseline, null), /* @__PURE__ */ React111.createElement(Box38, { sx: { height: "1px", minHeight: "100vh" } }, /* @__PURE__ */ React111.createElement(ErrorBoundary, { fallbackRender: ErrorFallback }, /* @__PURE__ */ React111.createElement(React111.Suspense, { fallback: /* @__PURE__ */ React111.createElement(FullPageLoader, null) }, /* @__PURE__ */ React111.createElement(QueryClientProvider, { client: queryClient2 }, /* @__PURE__ */ React111.createElement(ProjectProvider, { url: appUrl, fallback: /* @__PURE__ */ React111.createElement(FullPageLoader, null) }, /* @__PURE__ */ React111.createElement(AppProvider, { appUrl }, /* @__PURE__ */ React111.createElement(EditorShell, null, /* @__PURE__ */ React111.createElement(Routes, null, FEATURE_FLAG_GLOBAL_FUNCTIONS ? /* @__PURE__ */ React111.createElement(Route, { path: "/app/functions", element: /* @__PURE__ */ React111.createElement(FunctionsEditor, null) }) : null, /* @__PURE__ */ React111.createElement(Route, { path: "*", element: /* @__PURE__ */ React111.createElement(Editor2, null) }))))))))));
}
function ToolpadEditor({ basename, state }) {
  return /* @__PURE__ */ React111.createElement(BrowserRouter, { basename }, /* @__PURE__ */ React111.createElement(Routes, null, /* @__PURE__ */ React111.createElement(Route, { path: "/editor/*", element: /* @__PURE__ */ React111.createElement(ToolpadEditorRoutes, { appUrl: basename }) }), /* @__PURE__ */ React111.createElement(Route, { path: "/*", element: /* @__PURE__ */ React111.createElement(ToolpadAppRoutes, { basename, state }) })));
}

// src/exports/editor.tsx
var editor_default = ToolpadEditor;
export {
  editor_default as default
};
//# sourceMappingURL=editor.mjs.map