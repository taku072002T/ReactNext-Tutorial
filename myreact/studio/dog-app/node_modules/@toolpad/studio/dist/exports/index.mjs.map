{"version":3,"sources":["../../src/server/index.ts","../../src/utils/express.ts","../../src/server/toolpadAppServer.ts","../../src/server/config.ts","../../src/server/basicAuth.ts","../../src/server/rpc.ts","../../src/server/runtimeRpcServer.ts","../../src/server/auth.ts","../../src/server/localMode.ts","../../src/server/schema.ts","../../src/server/EnvManager.ts","../../src/server/FunctionsManager.ts","../../src/server/functionsRuntime.ts","../../src/server/functionsShared.ts","../../src/server/versionInfo.ts","../../package.json","../../src/server/DataManager.ts","../../src/toolpadDataSources/postgres/server.ts","../../src/toolpadDataSources/sql/server.ts","../../src/toolpadDataSources/mysql/server.ts","../../src/toolpadDataSources/rest/server.ts","../../src/server/har.ts","../../src/toolpadDataSources/applyTransform.ts","../../src/toolpadDataSources/googleSheets/server.ts","../../src/toolpadDataSources/local/server.ts","../../src/toolpadDataSources/server.ts","../../src/packageInfo.ts","../../src/server/projectRpcServer.ts"],"sourcesContent":["import * as path from 'path';\nimport { IncomingMessage, createServer } from 'http';\nimport { Worker, MessageChannel } from 'worker_threads';\nimport express from 'express';\nimport getPort from 'get-port';\nimport { legacyCreateProxyMiddleware as createProxyMiddleware } from 'http-proxy-middleware';\nimport { mapValues } from '@toolpad/utils/collections';\nimport prettyBytes from 'pretty-bytes';\nimport { WebSocket, WebSocketServer } from 'ws';\nimport { listen } from '@toolpad/utils/http';\nimport openBrowser from 'react-dev-utils/openBrowser.js';\nimport chalk from 'chalk';\nimport { serveRpc } from '@toolpad/utils/workerRpc';\nimport * as url from 'node:url';\nimport cors from 'cors';\nimport compression from 'compression';\nimport { asyncHandler } from '../utils/express';\nimport { createProdHandler } from './toolpadAppServer';\nimport { initProject, resolveProjectDir, type ToolpadProject } from './localMode';\nimport type {\n  Command as AppDevServerCommand,\n  AppViteServerConfig,\n  WorkerRpc,\n} from './appServerWorker';\nimport { createRpcHandler } from './rpc';\nimport { createRpcServer as createProjectRpcServer } from './projectRpcServer';\nimport { createRpcServer as createRuntimeRpcServer } from './runtimeRpcServer';\nimport { createAuthHandler, createRequireAuthMiddleware, getRequireAuthentication } from './auth';\n\n// crypto must be polyfilled to use @auth/core in Node 18 or lower\nglobalThis.crypto ??= (await import('node:crypto')) as Crypto;\n\nconst currentDirectory = url.fileURLToPath(new URL('.', import.meta.url));\n\nconst DEFAULT_PORT = 3000;\n\nfunction* getPreferredPorts(port: number = DEFAULT_PORT): Iterable<number> {\n  while (true) {\n    yield port;\n    port += 1;\n  }\n}\n\nasync function createDevHandler(project: ToolpadProject) {\n  const handler = express.Router();\n\n  handler.use((req, res, next) => {\n    res.setHeader('X-Toolpad-Base', project.options.base);\n    next();\n  });\n\n  handler.use(cors());\n\n  const appServerPath = path.resolve(currentDirectory, '../cli/appServerWorker.mjs');\n\n  const [wsPort, devPort] = await Promise.all([getPort(), getPort()]);\n\n  const mainThreadRpcChannel = new MessageChannel();\n  const worker = new Worker(appServerPath, {\n    workerData: {\n      toolpadDevMode: project.options.toolpadDevMode,\n      outDir: project.getAppOutputFolder(),\n      base: project.options.base,\n      root: project.getRoot(),\n      port: devPort,\n      mainThreadRpcPort: mainThreadRpcChannel.port1,\n      customServer: project.options.customServer,\n    } satisfies AppViteServerConfig,\n    transferList: [mainThreadRpcChannel.port1],\n    env: {\n      ...process.env,\n      NODE_ENV: 'development',\n    },\n  });\n\n  worker.once('exit', (code) => {\n    console.error(`App dev server failed ${code}`);\n    process.exit(1);\n  });\n\n  let resolveReadyPromise: () => void | undefined;\n  const readyPromise = new Promise<void>((resolve) => {\n    resolveReadyPromise = resolve;\n  });\n\n  serveRpc<WorkerRpc>(mainThreadRpcChannel.port2, {\n    notifyReady: async () => resolveReadyPromise?.(),\n    loadDom: async () => project.loadDom(),\n    getComponents: async () => project.getComponentsManifest(),\n    getPagesManifest: async () => project.getPagesManifest(),\n  });\n\n  project.events.on('componentsListChanged', () => {\n    worker.postMessage({ kind: 'reload-components' } satisfies AppDevServerCommand);\n  });\n\n  const rpcServer = createProjectRpcServer(project);\n  handler.use('/__toolpad_dev__/rpc', createRpcHandler(rpcServer));\n\n  handler.use(\n    '/__toolpad_dev__/manifest.json',\n    asyncHandler(async (req, res) => {\n      const wsProtocol = req.protocol === 'http' ? 'ws' : 'wss';\n      res.json({\n        rootDir: project.getRoot(),\n        wsUrl: `${wsProtocol}://${req.hostname}:${wsPort}`,\n      });\n    }),\n  );\n\n  const hasAuthentication = await getRequireAuthentication(project);\n  if (hasAuthentication) {\n    const authHandler = createAuthHandler(project);\n    handler.use('/api/auth', express.urlencoded({ extended: true }), authHandler);\n\n    handler.use(await createRequireAuthMiddleware(project));\n  }\n\n  handler.use('/api/data', project.dataManager.createDataHandler());\n  const runtimeRpcServer = createRuntimeRpcServer(project);\n\n  handler.use('/api/runtime-rpc', createRpcHandler(runtimeRpcServer));\n\n  handler.use(\n    (req, res, next) => {\n      // Stall the request until the dev server is ready\n      readyPromise.then(next, next);\n    },\n    createProxyMiddleware({\n      logLevel: 'silent',\n      ws: true,\n      target: {\n        host: 'localhost',\n        port: devPort,\n      },\n    }),\n  );\n\n  const wsServer = new WebSocketServer({ port: wsPort });\n\n  project.events.on('*', (event, payload) => {\n    wsServer.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({ kind: 'projectEvent', event, payload }));\n      }\n    });\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  wsServer.on('connection', (ws: WebSocket, _request: IncomingMessage) => {\n    ws.on('error', console.error);\n  });\n\n  // TODO(Jan): allow passing a server instance to the handler and attach websocket server to it\n  // httpServer.on('upgrade', (request, socket, head) => {\n  //   invariant(request.url, 'request must have a url');\n  //   const { pathname } = new URL(request.url, 'http://x');\n  //\n  //   if (pathname === '/toolpad-ws') {\n  //     wsServer.handleUpgrade(request, socket, head, (ws) => {\n  //       wsServer.emit('connection', ws, request);\n  //     });\n  //   }\n  // });\n\n  return {\n    handler,\n    async dispose() {\n      worker.postMessage({ kind: 'exit' } satisfies AppDevServerCommand);\n    },\n  };\n}\n\ninterface HealthCheck {\n  gitSha1: string | null;\n  circleBuildNum: string | null;\n  memoryUsage: NodeJS.MemoryUsage;\n  memoryUsagePretty: Record<keyof NodeJS.MemoryUsage, string>;\n}\n\ninterface AppHandler {\n  handler: express.Handler;\n  dispose: () => Promise<void>;\n}\n\nasync function createToolpadAppHandler(project: ToolpadProject): Promise<AppHandler> {\n  const appHandler = project.options.dev\n    ? await createDevHandler(project)\n    : await createProdHandler(project);\n  return appHandler;\n}\n\nexport interface ToolpadHandlerConfig {\n  dev: boolean;\n  dir: string;\n  base: string;\n  toolpadDevMode?: boolean;\n}\n\nexport async function createHandler({\n  dev = false,\n  dir = './toolpad',\n  base = '/prod',\n}: ToolpadHandlerConfig): Promise<AppHandler> {\n  const project = await initProject({ dev, dir, base, customServer: true });\n  await project.start();\n\n  const appHandler = await createToolpadAppHandler(project);\n\n  return {\n    handler: appHandler.handler,\n    dispose: async () => {\n      await Promise.allSettled([project.dispose(), appHandler.dispose()]);\n    },\n  };\n}\n\nasync function createToolpadHandler({\n  dev,\n  base,\n  dir,\n  toolpadDevMode,\n}: ToolpadHandlerConfig): Promise<AppHandler> {\n  const editorBasename = '/_toolpad';\n\n  const project = await initProject({ toolpadDevMode, dev, dir, base });\n  await project.checkPlan();\n  await project.start();\n\n  const router = express.Router();\n\n  // See https://nextjs.org/docs/advanced-features/security-headers\n  router.use((req, res, expressNext) => {\n    // Force the browser to trust the Content-Type header\n    // https://stackoverflow.com/questions/18337630/what-is-x-content-type-options-nosniff\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('X-XSS-Protection', '1; mode=block');\n    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n\n    res.setHeader(\n      'Content-Security-Policy',\n      [\n        `default-src * data: mediastream: blob: filesystem: about: ws: wss: 'unsafe-eval' 'wasm-unsafe-eval' 'unsafe-inline';`,\n        `script-src * data: blob: 'unsafe-inline' 'unsafe-eval';`,\n        `script-src-elem * data: blob: 'unsafe-inline';`,\n        `connect-src * data: blob: 'unsafe-inline';`,\n        `img-src * data: blob: 'unsafe-inline';`,\n        `media-src * data: blob: 'unsafe-inline';`,\n        `frame-src * data: blob: ;`,\n        `style-src * data: blob: 'unsafe-inline';`,\n        `font-src * data: blob: 'unsafe-inline';`,\n        `frame-ancestors *;`,\n      ].join(' '),\n    );\n\n    expressNext();\n  });\n\n  router.get('/', (req, res) => {\n    const redirectUrl = dev ? editorBasename : project.options.base;\n    res.redirect(302, redirectUrl);\n  });\n\n  const publicPath = path.resolve(currentDirectory, '../../public');\n  router.use(express.static(publicPath, { index: false }));\n\n  const appHandler = await createToolpadAppHandler(project);\n\n  router.use(project.options.base, appHandler.handler);\n\n  let editorHandler: AppHandler | undefined;\n  if (dev) {\n    router.use('/_toolpad', (req, res) => {\n      res.redirect(`${project.options.base}/editor${req.url}`);\n    });\n  }\n\n  return {\n    handler: router,\n    dispose: async () => {\n      await Promise.allSettled([\n        project.dispose(),\n        appHandler?.dispose(),\n        editorHandler?.dispose(),\n      ]);\n    },\n  };\n}\n\nexport interface ToolpadServerConfig extends Omit<ToolpadHandlerConfig, 'server'> {\n  port: number;\n}\n\nasync function startToolpadServer({ port, ...config }: ToolpadServerConfig) {\n  const gitSha1 = process.env.GIT_SHA1 || null;\n  const circleBuildNum = process.env.CIRCLE_BUILD_NUM || null;\n\n  const app = express();\n  app.disable('x-powered-by');\n\n  const httpServer = createServer(app);\n\n  app.use(compression());\n\n  app.get('/health-check', (req, res) => {\n    const memoryUsage = process.memoryUsage();\n    res.json({\n      gitSha1,\n      circleBuildNum,\n      memoryUsage,\n      memoryUsagePretty: mapValues(memoryUsage, (usage) => prettyBytes(usage)),\n    } satisfies HealthCheck);\n  });\n\n  const toolpadHandler = await createToolpadHandler(config);\n\n  app.use(toolpadHandler.handler);\n\n  const runningServer = await listen(httpServer, port);\n\n  return {\n    port: runningServer.port,\n    async dispose() {\n      await Promise.allSettled([runningServer.close(), toolpadHandler?.dispose?.()]);\n    },\n  };\n}\n\nasync function fetchAppUrl(appUrl: string): Promise<string> {\n  const res = await fetch(appUrl);\n  if (!res.ok) {\n    throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n  }\n  const appBase = res.headers.get('X-Toolpad-Base');\n  if (!appBase) {\n    throw new Error(`Not a Toolpad Studio app or not running in dev mode`);\n  }\n  return new URL(appBase, appUrl).toString();\n}\n\nexport async function runEditor(appUrl: string) {\n  let appRootUrl;\n  try {\n    appRootUrl = await fetchAppUrl(appUrl);\n  } catch (err: any) {\n    console.error(\n      `${chalk.red('error')} - No Toolpad Studio application found running under ${chalk.cyan(appUrl)}\\n` +\n        `        Find more information about running a custom server at ${chalk.cyan(\n          'https://mui.com/toolpad/studio/concepts/custom-server/',\n        )}`,\n    );\n\n    process.exit(1);\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(\n    `${chalk.yellow('warn')}  - The editor command is deprecated and will be removed in the future, please visit ${chalk.cyan(`${appRootUrl}/editor`)}`,\n  );\n}\n\nexport interface RunAppOptions {\n  dev?: boolean;\n  port?: number;\n  dir?: string;\n  base?: string;\n  toolpadDevMode?: boolean;\n}\n\nexport async function runApp({\n  dev = false,\n  dir = '.',\n  base = '/prod',\n  port,\n  toolpadDevMode = false,\n}: RunAppOptions) {\n  const projectDir = resolveProjectDir(dir);\n\n  if (!port) {\n    port = dev ? await getPort({ port: getPreferredPorts(DEFAULT_PORT) }) : DEFAULT_PORT;\n  } else {\n    // if port is specified but is not available, exit\n    const availablePort = await getPort({ port });\n    if (availablePort !== port) {\n      console.error(`${chalk.red('error')} - Port ${port} is not available. Aborted.`);\n      process.exit(1);\n    }\n  }\n\n  const server = await startToolpadServer({\n    dev,\n    base,\n    dir,\n    port,\n    toolpadDevMode: !!process.env.TOOLPAD_NEXT_DEV || toolpadDevMode,\n  });\n\n  const toolpadUrl = `http://localhost:${server.port}/`;\n\n  // eslint-disable-next-line no-console\n  console.log(\n    `${chalk.green('ready')} - Toolpad Studio project ${chalk.cyan(projectDir)} ready on ${chalk.cyan(\n      toolpadUrl,\n    )}`,\n  );\n\n  if (dev) {\n    try {\n      openBrowser(toolpadUrl);\n    } catch (err: any) {\n      console.error(`${chalk.red('error')} - Failed to open browser: ${err.message}`);\n    }\n  }\n\n  return {\n    async dispose() {\n      await Promise.allSettled([server.dispose()]);\n    },\n  };\n}\n","import * as express from 'express';\nimport { Awaitable } from '@toolpad/utils/types';\n\nexport function asyncHandler(\n  handler: (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction,\n  ) => Awaitable<void>,\n): express.RequestHandler {\n  return (req, res, next) => {\n    Promise.resolve(handler(req, res, next)).catch(next);\n  };\n}\n","import * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { Server } from 'http';\nimport * as express from 'express';\nimport serializeJavascript from 'serialize-javascript';\nimport { ToolpadProject } from './localMode';\nimport { asyncHandler } from '../utils/express';\nimport { basicAuthUnauthorized, checkBasicAuthHeader } from './basicAuth';\nimport { createRpcServer } from './runtimeRpcServer';\nimport { createRpcHandler } from './rpc';\nimport { INITIAL_STATE_WINDOW_PROPERTY } from '../constants';\nimport createRuntimeState from '../runtime/createRuntimeState';\nimport type { RuntimeState } from '../runtime';\nimport { createAuthHandler, createRequireAuthMiddleware, getRequireAuthentication } from './auth';\n\nexport interface PostProcessHtmlParams {\n  initialState: RuntimeState;\n}\n\nexport function postProcessHtml(html: string, { initialState }: PostProcessHtmlParams): string {\n  const serializedInitialState = serializeJavascript(initialState, { isJSON: true });\n\n  const toolpadScripts = [\n    `<script>window[${JSON.stringify(\n      INITIAL_STATE_WINDOW_PROPERTY,\n    )}] = ${serializedInitialState}</script>`,\n  ];\n\n  return html.replace(`<!-- __TOOLPAD_SCRIPTS__ -->`, () => toolpadScripts.join('\\n'));\n}\n\nexport interface CreateViteConfigParams {\n  server?: Server;\n  root: string;\n  base: string;\n  canvas: boolean;\n}\n\nexport interface ToolpadAppHandlerParams {\n  root: string;\n}\n\nexport async function createProdHandler(project: ToolpadProject) {\n  const handler = express.Router();\n\n  handler.use(express.static(project.getAppOutputFolder(), { index: false }));\n\n  // Allow static assets, block everything else\n  handler.use((req, res, next) => {\n    if (checkBasicAuthHeader(req.headers.authorization ?? null)) {\n      next();\n      return;\n    }\n    basicAuthUnauthorized(res);\n  });\n\n  const hasAuthentication = await getRequireAuthentication(project);\n  if (hasAuthentication) {\n    const authHandler = createAuthHandler(project);\n    handler.use('/api/auth', express.urlencoded({ extended: true }), authHandler);\n\n    handler.use(await createRequireAuthMiddleware(project));\n  }\n\n  handler.use('/api/data', project.dataManager.createDataHandler());\n\n  const runtimeRpcServer = createRpcServer(project);\n  handler.use('/api/runtime-rpc', createRpcHandler(runtimeRpcServer));\n\n  handler.use(\n    asyncHandler(async (req, res) => {\n      const htmlFilePath = path.resolve(project.getAppOutputFolder(), './index.html');\n\n      const [dom] = await Promise.all([project.loadDom()]);\n\n      let html = await fs.readFile(htmlFilePath, { encoding: 'utf-8' });\n\n      html = postProcessHtml(html, {\n        initialState: createRuntimeState({ dom }),\n      });\n\n      res.setHeader('Content-Type', 'text/html; charset=utf-8').status(200).end(html);\n    }),\n  );\n\n  return { handler, dispose: async () => undefined };\n}\n","type BasicAuthConfig =\n  | {\n      basicAuthUser: string;\n      basicAuthPassword: string;\n    }\n  | {\n      basicAuthUser?: undefined;\n      basicAuthPassword?: undefined;\n    };\n\nexport type ServerConfig = {\n  databaseUrl?: string;\n  googleSheetsClientId?: string;\n  googleSheetsClientSecret?: string;\n  encryptionKeys: string[];\n  basicAuthUser?: string;\n  basicAuthPassword?: string;\n} & BasicAuthConfig;\n\nfunction readConfig(): ServerConfig {\n  if (typeof window !== 'undefined') {\n    throw new Error(`Server-side config can't be loaded on the client side`);\n  }\n\n  // Whitespace separated, do not use spaces in your keys\n  const encryptionKeys: string[] =\n    process.env.TOOLPAD_ENCRYPTION_KEYS?.split(/\\s+/).filter(Boolean) ?? [];\n\n  let basicAuthConfig: BasicAuthConfig = {};\n  if (process.env.TOOLPAD_BASIC_AUTH_USER && process.env.TOOLPAD_BASIC_AUTH_PASSWORD) {\n    basicAuthConfig = {\n      basicAuthUser: process.env.TOOLPAD_BASIC_AUTH_USER,\n      basicAuthPassword: process.env.TOOLPAD_BASIC_AUTH_PASSWORD,\n    };\n  } else if (process.env.TOOLPAD_BASIC_AUTH_USER) {\n    throw new Error(\n      `Basic Auth user configured without password. Please provide the TOOLPAD_BASIC_AUTH_PASSWORD environment variable.`,\n    );\n  }\n\n  return {\n    ...basicAuthConfig,\n    databaseUrl: process.env.TOOLPAD_DATABASE_URL,\n    googleSheetsClientId: process.env.TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_ID,\n    googleSheetsClientSecret: process.env.TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_SECRET,\n    encryptionKeys,\n  };\n}\n\nexport default readConfig();\n","import type { IncomingMessage, ServerResponse } from 'http';\nimport config from './config';\n\nexport function checkBasicAuthHeader(headerContent: string | null): boolean {\n  if (!config.basicAuthUser) {\n    return true;\n  }\n\n  if (headerContent) {\n    const auth = headerContent.split(' ')[1];\n    const [user, pwd] = atob(auth).toString().split(':');\n\n    if (user === config.basicAuthUser && pwd === config.basicAuthPassword) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function checkBasicAuth(req: IncomingMessage): boolean {\n  return checkBasicAuthHeader(req.headers.authorization || null);\n}\n\nexport function basicAuthUnauthorized(res: ServerResponse): void {\n  res.setHeader('WWW-Authenticate', 'Basic realm=\"Protected\"');\n  res.statusCode = 401;\n  res.end('Unauthorized');\n}\n","import type { IncomingMessage, ServerResponse } from 'http';\nimport * as superjson from 'superjson';\nimport express from 'express';\nimport * as z from 'zod';\nimport { fromZodError } from 'zod-validation-error';\nimport { hasOwnProperty } from '@toolpad/utils/collections';\nimport { errorFrom, serializeError } from '@toolpad/utils/errors';\nimport { withContext, createServerContext } from '@toolpad/studio-runtime/serverRuntime';\nimport { asyncHandler } from '../utils/express';\n\nexport interface Method<P extends any[] = any[], R = any> {\n  (...params: P): Promise<R>;\n}\n\nexport interface Methods {\n  readonly [key: string]: Method;\n}\n\ninterface ResolverInput<P> {\n  params: P;\n  req: IncomingMessage;\n  res: ServerResponse;\n}\n\nexport interface MethodResolver<F extends Method> {\n  (input: ResolverInput<Parameters<F>>): ReturnType<F>;\n}\n\nexport interface MethodResolvers {\n  readonly [key: string]: MethodResolver<any>;\n}\n\nexport type MethodsOf<R extends MethodResolvers> = {\n  [K in keyof R]: (...params: Parameters<R[K]>[0]['params']) => ReturnType<R[K]>;\n};\n\nconst rpcRequestSchema = z.object({\n  name: z.string(),\n  params: z.array(z.any()),\n});\n\nexport type RpcRequest = z.infer<typeof rpcRequestSchema>;\n\nexport type RpcResponse =\n  | {\n      result: string;\n      error?: undefined;\n    }\n  | {\n      error: { message: string; code?: unknown; stack?: string };\n    };\n\nexport function createRpcHandler(definition: MethodResolvers): express.RequestHandler {\n  const router = express.Router();\n  router.post(\n    '/',\n    express.json({ limit: '50mb' }),\n    asyncHandler(async (req, res) => {\n      const parseResult = rpcRequestSchema.safeParse(req.body);\n      if (!parseResult.success) {\n        res.status(400).send(fromZodError(parseResult.error));\n        return;\n      }\n\n      const { name, params } = parseResult.data;\n\n      if (!hasOwnProperty(definition, name)) {\n        // This is important to avoid RCE\n        res.status(404).end();\n        return;\n      }\n      const method: MethodResolver<any> = definition[name];\n\n      let rawResult;\n      let error: Error | null = null;\n      try {\n        const ctx = await createServerContext(req, res);\n        rawResult = await withContext(ctx, async () => {\n          return method({ params, req, res });\n        });\n      } catch (rawError) {\n        error = errorFrom(rawError);\n      }\n\n      const responseData: RpcResponse = error\n        ? { error: serializeError(error) }\n        : { result: superjson.stringify(rawResult) };\n\n      res.json(responseData);\n    }),\n  );\n  return router;\n}\n\nexport function createMethod<F extends Method>(handler: MethodResolver<F>): MethodResolver<F> {\n  return handler;\n}\n","import { createMethod, MethodResolvers } from './rpc';\nimport type FunctionsManager from './FunctionsManager';\nimport type DataManager from './DataManager';\n\ninterface IToolpadProject {\n  functionsManager: FunctionsManager;\n  dataManager: DataManager;\n}\n\n// Methods exposed to the Toolpad Studio runtime\nexport function createRpcServer(project: IToolpadProject) {\n  return {\n    introspectDataProvider: createMethod<typeof project.functionsManager.introspectDataProvider>(\n      ({ params }) => {\n        return project.functionsManager.introspectDataProvider(...params);\n      },\n    ),\n    getDataProviderRecords: createMethod<typeof project.functionsManager.getDataProviderRecords>(\n      ({ params }) => {\n        return project.functionsManager.getDataProviderRecords(...params);\n      },\n    ),\n    deleteDataProviderRecord: createMethod<\n      typeof project.functionsManager.deleteDataProviderRecord\n    >(({ params }) => {\n      return project.functionsManager.deleteDataProviderRecord(...params);\n    }),\n    updateDataProviderRecord: createMethod<\n      typeof project.functionsManager.updateDataProviderRecord\n    >(({ params }) => {\n      return project.functionsManager.updateDataProviderRecord(...params);\n    }),\n    createDataProviderRecord: createMethod<\n      typeof project.functionsManager.createDataProviderRecord\n    >(({ params }) => {\n      return project.functionsManager.createDataProviderRecord(...params);\n    }),\n    execQuery: createMethod<typeof project.dataManager.execQuery>(({ params }) => {\n      return project.dataManager.execQuery(...params);\n    }),\n    execFunction: createMethod<typeof project.functionsManager.execFunction>(({ params }) => {\n      return project.functionsManager.execFunction(...params);\n    }),\n  } satisfies MethodResolvers;\n}\n\nexport type ServerDefinition = ReturnType<typeof createRpcServer>;\n","import express, { Router } from 'express';\nimport { Auth, AuthConfig } from '@auth/core';\nimport GithubProvider, { GitHubEmail, GitHubProfile } from '@auth/core/providers/github';\nimport GoogleProvider from '@auth/core/providers/google';\nimport AzureADProvider from '@auth/core/providers/azure-ad';\nimport CredentialsProvider from '@auth/core/providers/credentials';\nimport { TokenSet } from '@auth/core/types';\nimport { OAuthConfig } from '@auth/core/providers';\nimport chalk from 'chalk';\nimport * as appDom from '@toolpad/studio-runtime/appDom';\nimport { adaptRequestFromExpressToFetch } from '@toolpad/utils/httpApiAdapters';\nimport { getUserToken } from '@toolpad/studio-runtime/auth';\nimport { asyncHandler } from '../utils/express';\nimport type { ToolpadProject } from './localMode';\n\nconst SKIP_VERIFICATION_PROVIDERS: appDom.AuthProvider[] = [\n  // Azure AD should be fine to skip as the user has to belong to the organization to sign in\n  'azure-ad',\n  'credentials',\n];\n\nasync function getAuthProviders(\n  project: Pick<ToolpadProject, 'loadDom'>,\n): Promise<appDom.AuthProviderConfig[]> {\n  const dom = await project.loadDom();\n  const app = appDom.getApp(dom);\n\n  const authProviders = app.attributes.authentication?.providers ?? [];\n\n  return authProviders;\n}\n\nexport async function getRequireAuthentication(project: ToolpadProject): Promise<boolean> {\n  const authProviders = await getAuthProviders(project);\n  return authProviders.length > 0;\n}\n\nfunction getMappedRoles(\n  roles: string[],\n  allRoles: string[],\n  roleMappings: appDom.AuthProviderConfig['roles'] = [],\n): string[] {\n  return (roles ?? []).flatMap((providerRole) =>\n    allRoles\n      .filter((role) => {\n        const targetRoleMapping = roleMappings.find((roleMapping) => roleMapping.target === role);\n\n        return targetRoleMapping\n          ? targetRoleMapping.source.includes(providerRole)\n          : role === providerRole;\n      })\n      // Remove duplicates in case multiple provider roles map to the same role\n      .filter((value, index, self) => self.indexOf(value) === index),\n  );\n}\n\nexport function createAuthHandler(project: ToolpadProject): Router {\n  if (!process.env.TOOLPAD_AUTH_SECRET) {\n    console.error(\n      `\\n${chalk.red(\n        'Missing secret for authentication. Please provide a secret in the TOOLPAD_AUTH_SECRET environment variable. Read more at https://mui.com/toolpad/studio/concepts/authentication/#authentication-secret',\n      )}\\n`,\n    );\n  }\n\n  const { base } = project.options;\n\n  const router = express.Router();\n\n  const githubProvider = GithubProvider({\n    clientId: process.env.TOOLPAD_GITHUB_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_GITHUB_CLIENT_SECRET,\n    userinfo: {\n      url: 'https://api.github.com/user',\n      async request({\n        tokens,\n        provider,\n      }: {\n        tokens: TokenSet;\n        provider: OAuthConfig<GitHubProfile>;\n      }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const restrictedDomains = app.attributes.authentication?.restrictedDomains ?? [];\n\n        const headers = {\n          Authorization: `Bearer ${tokens.access_token}`,\n          'User-Agent': 'authjs',\n        };\n\n        const profile = await fetch(provider.userinfo?.url as URL, {\n          headers,\n        }).then(async (githubRes) => githubRes.json());\n\n        if (!profile.email) {\n          // If the user does not have a public email, get another via the GitHub API\n          // See https://docs.github.com/en/rest/users/emails#list-public-email-addresses-for-the-authenticated-user\n          const githubRes = await fetch('https://api.github.com/user/emails', {\n            headers,\n          });\n\n          if (githubRes.ok) {\n            const githubEmails: GitHubEmail[] = await githubRes.json();\n\n            const activeEmail =\n              (restrictedDomains.length > 0\n                ? githubEmails.find(\n                    (githubEmail) =>\n                      githubEmail.verified &&\n                      restrictedDomains.some((restrictedDomain) =>\n                        githubEmail.email.endsWith(`@${restrictedDomain}`),\n                      ),\n                  )\n                : null) ??\n              githubEmails.find((githubEmail) => githubEmail.primary) ??\n              githubEmails[0];\n\n            profile.email = activeEmail.email;\n            profile.email_verified = activeEmail.verified;\n          }\n        }\n\n        return profile;\n      },\n    },\n  });\n\n  const googleProvider = GoogleProvider({\n    clientId: process.env.TOOLPAD_GOOGLE_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_GOOGLE_CLIENT_SECRET,\n  });\n\n  const azureADProvider = AzureADProvider({\n    clientId: process.env.TOOLPAD_AZURE_AD_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_AZURE_AD_CLIENT_SECRET,\n    tenantId: process.env.TOOLPAD_AZURE_AD_TENANT_ID,\n  });\n\n  const credentialsProvider = CredentialsProvider({\n    name: 'Credentials',\n    async authorize({ username, password }) {\n      if (process.env.NODE_ENV !== 'test') {\n        throw new Error('Credentials authentication provider can only be used in test mode.');\n      }\n\n      if (username === 'admin' && password === 'admin') {\n        return {\n          id: 'admin',\n          name: 'Lord Admin',\n          email: 'admin@example.com',\n          roles: ['mock-admin'],\n        };\n      }\n      if (username === 'mui' && password === 'mui') {\n        return { id: 'mui', name: 'Mr. MUI 2024', email: 'test@mui.com', roles: [] };\n      }\n      if (username === 'test' && password === 'test') {\n        return { id: 'test', name: 'Miss Test', email: 'test@example.com', roles: [] };\n      }\n\n      return null;\n    },\n  });\n\n  const authConfig: AuthConfig = {\n    basePath: `${base}/api/auth`,\n    pages: {\n      signIn: `${base}/signin`,\n      signOut: base,\n      error: `${base}/signin`, // Error code passed in query string as ?error=\n      verifyRequest: base,\n    },\n    providers: [githubProvider, googleProvider, azureADProvider, credentialsProvider],\n    secret: process.env.TOOLPAD_AUTH_SECRET,\n    trustHost: true,\n    callbacks: {\n      async signIn({ profile, account, user }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const restrictedDomains = app.attributes.authentication?.restrictedDomains ?? [];\n\n        const skipEmailVerification =\n          !!account?.provider &&\n          SKIP_VERIFICATION_PROVIDERS.includes(account.provider as appDom.AuthProvider);\n\n        return Boolean(\n          (profile?.email_verified || skipEmailVerification) &&\n            user?.email &&\n            (restrictedDomains.length === 0 ||\n              restrictedDomains.some(\n                (restrictedDomain) => user.email!.endsWith(`@${restrictedDomain}`) ?? false,\n              )),\n        );\n      },\n      async redirect({ baseUrl }) {\n        return `${baseUrl}${base}`;\n      },\n      async jwt({ token, account, user }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const authorization = app.attributes.authorization ?? {};\n        const roleNames = authorization?.roles?.map((role) => role.name) ?? [];\n\n        const authentication = app.attributes.authentication ?? {};\n\n        if (account?.provider === 'azure-ad' && account.id_token) {\n          const roleMappings =\n            authentication?.providers?.find(\n              (providerConfig) => providerConfig.provider === 'azure-ad',\n            )?.roles ?? [];\n\n          const [, payload] = account.id_token.split('.');\n          const idToken: { roles?: string[] } = JSON.parse(\n            Buffer.from(payload, 'base64').toString('utf8'),\n          );\n\n          token.roles = getMappedRoles(idToken?.roles ?? [], roleNames, roleMappings);\n        }\n\n        if (account?.provider === 'credentials') {\n          const roleMappings =\n            authentication?.providers?.find(\n              (providerConfig) => providerConfig.provider === 'credentials',\n            )?.roles ?? [];\n\n          token.roles = getMappedRoles(user?.roles ?? [], roleNames, roleMappings);\n        }\n\n        return token;\n      },\n      // @TODO: Types for session callback are broken as it says token does not exist but it does\n      // Github issue: https://github.com/nextauthjs/next-auth/issues/9437\n      // @ts-ignore\n      session({ session, token }) {\n        if (session.user) {\n          session.user.roles = token.roles ?? [];\n        }\n\n        return session;\n      },\n    },\n  };\n\n  router.use(\n    '/*',\n    asyncHandler(async (req, res) => {\n      if (!process.env.TOOLPAD_AUTH_SECRET) {\n        res.status(400).json({ url: `${base}/signin?error=MissingSecretError` });\n        return;\n      }\n\n      const request = adaptRequestFromExpressToFetch(req);\n\n      const response = (await Auth(request, authConfig)) as Response;\n\n      // Converting Fetch API's Response to Express' res\n      res.status(response.status);\n      res.contentType(response.headers.get('content-type') ?? 'text/plain');\n      response.headers.forEach((value, key) => {\n        if (value) {\n          res.setHeader(key, value);\n        }\n      });\n      const body = await response.text();\n      res.send(body);\n    }),\n  );\n\n  return router;\n}\n\nexport async function createRequireAuthMiddleware(project: ToolpadProject) {\n  return async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { options } = project;\n    const { base } = options;\n\n    const isPageRequest = req.get('sec-fetch-dest') === 'document';\n    const signInPath = `${base}/signin`;\n    const editorPath = `${base}/editor`;\n\n    const requestPath = req.originalUrl.split('?')[0];\n\n    let isAuthorized = true;\n    if (\n      (!project.options.dev || isPageRequest) &&\n      !requestPath.startsWith(signInPath) &&\n      !requestPath.startsWith(editorPath)\n    ) {\n      const token = await getUserToken(req);\n      if (!token) {\n        isAuthorized = false;\n      }\n    }\n\n    if (!isAuthorized) {\n      if (isPageRequest) {\n        res.redirect(signInPath);\n      } else {\n        res.status(401).send('Unauthorized');\n      }\n      res.end();\n    } else {\n      next();\n    }\n  };\n}\n","import * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { isMainThread } from 'worker_threads';\nimport * as yaml from 'yaml';\nimport invariant from 'invariant';\nimport openEditor from 'open-editor';\nimport chalk from 'chalk';\nimport { BindableAttrValue, EnvAttrValue, PropBindableAttrValue } from '@toolpad/studio-runtime';\nimport { fromZodError } from 'zod-validation-error';\nimport { glob } from 'glob';\nimport * as chokidar from 'chokidar';\nimport { debounce, throttle } from 'lodash-es';\nimport { Emitter } from '@toolpad/utils/events';\nimport { guessTitle, isValidJsIdentifier } from '@toolpad/utils/strings';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport { filterValues, hasOwnProperty, mapValues } from '@toolpad/utils/collections';\nimport { execa } from 'execa';\nimport {\n  writeFileRecursive,\n  readMaybeFile,\n  readMaybeDir,\n  updateYamlFile,\n  fileExists,\n  readJsonFile,\n} from '@toolpad/utils/fs';\nimport { z } from 'zod';\nimport { Awaitable } from '@toolpad/utils/types';\nimport * as appDom from '@toolpad/studio-runtime/appDom';\nimport insecureHash from '../utils/insecureHash';\nimport {\n  Page,\n  Query,\n  ElementType,\n  pageSchema,\n  Template,\n  BindableProp,\n  LocalQueryConfig,\n  FetchQueryConfig,\n  QueryConfig,\n  FetchBody,\n  ResponseType,\n  Theme,\n  themeSchema,\n  API_VERSION,\n  applicationSchema,\n  Application,\n  envBindingSchema,\n} from './schema';\nimport { format, resolvePrettierConfig } from '../utils/prettier';\nimport {\n  Body as AppDomFetchBody,\n  FetchQuery,\n  ResponseType as AppDomRestResponseType,\n} from '../toolpadDataSources/rest/types';\nimport { LocalQuery } from '../toolpadDataSources/local/types';\nimport type { ProjectEvents, ToolpadProjectOptions, CodeEditorFileType } from '../types';\nimport EnvManager from './EnvManager';\nimport FunctionsManager, { CreateDataProviderOptions } from './FunctionsManager';\nimport { VersionInfo, checkVersion } from './versionInfo';\nimport { UPGRADE_URL, VERSION_CHECK_INTERVAL } from '../constants';\nimport DataManager from './DataManager';\nimport { PAGE_COLUMN_COMPONENT_ID, PAGE_ROW_COMPONENT_ID } from '../runtime/toolpadComponents';\nimport packageInfo from '../packageInfo';\n\ndeclare global {\n  // eslint-disable-next-line\n  var __toolpadProjects: Set<string> | undefined;\n}\n\ninvariant(\n  isMainThread,\n  'localMode should be used only in the main thread. Use message passing to get data from the main thread.',\n);\n\nfunction getThemeFile(root: string): string {\n  return path.join(root, './theme.yml');\n}\n\nfunction getApplicationFile(root: string): string {\n  return path.join(root, './application.yml');\n}\n\nfunction getComponentsFolder(root: string): string {\n  return path.join(root, './components');\n}\n\nfunction getPagesFolder(root: string): string {\n  return path.join(root, './pages');\n}\n\nfunction getPageFolder(root: string, name: string): string {\n  const pagesFolder = getPagesFolder(root);\n  const pageFolder = path.resolve(pagesFolder, name);\n  return pageFolder;\n}\n\nfunction getPageFile(root: string, name: string): string {\n  const pageFolder = getPageFolder(root, name);\n  const pageFileName = path.resolve(pageFolder, 'page.yml');\n  return pageFileName;\n}\n\nfunction getComponentFilePath(componentsFolder: string, componentName: string): string {\n  return path.join(componentsFolder, `${componentName}.tsx`);\n}\n\nexport function getOutputFolder(root: string) {\n  return path.join(root, '.generated');\n}\n\nfunction getAppOutputFolder(root: string) {\n  return path.join(getOutputFolder(root), 'app');\n}\n\nexport interface ComponentEntry {\n  name: string;\n  path: string;\n}\n\nexport type ComponentsManifest = ComponentEntry[];\n\nasync function loadPagesFromFiles(root: string): Promise<PagesContent> {\n  const pagesFolder = getPagesFolder(root);\n  const entries = await readMaybeDir(pagesFolder);\n  const resultEntries = await Promise.all(\n    entries.map(async (entry): Promise<[string, Page] | null> => {\n      if (entry.isDirectory()) {\n        const pageName = entry.name;\n\n        const pageDirEntries = new Set(await fs.readdir(path.resolve(pagesFolder, pageName)));\n\n        if (pageDirEntries.has('page.yml')) {\n          const ymlFilePath = path.resolve(pagesFolder, pageName, './page.yml');\n          const ymlContent = await readMaybeFile(ymlFilePath);\n\n          if (ymlContent) {\n            let parsedFile: Page | undefined;\n            try {\n              parsedFile = yaml.parse(ymlContent);\n            } catch (rawError) {\n              const error = errorFrom(rawError);\n\n              console.error(\n                `${chalk.red('error')} - Failed to read page ${chalk.cyan(pageName)}. ${\n                  error.message\n                }`,\n              );\n\n              return null;\n            }\n\n            const result = pageSchema.safeParse(parsedFile);\n\n            if (result.success) {\n              return [pageName, result.data];\n            }\n\n            console.error(\n              `${chalk.red('error')} - Failed to read page ${chalk.cyan(pageName)}. ${fromZodError(\n                result.error,\n              )}`,\n            );\n          }\n        }\n      }\n\n      return null;\n    }),\n  );\n\n  return Object.fromEntries(resultEntries.filter(Boolean));\n}\n\nasync function loadObjectFromFile<T extends z.ZodType>(\n  filePath: string,\n  schema: T,\n): Promise<z.infer<T> | null> {\n  const content = await readMaybeFile(filePath);\n  if (content) {\n    const parsedFile = yaml.parse(content);\n    const result = schema.safeParse(parsedFile);\n    if (result.success) {\n      return result.data;\n    }\n\n    console.error(\n      `${chalk.red('error')} - Failed to read theme ${chalk.cyan(filePath)}. ${fromZodError(\n        result.error,\n      )}`,\n    );\n\n    return null;\n  }\n  return null;\n}\n\nasync function loadThemeFromFile(root: string): Promise<Theme | null> {\n  const themeFilePath = getThemeFile(root);\n  return loadObjectFromFile(themeFilePath, themeSchema);\n}\n\nasync function loadApplicationFromFile(root: string): Promise<Application | null> {\n  const applicationFilePath = getApplicationFile(root);\n  return loadObjectFromFile(applicationFilePath, applicationSchema);\n}\n\nasync function createDefaultCodeComponent(name: string, filePath: string): Promise<string> {\n  const componentId = name.replace(/\\s/g, '');\n  const propTypeId = `${componentId}Props`;\n  const result = await format(\n    `\n  import * as React from 'react';\n  import { createComponent } from '@toolpad/studio/browser';\n  \n  export interface ${propTypeId} {\n    msg: string;\n  }\n  \n  function ${componentId}({ msg }: ${propTypeId}) {\n    return (\n      <div>{msg}</div>\n    );\n  }\n\n  export default createComponent(${componentId}, {\n    argTypes: {\n      msg: {\n        type: \"string\",\n        default: \"Hello world!\"\n      },\n    },\n  });    \n`,\n    filePath,\n  );\n  return result;\n}\n\nclass Lock {\n  pending: Promise<any> | null = null;\n\n  async use<T = void>(doWork: () => Promise<T>): Promise<T> {\n    try {\n      this.pending = Promise.resolve(this.pending).then(() => doWork());\n      return await this.pending;\n    } finally {\n      this.pending = null;\n    }\n  }\n}\n\nconst buildInfoSchema = z.object({\n  timestamp: z.number(),\n  base: z.string().optional(),\n});\n\ntype BuildInfo = z.infer<typeof buildInfoSchema>;\n\nconst DEFAULT_GENERATED_GITIGNORE_FILE_CONTENT = '.generated\\n';\n\nasync function initGitignore(root: string) {\n  const generatedGitignorePath = path.resolve(root, '.gitignore');\n  if (!(await fileExists(generatedGitignorePath))) {\n    // eslint-disable-next-line no-console\n    console.log(`${chalk.blue('info')}  - Initializing .gitignore file`);\n    await writeFileRecursive(generatedGitignorePath, DEFAULT_GENERATED_GITIGNORE_FILE_CONTENT, {\n      encoding: 'utf-8',\n    });\n  }\n}\n\nfunction mergeThemeIntoAppDom(dom: appDom.AppDom, themeFile: Theme): appDom.AppDom {\n  const themeFileSpec = themeFile.spec;\n  const app = appDom.getApp(dom);\n  dom = appDom.addNode(\n    dom,\n    appDom.createNode(dom, 'theme', {\n      theme: themeFileSpec?.options,\n      attributes: {},\n    }),\n    app,\n    'themes',\n  );\n  return dom;\n}\n\nfunction mergeApplicationIntoDom(dom: appDom.AppDom, applicationFile: Application): appDom.AppDom {\n  const applicationFileSpec = applicationFile.spec;\n  const app = appDom.getApp(dom);\n\n  dom = appDom.setNodeNamespacedProp(dom, app, 'attributes', 'plan', applicationFileSpec?.plan);\n\n  dom = appDom.setNodeNamespacedProp(dom, app, 'attributes', 'authentication', {\n    ...applicationFileSpec?.authentication,\n  });\n\n  dom = appDom.setNodeNamespacedProp(dom, app, 'attributes', 'authorization', {\n    ...applicationFileSpec?.authorization,\n    roles: applicationFileSpec?.authorization?.roles?.map((role) =>\n      typeof role === 'string' ? { name: role } : role,\n    ),\n  });\n\n  return dom;\n}\n\nfunction stringOnly(maybeString: unknown): string | undefined {\n  return typeof maybeString === 'string' ? maybeString : undefined;\n}\n\nfunction expandChildren(children: appDom.ElementNode[], dom: appDom.AppDom): ElementType[];\nfunction expandChildren(children: appDom.QueryNode[], dom: appDom.AppDom): Query[];\nfunction expandChildren<N extends appDom.AppDomNode>(\n  children: N[],\n  dom: appDom.AppDom,\n): (Query | ElementType)[];\nfunction expandChildren<N extends appDom.AppDomNode>(children: N[], dom: appDom.AppDom) {\n  return children\n    .sort((child1, child2) => {\n      invariant(child1.parentIndex && child2.parentIndex, 'Nodes are not children of another node');\n      return appDom.compareFractionalIndex(child1.parentIndex, child2.parentIndex);\n    })\n    .map((child) => expandFromDom(child, dom));\n}\n\nfunction undefinedWhenEmpty<O extends object | any[]>(obj?: O): O | undefined {\n  if (!obj || Object.values(obj).every((property) => property === undefined)) {\n    return undefined;\n  }\n  return obj;\n}\n\nfunction createPageFileQueryFromDomQuery(\n  dataSource: string,\n  query: FetchQuery | LocalQuery | undefined,\n): QueryConfig {\n  switch (dataSource) {\n    case 'rest': {\n      if (!query) {\n        return { kind: 'rest' };\n      }\n      query = query as FetchQuery;\n\n      let body: FetchBody | undefined;\n\n      if (query.body) {\n        switch (query.body.kind) {\n          case 'raw': {\n            body = {\n              kind: 'raw',\n              content: query.body.content as PropBindableAttrValue<string>,\n              contentType: query.body.contentType,\n            };\n            break;\n          }\n          case 'urlEncoded': {\n            body = {\n              kind: 'urlEncoded',\n              content: query.body.content.map(([name, value]) => ({\n                name,\n                value: value as PropBindableAttrValue<string>,\n              })),\n            };\n            break;\n          }\n          default:\n            throw new Error(`Unrecognized body kind \"${(query.body as any).kind}\"`);\n        }\n      }\n\n      let response: ResponseType | undefined;\n\n      if (query.response) {\n        switch (query.response.kind) {\n          case 'csv': {\n            response = { kind: 'csv', headers: query.response.headers };\n            break;\n          }\n          case 'json': {\n            response = { kind: 'json' };\n            break;\n          }\n          case 'xml': {\n            response = { kind: 'xml' };\n            break;\n          }\n          case 'raw': {\n            response = { kind: 'raw' };\n            break;\n          }\n          default:\n            throw new Error(`Unrecognized response kind \"${(query.response as any).kind}\"`);\n        }\n      }\n\n      return {\n        kind: 'rest',\n        url: query.url as PropBindableAttrValue<string>,\n        searchParams: query.searchParams?.map(([name, value]) => ({\n          name,\n          value: value as PropBindableAttrValue<string>,\n        })),\n        headers: query.headers.map(([name, value]) => ({\n          name,\n          value: value as PropBindableAttrValue<string>,\n        })),\n        body,\n        method: query.method,\n        response,\n        transform: query.transform,\n        transformEnabled: query.transformEnabled,\n      } satisfies FetchQueryConfig;\n    }\n    case 'local':\n      if (!query) {\n        return { kind: 'local' };\n      }\n\n      query = query as LocalQuery;\n      return {\n        function: query.function,\n        kind: 'local',\n      } satisfies LocalQueryConfig;\n    default:\n      throw new Error(`Unsupported dataSource \"${dataSource}\"`);\n  }\n}\n\nfunction expandFromDom(node: appDom.ElementNode, dom: appDom.AppDom): ElementType;\nfunction expandFromDom(node: appDom.QueryNode, dom: appDom.AppDom): Query;\nfunction expandFromDom(node: appDom.PageNode, dom: appDom.AppDom): Page;\nfunction expandFromDom<N extends appDom.AppDomNode>(\n  node: N,\n  dom: appDom.AppDom,\n): Page | Query | ElementType;\nfunction expandFromDom<N extends appDom.AppDomNode>(\n  node: N,\n  dom: appDom.AppDom,\n): Page | Query | ElementType {\n  if (appDom.isPage(node)) {\n    const children = appDom.getChildNodes(dom, node);\n\n    return {\n      apiVersion: API_VERSION,\n      kind: 'page',\n      spec: {\n        displayName: node.attributes.displayName,\n        alias: node.attributes.alias,\n        title: node.attributes.title,\n        parameters: undefinedWhenEmpty(\n          node.attributes.parameters?.map(([name, value]) => ({ name, value })) ?? [],\n        ),\n        content: undefinedWhenEmpty(expandChildren(children.children || [], dom)),\n        queries: undefinedWhenEmpty(expandChildren(children.queries || [], dom)),\n        display: node.attributes.display,\n        maxWidth: node.attributes.maxWidth,\n        authorization: node.attributes.authorization,\n      },\n    } satisfies Page;\n  }\n\n  if (appDom.isQuery(node)) {\n    return {\n      name: node.name,\n      enabled: node.attributes.enabled as PropBindableAttrValue<boolean>,\n      mode: node.attributes.mode,\n      query: node.attributes.dataSource\n        ? createPageFileQueryFromDomQuery(\n            node.attributes.dataSource,\n            node.attributes.query as FetchQuery | LocalQuery | undefined,\n          )\n        : undefined,\n      parameters: undefinedWhenEmpty(node.params?.map(([name, value]) => ({ name, value }))),\n      cacheTime: node.attributes.cacheTime,\n      refetchInterval: node.attributes.refetchInterval,\n      transform: node.attributes.transform,\n      transformEnabled: node.attributes.transformEnabled,\n    } satisfies Query;\n  }\n\n  if (appDom.isElement(node)) {\n    const { children, ...templates } = appDom.getChildNodes(dom, node);\n\n    const templateProps = mapValues(templates, (subtree) =>\n      subtree\n        ? {\n            $$template: expandChildren(subtree, dom),\n          }\n        : undefined,\n    );\n\n    return {\n      component: node.attributes.component,\n      name: node.name,\n      layout: undefinedWhenEmpty({\n        columnSize: node.layout?.columnSize,\n        height: node.layout?.height,\n        horizontalAlign: stringOnly(node.layout?.horizontalAlign),\n        verticalAlign: stringOnly(node.layout?.verticalAlign),\n      }),\n      props: undefinedWhenEmpty({ ...node.props, ...templateProps }),\n      children: undefinedWhenEmpty(expandChildren(children || [], dom)),\n    } satisfies ElementType;\n  }\n\n  throw new Error(`Unsupported node type \"${node.type}\"`);\n}\n\nfunction isTemplate(bindableProp?: BindableProp): bindableProp is Template {\n  return !!(\n    bindableProp &&\n    typeof bindableProp === 'object' &&\n    hasOwnProperty(bindableProp, '$$template')\n  );\n}\n\nfunction mergeElementIntoDom(\n  dom: appDom.AppDom,\n  parent: appDom.ElementNode | appDom.PageNode,\n  parentProp: string,\n  elm: ElementType,\n): appDom.AppDom {\n  const plainProps = filterValues(elm.props ?? {}, (prop) => !isTemplate(prop)) as Record<\n    string,\n    Exclude<BindableProp, Template>\n  >;\n\n  const templateProps = filterValues(elm.props ?? {}, isTemplate) as Record<string, Template>;\n\n  const elmNode = appDom.createElement(dom, elm.component, plainProps, elm.layout ?? {}, elm.name);\n\n  dom = appDom.addNode(dom, elmNode, parent, parentProp as any);\n\n  if (elm.children) {\n    for (const child of elm.children) {\n      dom = mergeElementIntoDom(dom, elmNode, 'children', child);\n    }\n  }\n\n  for (const [propName, templateProp] of Object.entries(templateProps)) {\n    for (const child of templateProp.$$template) {\n      dom = mergeElementIntoDom(dom, elmNode, propName, child);\n    }\n  }\n\n  return dom;\n}\n\nfunction createDomQueryFromPageFileQuery(query: QueryConfig): FetchQuery | LocalQuery {\n  switch (query.kind) {\n    case 'local':\n      return {\n        function: query.function,\n      } satisfies LocalQuery;\n    case 'rest': {\n      let body: AppDomFetchBody | undefined;\n\n      if (query.body) {\n        switch (query.body.kind) {\n          case 'raw': {\n            body = {\n              kind: 'raw',\n              content: query.body.content,\n              contentType: query.body.contentType,\n            };\n            break;\n          }\n          case 'urlEncoded': {\n            body = {\n              kind: 'urlEncoded',\n              content: query.body.content.map(({ name, value }) => [\n                name,\n                value as PropBindableAttrValue<string>,\n              ]),\n            };\n            break;\n          }\n          default:\n            throw new Error(`Unrecognized body kind \"${(query.body as any).kind}\"`);\n        }\n      }\n\n      let response: AppDomRestResponseType | undefined;\n\n      if (query.response) {\n        switch (query.response.kind) {\n          case 'csv': {\n            response = { kind: 'csv', headers: query.response.headers };\n            break;\n          }\n          case 'json': {\n            response = { kind: 'json' };\n            break;\n          }\n          case 'xml': {\n            response = { kind: 'xml' };\n            break;\n          }\n          case 'raw': {\n            response = { kind: 'raw' };\n            break;\n          }\n          default:\n            throw new Error(`Unrecognized response kind \"${(query.response as any).kind}\"`);\n        }\n      }\n\n      return {\n        url: query.url || undefined,\n        headers: query.headers?.map(({ name, value }) => [name, value]) || [],\n        method: query.method || 'GET',\n        browser: false,\n        transform: query.transform,\n        transformEnabled: query.transformEnabled,\n        searchParams: query.searchParams?.map(({ name, value }) => [name, value]) || [],\n        body,\n        response,\n      } satisfies FetchQuery;\n    }\n    default:\n      throw new Error(`Unrecognized query kind \"${(query as any).kind}\"`);\n  }\n}\n\nfunction createPageDomFromPageFile(pageName: string, pageFile: Page): appDom.AppDom {\n  const pageFileSpec = pageFile.spec ?? {};\n\n  let fragment = appDom.createFragment('page', {\n    name: pageName,\n    attributes: {\n      displayName: pageFileSpec.displayName,\n      // Convert deprecated id to alias\n      alias: pageFileSpec.id ? [pageFileSpec.id] : pageFileSpec.alias,\n      title: pageFileSpec.title,\n      parameters: pageFileSpec.parameters?.map(({ name, value }) => [name, value]) || [],\n      display: pageFileSpec.display || undefined,\n      maxWidth: pageFileSpec.maxWidth || undefined,\n      authorization: pageFileSpec.authorization || undefined,\n    },\n  });\n\n  const pageNode = appDom.getRoot(fragment);\n  appDom.assertIsPage(pageNode);\n\n  if (pageFileSpec.queries) {\n    for (const query of pageFileSpec.queries) {\n      if (query.query) {\n        const queryNode = appDom.createNode(fragment, 'query', {\n          name: query.name,\n          attributes: {\n            connectionId: null,\n            dataSource: typeof query.query?.kind === 'string' ? query.query.kind : undefined,\n            query: createDomQueryFromPageFileQuery(query.query),\n            cacheTime: typeof query.cacheTime === 'number' ? query.cacheTime : undefined,\n            enabled: query.enabled ?? undefined,\n            mode: typeof query.mode === 'string' ? query.mode : undefined,\n            transform: typeof query.transform === 'string' ? query.transform : undefined,\n            refetchInterval:\n              typeof query.refetchInterval === 'number' ? query.refetchInterval : undefined,\n            transformEnabled: query.transformEnabled ?? undefined,\n          },\n          params: query.parameters?.map(\n            ({ name, value }) => [name, value] satisfies [string, BindableAttrValue<any>],\n          ),\n        });\n        fragment = appDom.addNode(fragment, queryNode, pageNode, 'queries');\n      }\n    }\n  }\n\n  if (pageFileSpec.content) {\n    for (const child of pageFileSpec.content) {\n      fragment = mergeElementIntoDom(fragment, pageNode, 'children', child);\n    }\n  }\n\n  return fragment;\n}\n\nfunction mergePageIntoDom(dom: appDom.AppDom, pageName: string, pageFile: Page): appDom.AppDom {\n  const appRoot = appDom.getRoot(dom);\n  const pageFragment = createPageDomFromPageFile(pageName, pageFile);\n\n  const newPageNode = appDom.getRoot(pageFragment);\n\n  if (appDom.getMaybeNode(dom, newPageNode.id)) {\n    dom = appDom.removeNode(dom, newPageNode.id);\n  }\n\n  dom = appDom.addFragment(dom, pageFragment, appRoot.id, 'pages');\n\n  return dom;\n}\n\nfunction optimizePageElement(\n  element: ElementType,\n  isPageChild = false,\n): ElementType | ElementType[] {\n  if (isPageChild && element.component === PAGE_COLUMN_COMPONENT_ID) {\n    return (element.children || []).flatMap((child) => optimizePageElement(child, true));\n  }\n\n  const isLayoutElement = (possibleLayoutElement: ElementType): boolean =>\n    possibleLayoutElement.component === PAGE_ROW_COMPONENT_ID ||\n    possibleLayoutElement.component === PAGE_COLUMN_COMPONENT_ID;\n\n  if (isLayoutElement(element) && element.children?.length === 1) {\n    const onlyChild = element.children[0];\n\n    if (!isLayoutElement(onlyChild)) {\n      return optimizePageElement({\n        ...onlyChild,\n        layout: {\n          ...onlyChild.layout,\n          columnSize: 1,\n        },\n      });\n    }\n  }\n\n  return {\n    ...element,\n    children: element.children && element.children.flatMap((child) => optimizePageElement(child)),\n  };\n}\n\nfunction optimizePage(page: Page): Page {\n  return {\n    ...page,\n    spec: {\n      ...page.spec,\n      content: page.spec?.content?.flatMap((element) => optimizePageElement(element, true)),\n    },\n  };\n}\n\nfunction mergePagesIntoDom(dom: appDom.AppDom, pages: PagesContent): appDom.AppDom {\n  for (const [name, page] of Object.entries(pages)) {\n    dom = mergePageIntoDom(dom, name, optimizePage(page));\n  }\n  return dom;\n}\n\ntype PagesContent = Record<string, Page>;\n\ninterface ExtractedPages {\n  pages: PagesContent;\n  dom: appDom.AppDom;\n}\n\nfunction extractPagesFromDom(dom: appDom.AppDom): ExtractedPages {\n  const rootNode = appDom.getApp(dom);\n  const { pages: pageNodes = [] } = appDom.getChildNodes(dom, rootNode);\n\n  const pages: PagesContent = {};\n\n  for (const pageNode of pageNodes) {\n    pages[pageNode.name] = expandFromDom(pageNode, dom);\n    dom = appDom.removeNode(dom, pageNode.id);\n  }\n\n  return { pages, dom };\n}\n\nfunction extractThemeFromDom(dom: appDom.AppDom): Theme | null {\n  const rootNode = appDom.getApp(dom);\n  const { themes: themeNodes = [] } = appDom.getChildNodes(dom, rootNode);\n  if (themeNodes.length > 0) {\n    return {\n      apiVersion: API_VERSION,\n      kind: 'theme',\n      spec: {\n        options: themeNodes[0].theme,\n      },\n    };\n  }\n\n  return null;\n}\n\nfunction extractApplicationFromDom(dom: appDom.AppDom): Application | null {\n  const rootNode = appDom.getApp(dom);\n  return {\n    apiVersion: API_VERSION,\n    kind: 'application',\n    spec: {\n      plan: rootNode.attributes.plan,\n      authentication: rootNode.attributes.authentication,\n      authorization: rootNode.attributes.authorization,\n    },\n  };\n}\n\nfunction getSchemaUrl(obj: string) {\n  return `https://raw.githubusercontent.com/mui/toolpad/v${packageInfo.version}/docs/schemas/v1/definitions.json#properties/${obj}`;\n}\n\nasync function writePagesToFiles(root: string, pages: PagesContent) {\n  await Promise.all(\n    Object.entries(pages).map(async ([name, page]) => {\n      const pageFileName = getPageFile(root, name);\n      await updateYamlFile(pageFileName, optimizePage(page), {\n        schemaUrl: getSchemaUrl('Page'),\n      });\n    }),\n  );\n}\n\nasync function writeThemeFile(root: string, theme: Theme | null) {\n  const themeFilePath = getThemeFile(root);\n  if (theme) {\n    await updateYamlFile(themeFilePath, theme, {\n      schemaUrl: getSchemaUrl('Theme'),\n    });\n  } else {\n    await fs.rm(themeFilePath, { recursive: true, force: true });\n  }\n}\n\nasync function writeApplicationFile(root: string, application: Application | null) {\n  const applicationFilePath = getApplicationFile(root);\n  if (application) {\n    await updateYamlFile(applicationFilePath, application, {\n      schemaUrl: getSchemaUrl('Application'),\n    });\n  } else {\n    await fs.rm(applicationFilePath, { recursive: true, force: true });\n  }\n}\n\nasync function writeDomToDisk(root: string, dom: appDom.AppDom): Promise<void> {\n  const { pages: pagesContent } = extractPagesFromDom(dom);\n  await Promise.all([\n    writePagesToFiles(root, pagesContent),\n    writeThemeFile(root, extractThemeFromDom(dom)),\n    writeApplicationFile(root, extractApplicationFromDom(dom)),\n  ]);\n}\n\nexport async function findSupportedEditor(): Promise<string | undefined> {\n  if (process.env.EDITOR) {\n    return undefined;\n  }\n  try {\n    await execa('code', ['-v']);\n    return 'code';\n  } catch (err) {\n    return undefined;\n  }\n}\n\nexport type ProjectFolderEntry = {\n  name: string;\n  kind: 'query';\n  filepath: string;\n};\n\ninterface ToolpadProjectFolder {\n  application: Application | null;\n  pages: Record<string, Page>;\n  theme: Theme | null;\n}\n\nasync function readProjectFolder(root: string): Promise<ToolpadProjectFolder> {\n  const [pagesContent, theme, application] = await Promise.all([\n    loadPagesFromFiles(root),\n    loadThemeFromFile(root),\n    loadApplicationFromFile(root),\n  ]);\n\n  return {\n    application,\n    pages: pagesContent,\n    theme,\n  };\n}\n\nasync function writeProjectFolder(root: string, folder: ToolpadProjectFolder): Promise<void> {\n  await Promise.all([\n    writePagesToFiles(root, folder.pages),\n    writeThemeFile(root, folder.theme),\n    writeApplicationFile(root, folder.application),\n  ]);\n}\n\nfunction projectFolderToAppDom(projectFolder: ToolpadProjectFolder): appDom.AppDom {\n  let dom = appDom.createDom();\n  dom = mergePagesIntoDom(dom, projectFolder.pages);\n  if (projectFolder.theme) {\n    dom = mergeThemeIntoAppDom(dom, projectFolder.theme);\n  }\n  if (projectFolder.application) {\n    dom = mergeApplicationIntoDom(dom, projectFolder.application);\n  }\n  return dom;\n}\n\nasync function loadProjectFolder(root: string): Promise<ToolpadProjectFolder> {\n  return readProjectFolder(root);\n}\n\nasync function loadDomFromDisk(root: string): Promise<appDom.AppDom> {\n  const projectFolder = await loadProjectFolder(root);\n\n  return projectFolderToAppDom(projectFolder);\n}\n\nfunction getDomFilePatterns(root: string) {\n  return [\n    path.resolve(root, './pages/*/page.yml'),\n    path.resolve(root, './theme.yml'),\n    path.resolve(root, './application.yml'),\n  ];\n}\n/**\n * Calculates a fingerprint from all files that influence the dom structure\n */\nasync function calculateDomFingerprint(root: string): Promise<number> {\n  const files = await glob(getDomFilePatterns(root), { windowsPathsNoEscape: true });\n\n  const mtimes = await Promise.all(\n    files.sort().map(async (file) => {\n      const stats = await fs.stat(file);\n      return [file, stats.mtimeMs];\n    }),\n  );\n\n  return insecureHash(JSON.stringify(mtimes));\n}\n\nfunction findEnvBindings(obj: unknown): EnvAttrValue[] {\n  if (Array.isArray(obj)) {\n    return obj.flatMap((item) => findEnvBindings(item));\n  }\n\n  if (obj && typeof obj === 'object') {\n    try {\n      return [envBindingSchema.parse(obj)];\n    } catch {\n      return Object.values(obj).flatMap((value) => findEnvBindings(value));\n    }\n  }\n\n  return [];\n}\n\nexport function getRequiredEnvVars(dom: appDom.AppDom): Set<string> {\n  const allVars = Object.values(dom.nodes)\n    .flatMap((node) => findEnvBindings(node))\n    .map((binding) => binding.$$env);\n\n  return new Set(allVars);\n}\n\nconst PRO_AUTH_PROVIDERS = ['azure-ad'];\n\ninterface PaidFeature {\n  id: string;\n  label: string;\n}\n\nfunction detectPaidFeatures(application: Application): PaidFeature[] | null {\n  if (!application.spec || !application.spec.authorization) {\n    return null;\n  }\n\n  const hasRoles = Boolean(application?.spec?.authorization?.roles);\n  const hasProAuthProvider = application?.spec?.authentication?.providers?.some((elems) =>\n    PRO_AUTH_PROVIDERS.includes(elems.provider),\n  );\n  const paidFeatures = [\n    hasRoles ? { id: 'roles', label: 'Role-based access control' } : undefined,\n    hasProAuthProvider\n      ? { id: 'pro-auth-provider', label: 'Some of your active authentication providers' }\n      : undefined,\n  ].filter(Boolean) as PaidFeature[];\n  return paidFeatures.length > 0 ? paidFeatures : null;\n}\n\nclass ToolpadProject {\n  private root: string;\n\n  events = new Emitter<ProjectEvents>();\n\n  private domAndFingerprint: Awaitable<[appDom.AppDom, number]> | null = null;\n\n  private domAndFingerprintLock = new Lock();\n\n  options: ToolpadProjectOptions;\n\n  envManager: EnvManager;\n\n  functionsManager: FunctionsManager;\n\n  dataManager: DataManager;\n\n  private alertedMissingVars = new Set<string>();\n\n  private lastVersionCheck = 0;\n\n  private pendingVersionCheck: Promise<VersionInfo> | undefined;\n\n  private componentsManifestPromise: Promise<ComponentsManifest> | undefined;\n\n  private pagesManifestPromise: Promise<PagesManifest> | undefined;\n\n  constructor(root: string, options: ToolpadProjectOptions) {\n    invariant(\n      // eslint-disable-next-line no-underscore-dangle\n      !global.__toolpadProjects?.has(root),\n      `A project is already running for \"${root}\"`,\n    );\n    // eslint-disable-next-line no-underscore-dangle\n    global.__toolpadProjects ??= new Set();\n    // eslint-disable-next-line no-underscore-dangle\n    global.__toolpadProjects.add(root);\n\n    this.root = root;\n    this.options = options;\n\n    this.envManager = new EnvManager(this);\n    this.functionsManager = new FunctionsManager(this);\n    this.dataManager = new DataManager(this);\n\n    const invalidateQueries = throttle(\n      () => {\n        this.events.emit('queriesInvalidated', {});\n      },\n      250,\n      {\n        leading: false,\n      },\n    );\n\n    this.events.on('functionsChanged', invalidateQueries);\n    this.events.on('envChanged', invalidateQueries);\n  }\n\n  private initWatcher() {\n    if (!this.options.dev) {\n      return;\n    }\n\n    const updateDomFromExternal = debounce(() => {\n      this.domAndFingerprintLock.use(async () => {\n        const [, fingerprint] = await this.loadDomAndFingerprint();\n        const newFingerprint = await calculateDomFingerprint(this.root);\n        if (fingerprint !== newFingerprint) {\n          // eslint-disable-next-line no-console\n          console.log(`${chalk.magenta('event')} - Project changed on disk, updating...`);\n          this.domAndFingerprint = await Promise.all([\n            loadDomFromDisk(this.root),\n            calculateDomFingerprint(this.root),\n          ]);\n          this.events.emit('change', {});\n          this.events.emit('externalChange', {});\n        }\n      });\n    }, 100);\n\n    const watchOptions: chokidar.WatchOptions = {\n      // This is needed to correctly pick up page folder renames\n      // Remove this once https://github.com/paulmillr/chokidar/issues/1285 gets resolved\n      usePolling: true,\n    };\n\n    chokidar.watch(getDomFilePatterns(this.root), watchOptions).on('all', () => {\n      updateDomFromExternal();\n    });\n\n    const handleComponentFileChange = async () => {\n      const oldManifest = await this.componentsManifestPromise;\n      this.componentsManifestPromise = this.buildComponentsManifest();\n      const newManifest = await this.componentsManifestPromise;\n      if (JSON.stringify(oldManifest) !== JSON.stringify(newManifest)) {\n        this.events.emit('componentsListChanged', {});\n      }\n    };\n\n    chokidar\n      .watch(\n        [path.resolve(this.root, './components'), path.resolve(this.root, './components/*.*')],\n        watchOptions,\n      )\n      .on('add', handleComponentFileChange)\n      .on('addDir', handleComponentFileChange)\n      .on('unlink', handleComponentFileChange)\n      .on('unlinkDir', handleComponentFileChange);\n\n    const handlePageFileChange = async () => {\n      const oldManifest = await this.pagesManifestPromise;\n      this.pagesManifestPromise = buildPagesManifest(this.root);\n      const newManifest = await this.pagesManifestPromise;\n      if (JSON.stringify(oldManifest) !== JSON.stringify(newManifest)) {\n        this.events.emit('pagesManifestChanged', {});\n      }\n    };\n\n    chokidar\n      .watch(\n        [path.resolve(this.root, './pages'), path.resolve(this.root, './pages/*/page.*')],\n        watchOptions,\n      )\n      .on('add', handlePageFileChange)\n      .on('addDir', handlePageFileChange)\n      .on('unlink', handlePageFileChange)\n      .on('unlinkDir', handlePageFileChange);\n  }\n\n  private async loadDomAndFingerprint() {\n    if (!this.domAndFingerprint) {\n      this.domAndFingerprint = Promise.all([\n        loadDomFromDisk(this.root),\n        calculateDomFingerprint(this.root),\n      ]);\n    }\n    return this.domAndFingerprint;\n  }\n\n  getRoot() {\n    return this.root;\n  }\n\n  getOutputFolder() {\n    return getOutputFolder(this.getRoot());\n  }\n\n  getAppOutputFolder() {\n    return getAppOutputFolder(this.getRoot());\n  }\n\n  getBuildInfoFile() {\n    return path.resolve(this.getOutputFolder(), 'buildInfo.json');\n  }\n\n  alertOnMissingVariablesInDom(dom: appDom.AppDom) {\n    const requiredVars = getRequiredEnvVars(dom);\n    const missingVars = Array.from(requiredVars).filter(\n      (key) => typeof process.env[key] === 'undefined',\n    );\n    const toAlert = missingVars.filter((key) => !this.alertedMissingVars.has(key));\n\n    if (toAlert.length > 0) {\n      const firstThree = toAlert.slice(0, 3);\n      const restCount = toAlert.length - firstThree.length;\n      const missingListMsg = firstThree.map((varName) => chalk.cyan(varName)).join(', ');\n      const restMsg = restCount > 0 ? ` and ${restCount} more` : '';\n\n      // eslint-disable-next-line no-console\n      console.log(\n        `${chalk.yellow(\n          'warn',\n        )}  - Missing required environment variable(s): ${missingListMsg}${restMsg}.`,\n      );\n    }\n\n    // Only alert once per missing variable\n    this.alertedMissingVars = new Set(missingVars);\n  }\n\n  async checkPlan() {\n    const [dom] = await this.loadDomAndFingerprint();\n\n    const application = extractApplicationFromDom(dom);\n    if (!application || !application.spec) {\n      return;\n    }\n\n    if (!application.spec.plan || application.spec.plan === 'free') {\n      const paidFeatures = detectPaidFeatures(application);\n      if (paidFeatures) {\n        throw new Error(\n          `You are using ${chalk.bgBlue(paidFeatures.map((feature) => feature.label))} which ${paidFeatures.length > 1 ? 'are paid features' : 'is a paid feature'}. To continue using Toolpad, upgrade your plan or remove this feature. Learn more at ${chalk.cyan(UPGRADE_URL)}.`,\n        );\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\n        `${chalk.yellow(\n          'warn',\n        )}  - You are using features that ${chalk.bold('are not covered under our MIT License')}. You will have to buy a license to use them in production.`,\n      );\n    }\n  }\n\n  async start() {\n    if (this.options.dev) {\n      await this.resetBuildInfo();\n      await this.initWatcher();\n    } else {\n      const buildInfo = await this.getBuildInfo();\n      if (!buildInfo) {\n        throw new Error(`No production build found. Please run \"toolpad-studio build\" first.`);\n      }\n\n      if (buildInfo.base !== this.options.base) {\n        throw new Error(\n          `Production build found for base \"${buildInfo.base}\" but running the app with \"${this.options.base}\". Please run \"toolpad-studio build\" with the correct --base option.`,\n        );\n      }\n    }\n    await Promise.all([this.envManager.start(), this.functionsManager.start()]);\n  }\n\n  async build() {\n    await Promise.all([this.envManager.build(), this.functionsManager.build()]);\n  }\n\n  async dispose() {\n    await Promise.all([this.envManager.dispose(), this.functionsManager.dispose()]);\n    // eslint-disable-next-line no-underscore-dangle\n    global.__toolpadProjects?.delete(this.root);\n  }\n\n  async loadDom() {\n    const [dom] = await this.loadDomAndFingerprint();\n    this.alertOnMissingVariablesInDom(dom);\n    return dom;\n  }\n\n  async buildComponentsManifest(): Promise<ComponentsManifest> {\n    const componentsFolder = getComponentsFolder(this.getRoot());\n    const entries = await glob(['*.tsx'], { cwd: componentsFolder });\n    const result = entries.map((fileName) => {\n      const componentName = fileName.replace(/\\.tsx$/, '');\n      if (isValidJsIdentifier(componentName)) {\n        const filePath = path.resolve(componentsFolder, fileName);\n        return { name: componentName, path: filePath };\n      }\n      // eslint-disable-next-line no-console\n      console.log(`Invalid component name: ${componentName}`);\n      return null;\n    });\n    return result.filter(Boolean);\n  }\n\n  async getComponentsManifest(): Promise<ComponentsManifest> {\n    if (!this.componentsManifestPromise) {\n      this.componentsManifestPromise = this.buildComponentsManifest();\n    }\n    return this.componentsManifestPromise;\n  }\n\n  async writeDomToDisk(newDom: appDom.AppDom) {\n    if (!this.options.dev) {\n      throw new Error(`Writing to disk is only possible in Toolpad Studio dev mode.`);\n    }\n\n    await writeDomToDisk(this.root, newDom);\n    const newFingerprint = await calculateDomFingerprint(this.root);\n    this.domAndFingerprint = [newDom, newFingerprint];\n    this.events.emit('change', { fingerprint: newFingerprint });\n  }\n\n  async init() {\n    const projectFolder = await readProjectFolder(this.root);\n    if (Object.keys(projectFolder.pages).length <= 0) {\n      projectFolder.pages.page = {\n        apiVersion: API_VERSION,\n        kind: 'page',\n        spec: {\n          id: appDom.createId(),\n          title: 'Default page',\n        },\n      };\n      await writeProjectFolder(this.root, projectFolder);\n    }\n\n    await initGitignore(this.root);\n  }\n\n  async saveDom(newDom: appDom.AppDom) {\n    await this.domAndFingerprintLock.use(async () => {\n      return this.writeDomToDisk(newDom);\n    });\n  }\n\n  async applyDomDiff(domDiff: appDom.DomDiff) {\n    await this.domAndFingerprintLock.use(async () => {\n      const dom = await this.loadDom();\n      const newDom = appDom.applyDiff(dom, domDiff);\n      return this.writeDomToDisk(newDom);\n    });\n  }\n\n  async openCodeEditor(fileName: string, fileType: CodeEditorFileType) {\n    const supportedEditor = await findSupportedEditor();\n    const root = this.getRoot();\n    let resolvedPath = fileName;\n\n    if (fileType === 'resource') {\n      resolvedPath = await this.functionsManager.getFunctionFilePath(fileName);\n    }\n    if (fileType === 'component') {\n      const componentsFolder = getComponentsFolder(root);\n      resolvedPath = getComponentFilePath(componentsFolder, fileName);\n    }\n    const fullResolvedPath = path.resolve(root, resolvedPath);\n    await openEditor([fullResolvedPath, root], {\n      editor: supportedEditor,\n    });\n  }\n\n  async getVersionInfo(): Promise<VersionInfo> {\n    const now = Date.now();\n    if (!this.pendingVersionCheck || this.lastVersionCheck + VERSION_CHECK_INTERVAL <= now) {\n      this.lastVersionCheck = now;\n      this.pendingVersionCheck = checkVersion(this.root);\n    }\n\n    return this.pendingVersionCheck;\n  }\n\n  async createComponent(name: string) {\n    const componentsFolder = getComponentsFolder(this.root);\n    const filePath = getComponentFilePath(componentsFolder, name);\n    const content = await createDefaultCodeComponent(name, filePath);\n    await writeFileRecursive(filePath, content, { encoding: 'utf-8' });\n  }\n\n  async createDataProvider(name: string, options: CreateDataProviderOptions) {\n    return this.functionsManager.createDataProviderFile(name, options);\n  }\n\n  async deletePage(name: string) {\n    const pageFolder = getPageFolder(this.root, name);\n    await fs.rm(pageFolder, { force: true, recursive: true });\n  }\n\n  async getPrettierConfig() {\n    const root = this.getRoot();\n    const config = await resolvePrettierConfig(root);\n    return config;\n  }\n\n  async writeBuildInfo() {\n    await writeFileRecursive(\n      this.getBuildInfoFile(),\n      JSON.stringify({\n        timestamp: Date.now(),\n        base: this.options.base,\n      } satisfies BuildInfo),\n      { encoding: 'utf-8' },\n    );\n  }\n\n  async resetBuildInfo() {\n    await fs.rm(this.getBuildInfoFile(), { force: true, recursive: true });\n  }\n\n  async getBuildInfo(): Promise<BuildInfo | null> {\n    try {\n      const content = await readJsonFile(this.getBuildInfoFile());\n      return buildInfoSchema.parse(content);\n    } catch {\n      return null;\n    }\n  }\n\n  async getPagesManifest(): Promise<PagesManifest> {\n    if (!this.pagesManifestPromise) {\n      this.pagesManifestPromise = buildPagesManifest(this.root);\n    }\n    return this.pagesManifestPromise;\n  }\n}\n\nexport type { ToolpadProject };\n\nexport function resolveProjectDir(dir: string) {\n  const projectDir = path.resolve(process.cwd(), dir);\n  return projectDir;\n}\n\nexport interface InitProjectOptions extends Partial<ToolpadProjectOptions> {\n  dir: string;\n}\n\nexport async function initProject({ dir: dirInput, ...config }: InitProjectOptions) {\n  const dir = resolveProjectDir(dirInput);\n\n  const resolvedConfig: ToolpadProjectOptions = {\n    toolpadDevMode: false,\n    dev: false,\n    base: '/prod',\n    customServer: false,\n    ...config,\n  };\n\n  const project = new ToolpadProject(dir, resolvedConfig);\n\n  await project.init();\n\n  return project;\n}\n\nconst basePagesManifestEntrySchema = z.object({\n  slug: z.string(),\n  title: z.string(),\n  legacy: z.boolean().optional(),\n});\n\nexport interface PagesManifestEntry extends z.infer<typeof basePagesManifestEntrySchema> {\n  children: PagesManifestEntry[];\n}\n\nconst pagesManifestEntrySchema: z.ZodType<PagesManifestEntry> = basePagesManifestEntrySchema.extend(\n  {\n    children: z.array(z.lazy(() => pagesManifestEntrySchema)),\n  },\n);\n\nconst pagesManifestSchema = z.object({\n  pages: z.array(pagesManifestEntrySchema),\n});\n\nexport type PagesManifest = z.infer<typeof pagesManifestSchema>;\n\nasync function buildPagesManifest(root: string): Promise<PagesManifest> {\n  const pagesFolder = getPagesFolder(root);\n  const pageDirs = await readMaybeDir(pagesFolder);\n  const pages = (\n    await Promise.all(\n      pageDirs.map(async (page) => {\n        if (page.isDirectory()) {\n          const pagePath = path.resolve(pagesFolder, page.name);\n          const title = guessTitle(page.name);\n\n          const extensions = ['.tsx', '.jsx'];\n\n          for (const extension of extensions) {\n            const pageFilePath = path.resolve(pagePath, `page${extension}`);\n\n            // eslint-disable-next-line no-await-in-loop\n            const stat = await fs.stat(pageFilePath).catch(() => null);\n            if (stat?.isFile()) {\n              return [\n                {\n                  slug: page.name,\n                  title,\n                  children: [],\n                },\n              ];\n            }\n          }\n\n          const pageFilePath = path.resolve(pagePath, 'page.yml');\n\n          const stat = await fs.stat(pageFilePath).catch(() => null);\n          if (stat?.isFile()) {\n            return [\n              {\n                slug: page.name,\n                title,\n                legacy: true,\n                children: [],\n              },\n            ];\n          }\n        }\n\n        return [];\n      }),\n    )\n  ).flat();\n\n  pages.sort((page1, page2) => page1.title.localeCompare(page2.title));\n\n  return { pages };\n}\n\nexport async function loadDom(root: string) {\n  const resolvedRoot = resolveProjectDir(root);\n  return loadDomFromDisk(resolvedRoot);\n}\n","import { SimplePaletteColorOptions, ThemeOptions } from '@mui/material';\nimport { z } from 'zod';\n\nexport const API_VERSION = 'v1';\n\nfunction toolpadObjectSchema<K extends string, T extends z.ZodType>(kind: K, spec: T) {\n  return z.object({\n    apiVersion: z\n      .literal('v1')\n      .describe(\n        `Defines the version of this object. Used in determining compatibility between Toolpad Studio \"${kind}\" objects.`,\n      ),\n    kind: z.literal(kind).describe(`Describes the nature of this Toolpad Studio \"${kind}\" object.`),\n    spec: spec.optional().describe(`Defines the shape of this \"${kind}\" object`),\n  });\n}\n\nconst literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);\n\nfunction nameValuePairSchema<V extends z.ZodTypeAny>(valueType: V) {\n  return z\n    .object({\n      name: z.string().describe('The name'),\n      value: valueType.describe(valueType.description ?? 'The value'),\n    })\n    .describe('A name/value pair.');\n}\n\nexport const jsExpressionBindingSchema = z\n  .object({\n    $$jsExpression: z.string().describe('The expression to be evaluated.'),\n  })\n  .describe('A binding that evaluates an expression and returns the result.');\n\nexport const envBindingSchema = z\n  .object({\n    $$env: z.string().describe('The name of an environment variable.'),\n  })\n  .describe('An environment variable.');\n\nfunction bindableSchema<V extends z.ZodTypeAny>(valueType: V) {\n  return z.union([valueType, jsExpressionBindingSchema, envBindingSchema]);\n}\n\nconst jsExpressionActionSchema = z\n  .object({\n    $$jsExpressionAction: z.string().describe('The code to be executed.'),\n  })\n  .describe('A javascript expression to be executed when this action is triggered.');\n\nconst navigationActionSchema = z\n  .object({\n    $$navigationAction: z.object({\n      page: z.string().describe('The page that is being navigated to'),\n      parameters: z\n        .record(bindableSchema(z.any()))\n        .describe('Parameters to pass when navigating to this page'),\n    }),\n  })\n  .describe(\n    'A navigation from one page to another, optionally passing parameters to the next page.',\n  );\n\nexport type NavigationAction = z.infer<typeof navigationActionSchema>;\n\nconst fetchModeSchema = z.union([\n  z.literal('query').describe('Fetch automatically when the page opens'),\n  z.literal('mutation').describe('Fetch on manual action only'),\n]);\n\nconst nameStringValuePairSchema = nameValuePairSchema(z.string()).describe(\n  'a name/value pair with a string value.',\n);\n\nconst rawBodySchema = z.object({\n  kind: z.literal('raw'),\n  content: bindableSchema(z.string()),\n  contentType: z.string(),\n});\n\nconst bindableNameStringValueSchema = nameValuePairSchema(bindableSchema(z.string())).describe(\n  'A name/value pair where the value is dynamically bindable to strings.',\n);\n\nconst urlEncodedBodySchema = z.object({\n  kind: z.literal('urlEncoded'),\n  content: z.array(bindableNameStringValueSchema),\n});\n\nconst fetchBodySchema = z.discriminatedUnion('kind', [rawBodySchema, urlEncodedBodySchema]);\n\nexport type FetchBody = z.infer<typeof fetchBodySchema>;\n\nconst rawResponseTypeSchema = z\n  .object({\n    kind: z.literal('raw'),\n  })\n  .describe(\"Don't interpret this body at all.\");\n\nconst jsonResponseTypeSchema = z\n  .object({\n    kind: z.literal('json'),\n  })\n  .describe('Interpret the fetch response as JSON');\n\nconst csvResponseTypeSchema = z\n  .object({\n    kind: z.literal('csv'),\n    headers: z.boolean().describe('First row contains headers'),\n  })\n  .describe('Interpret the fetch response as CSV');\n\nconst xmlResponseTypeSchema = z\n  .object({\n    kind: z.literal('xml'),\n  })\n  .describe('Interpret the fetch response as XML');\n\nconst responseTypeSchema = z\n  .discriminatedUnion('kind', [\n    rawResponseTypeSchema,\n    jsonResponseTypeSchema,\n    csvResponseTypeSchema,\n    xmlResponseTypeSchema,\n  ])\n  .describe('Describes how a the fetch response is to be interpreted.');\n\nexport type ResponseType = z.infer<typeof responseTypeSchema>;\n\nconst fetchQueryConfigSchema = z.object({\n  kind: z.literal('rest').describe('Designates this object as a fetch query.'),\n  url: bindableSchema(z.string()).optional().describe('The URL of the request'),\n  method: z.string().optional().describe('The request method.'),\n  headers: z.array(bindableNameStringValueSchema).optional().describe('Extra request headers.'),\n  searchParams: z\n    .array(bindableNameStringValueSchema)\n    .optional()\n    .describe('Extra url query parameters.'),\n  body: fetchBodySchema.optional().describe('The request body.'),\n  transformEnabled: z.boolean().optional().describe('Run a custom transformer on the response.'),\n  transform: z.string().optional().describe('The custom transformer to run when enabled.'),\n  response: responseTypeSchema.optional().describe('How to parse the response.'),\n});\n\nexport type FetchQueryConfig = z.infer<typeof fetchQueryConfigSchema>;\n\nconst localQueryConfigSchema = z.object({\n  kind: z.literal('local').describe('Designates this object as a local function query.'),\n  function: z\n    .string()\n    .optional()\n    .describe('The function to be executed on the backend by this query.'),\n});\n\nexport type LocalQueryConfig = z.infer<typeof localQueryConfigSchema>;\n\nconst queryConfigSchema = z.discriminatedUnion('kind', [\n  fetchQueryConfigSchema,\n  localQueryConfigSchema,\n]);\n\nexport type QueryConfig = z.infer<typeof queryConfigSchema>;\n\nconst querySchema = z.object({\n  name: z.string().describe('A name for the query'),\n  enabled: bindableSchema(z.boolean())\n    .optional()\n    .describe(\n      \"Activates or deactivates the query. When deactivated the data won't be loaded when the page opens.\",\n    ),\n  parameters: z\n    .array(nameValuePairSchema(bindableSchema(z.any())))\n    .optional()\n    .describe('Parameters to pass to this query.'),\n  mode: fetchModeSchema.optional().describe('How to fetch this query.'),\n  query: queryConfigSchema.optional().describe('Query definition'),\n  transform: z.string().optional().describe('Transformation to run on the response'),\n  transformEnabled: z.boolean().optional().describe('Enable the transformation'),\n  refetchInterval: z.number().optional().describe('Interval to rerun this query at'),\n  cacheTime: z.number().optional().describe('Time to cache before refetching'),\n});\n\nexport type Query = z.infer<typeof querySchema>;\n\nexport type Template = {\n  $$template: ElementType[];\n};\n\nlet elementSchema: z.ZodType<ElementType>;\n\nconst templateSchema: z.ZodType<Template> = z\n  .object({\n    $$template: z\n      .lazy(() => z.array(elementSchema))\n      .describe('The subtree, that describes the UI to be rendered by the template.'),\n  })\n  .describe('Describes a fragment of Toolpad Studio elements, to be used as a template.');\n\nconst baseElementSchema = z.object({\n  component: z.string().describe('The component that this element was based on.'),\n  name: z\n    .string()\n    .describe('a name for this component, which is used to reference it inside bindings.'),\n  layout: z\n    .object({\n      horizontalAlign: z\n        .string()\n        .optional()\n        .describe('Lays out the element along the horizontal axis.'),\n      verticalAlign: z\n        .string()\n        .optional()\n        .describe('Lays out the element along the vertical axis.'),\n      columnSize: z\n        .number()\n        .optional()\n        .describe('The width this element takes up, expressed in terms of columns on the page.'),\n      height: z.number().optional().describe('The height this element takes up, in pixels.'),\n    })\n    .optional()\n    .describe('Layout properties for this element.'),\n});\n\ntype BaseElement = z.infer<typeof baseElementSchema>;\n\nexport const bindablePropSchema: z.ZodType = z.lazy(() =>\n  z.union([\n    ...literalSchema.options,\n    z.array(bindablePropSchema),\n    z.record(\n      z.string().refine((key) => !key.startsWith('$$')),\n      bindablePropSchema,\n    ),\n    jsExpressionBindingSchema,\n    envBindingSchema,\n    jsExpressionActionSchema,\n    navigationActionSchema,\n    templateSchema,\n  ]),\n);\n\nexport type BindableProp = z.infer<typeof bindablePropSchema>;\n\nexport type ElementType = BaseElement & {\n  children?: ElementType[];\n  props?: Record<string, BindableProp>;\n};\n\nelementSchema = baseElementSchema\n  .extend({\n    children: z\n      .lazy(() => z.array(elementSchema).optional())\n      .describe('The children of this element.'),\n    props: z\n      .lazy(() => z.record(bindablePropSchema).optional())\n      .describe('The properties to configure this instance of the component.'),\n  })\n  .describe('The instance of a component. Used to build user interfaces in pages.');\n\nexport const applicationSchema = toolpadObjectSchema(\n  'application',\n  z.object({\n    plan: z.enum(['free', 'pro']).optional().describe('The plan for this application.'),\n    authentication: z\n      .object({\n        providers: z\n          .array(\n            z.object({\n              provider: z\n                .enum(['github', 'google', 'azure-ad', 'credentials'])\n                .describe('Unique identifier for this authentication provider.'),\n              roles: z\n                .array(\n                  z.object({\n                    source: z\n                      .array(z.string())\n                      .describe('Authentication provider roles to be mapped from.'),\n                    target: z.string().describe('Toolpad Studio role to be mapped to.'),\n                  }),\n                )\n                .optional()\n                .describe('Role mapping definition for this authentication provider.'),\n            }),\n          )\n          .optional()\n          .describe('Authentication providers to use.'),\n        restrictedDomains: z\n          .array(z.string())\n          .optional()\n          .describe('Valid email patterns for the authenticated user.'),\n      })\n      .optional()\n      .describe('Authentication configuration for this application.'),\n    authorization: z\n      .object({\n        roles: z\n          .array(\n            z.union([\n              z.string(),\n              z.object({\n                name: z.string().describe('The name of the role.'),\n                description: z.string().optional().describe('A description of the role.'),\n              }),\n            ]),\n          )\n          .optional()\n          .describe('Available roles for this application. These can be assigned to users.'),\n      })\n      .optional()\n      .describe('Authorization configuration for this application.'),\n  }),\n);\n\nexport type Application = z.infer<typeof applicationSchema>;\n\nexport const pageSchema = toolpadObjectSchema(\n  'page',\n  z.object({\n    displayName: z.string().optional().describe('Page name to display in the UI.'),\n    id: z\n      .string()\n      .optional()\n      .describe('Serves as a canonical id of the page. Deprecated: use an alias instead.'),\n    alias: z.array(z.string()).optional().describe('Page name aliases.'),\n    title: z.string().optional().describe('Title for this page.'),\n    parameters: z\n      .array(nameStringValuePairSchema)\n      .optional()\n      .describe('Parameters for the page. These can be set inside of the url query string.'),\n    queries: z\n      .array(querySchema)\n      .optional()\n      .describe('Queries that are used by the page. These will load data when the page opens.'),\n    content: z\n      .array(elementSchema)\n      .optional()\n      .describe('The content of the page. This defines the UI.'),\n    authorization: z\n      .object({\n        allowAll: z.boolean().optional().describe('Allow all users to access this page.'),\n        allowedRoles: z\n          .array(z.string())\n          .optional()\n          .describe('Roles that are allowed to access this page.'),\n      })\n      .optional()\n      .describe('Authorization configuration for this page.'),\n    display: z\n      .union([\n        z\n          .literal('standalone')\n          .describe('Hide the Toolpad Studio chrome and just display the content of the page'),\n        z.literal('shell').describe('Show Toolpad Studio header and navigation.'),\n      ])\n      .optional()\n      .describe(\n        'Display mode of the page. This can also be set at runtime with the toolpad-display query parameter',\n      ),\n    maxWidth: z\n      .union([\n        z.literal('xs'),\n        z.literal('sm'),\n        z.literal('md'),\n        z.literal('lg'),\n        z.literal('xl'),\n        z.literal('none'),\n      ])\n      .optional()\n      .describe('Top level element of the page.'),\n  }),\n);\n\nconst simplePaletteColorOptionsSchema: z.ZodType<SimplePaletteColorOptions> = z.object({\n  main: z.string(),\n  light: z.string().optional(),\n  dark: z.string().optional(),\n  contrastText: z.string().optional(),\n});\n\nconst themeOptionsSchema: z.ZodType<ThemeOptions> = z\n  .object({\n    // TODO: expand to full MUI theme object\n    palette: z\n      .object({\n        mode: z.union([z.literal('light'), z.literal('dark')]).optional(),\n        primary: simplePaletteColorOptionsSchema.optional(),\n        secondary: simplePaletteColorOptionsSchema.optional(),\n      })\n      .passthrough()\n      .optional(),\n  })\n  .passthrough();\n\nexport type Page = z.infer<typeof pageSchema>;\n\nexport const themeSchema = toolpadObjectSchema(\n  'theme',\n  z.object({\n    options: themeOptionsSchema\n      .optional()\n      .describe(\"The ThemeOptions object that gets fed into MUI's createTheme function.\"),\n  }),\n);\n\nexport type Theme = z.infer<typeof themeSchema>;\n\nexport const META = {\n  schemas: {\n    Application: applicationSchema,\n    Page: pageSchema,\n    Theme: themeSchema,\n  },\n  definitions: {\n    JsExpressionBinding: jsExpressionBindingSchema,\n    EnvBinding: envBindingSchema,\n    JsExpressionAction: jsExpressionActionSchema,\n    NavigationAction: navigationActionSchema,\n    BindableProp: bindablePropSchema,\n    Element: elementSchema,\n    Template: templateSchema,\n    NameStringValuePair: nameStringValuePairSchema,\n    BindableNameStringValue: bindableNameStringValueSchema,\n    SimplePaletteColorOptions: simplePaletteColorOptionsSchema,\n  },\n};\n","import * as path from 'path';\nimport * as chokidar from 'chokidar';\nimport * as dotenv from 'dotenv';\nimport { Emitter } from '@toolpad/utils/events';\nimport chalk from 'chalk';\nimport { truncate } from '@toolpad/utils/strings';\nimport { Awaitable } from '@toolpad/utils/types';\nimport { ProjectEvents } from '../types';\n\ninterface IToolpadProject {\n  options: { dev: boolean };\n  events: Emitter<ProjectEvents>;\n  getRoot(): string;\n}\n\n/**\n * Get file path for the env file.\n */\nfunction getEnvFilePath() {\n  return path.resolve(process.cwd(), '.env');\n}\n\n/**\n * Handles loading env files and watches for updates.\n */\nexport default class EnvManager {\n  private project: IToolpadProject;\n\n  private originalEnv: Record<string, string | undefined> = { ...process.env };\n\n  private values: Awaitable<Record<string, string>> = {};\n\n  private watcher: chokidar.FSWatcher | undefined;\n\n  constructor(project: IToolpadProject) {\n    this.project = project;\n  }\n\n  async start() {\n    this.loadEnvFile();\n    if (this.project.options.dev) {\n      this.initWatcher();\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async build() {\n    // Dummy method\n  }\n\n  async dispose() {\n    await this.watcher?.close();\n  }\n\n  private resetEnv() {\n    Object.keys(process.env).forEach((key) => {\n      delete process.env[key];\n    });\n    Object.assign(process.env, this.originalEnv);\n  }\n\n  private loadEnvFile() {\n    const envFilePath = getEnvFilePath();\n    this.resetEnv();\n    const { parsed = {} } = dotenv.config({ path: envFilePath, override: true });\n    this.values = parsed;\n    // eslint-disable-next-line no-console\n    console.log(\n      `${chalk.blue('info')}  - loaded env file \"${envFilePath}\" with keys ${truncate(\n        Object.keys(parsed).join(', '),\n        1000,\n      )}`,\n    );\n  }\n\n  private initWatcher() {\n    if (!this.project.options.dev) {\n      return;\n    }\n\n    this.watcher = chokidar.watch([getEnvFilePath()], {\n      usePolling: true,\n      ignoreInitial: true,\n    });\n\n    const handleChange = async () => {\n      this.loadEnvFile();\n\n      this.project.events.emit('envChanged', {});\n    };\n\n    this.watcher.on('add', handleChange);\n    this.watcher.on('unlink', handleChange);\n    this.watcher.on('change', handleChange);\n  }\n\n  async getDeclaredKeys(): Promise<string[]> {\n    return Object.keys(this.values);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getEnv() {\n    return process.env;\n  }\n}\n","import * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { Emitter } from '@toolpad/utils/events';\nimport * as esbuild from 'esbuild';\nimport { ensureSuffix, indent } from '@toolpad/utils/strings';\nimport * as chokidar from 'chokidar';\nimport chalk from 'chalk';\nimport { glob } from 'glob';\nimport { writeFileRecursive, fileExists, readJsonFile } from '@toolpad/utils/fs';\nimport Piscina from 'piscina';\nimport {\n  ExecFetchResult,\n  GetRecordsParams,\n  GetRecordsResult,\n  PaginationMode,\n  ToolpadDataProviderIntrospection,\n} from '@toolpad/studio-runtime';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport * as url from 'node:url';\nimport type { GridRowId } from '@mui/x-data-grid';\nimport invariant from 'invariant';\nimport { Awaitable } from '@toolpad/utils/types';\nimport { ProjectEvents } from '../types';\nimport * as functionsRuntime from './functionsRuntime';\nimport type { ExtractTypesParams, IntrospectionResult } from './functionsTypesWorker';\nimport { format } from '../utils/prettier';\nimport { compilerOptions } from './functionsShared';\n\nexport interface CreateDataProviderOptions {\n  paginationMode: PaginationMode;\n}\n\nconst currentDirectory = url.fileURLToPath(new URL('.', String(import.meta.url)));\n\nasync function createDefaultFunction(filePath: string): Promise<string> {\n  const result = await format(\n    `\n    /**\n     * Toolpad Studio handlers file.\n     */\n\n    export default async function handler (message: string) {\n      return \\`Hello \\${message}\\`;\n    }\n  `,\n    filePath,\n  );\n  return result;\n}\n\nasync function createDefaultDataProvider(\n  filePath: string,\n  options: CreateDataProviderOptions,\n): Promise<string> {\n  const result = await format(\n    `\n    /**\n     * Toolpad data provider file.\n     * See: https://mui.com/toolpad/studio/concepts/data-providers/\n     */\n\n    import { createDataProvider } from '@toolpad/studio/server';\n\n    export default createDataProvider({\n      ${options.paginationMode === 'cursor' ? 'paginationMode: \"cursor\",' : ''}\n      async getRecords({ paginationModel: ${\n        options.paginationMode === 'cursor' ? '{ cursor, pageSize }' : '{ start, pageSize }'\n      } }) {\n        return {\n          records: [],\n          ${options.paginationMode === 'cursor' ? 'cursor: null,' : ''}\n        };\n      }\n    })\n  `,\n    filePath,\n  );\n  return result;\n}\n\nfunction formatCodeFrame(location: esbuild.Location): string {\n  const lineNumberCharacters = Math.ceil(Math.log10(location.line));\n  return [\n    `${location.file}:${location.line}:${location.column}:`,\n    `  ${location.line} │ ${location.lineText}`,\n    `  ${' '.repeat(lineNumberCharacters)} ╵ ${' '.repeat(\n      Math.max(location.lineText.length - 1, 0),\n    )}^`,\n  ].join('\\n');\n}\n\nfunction formatError(esbuildError: esbuild.Message): Error {\n  let messageText = esbuildError.text;\n  if (esbuildError.location) {\n    const formattedLocation = indent(formatCodeFrame(esbuildError.location), 2);\n    messageText = [messageText, formattedLocation].join('\\n');\n  }\n  return new Error(messageText);\n}\n\ninterface IToolpadProject {\n  options: { dev: boolean };\n  events: Emitter<ProjectEvents>;\n  getRoot(): string;\n  getOutputFolder(): string;\n}\n\nexport default class FunctionsManager {\n  private project: IToolpadProject;\n\n  private buildErrors: esbuild.Message[] = [];\n\n  private extractedTypes: Awaitable<IntrospectionResult> | undefined;\n\n  private extractTypesWorker: Piscina | undefined;\n\n  private buildCtx: esbuild.BuildContext | undefined;\n\n  constructor(project: IToolpadProject) {\n    this.project = project;\n  }\n\n  private getResourcesFolder(): string {\n    return path.join(this.project.getRoot(), './resources');\n  }\n\n  private getFunctionsFile(): string {\n    return path.join(this.getResourcesFolder(), './functions.ts');\n  }\n\n  async getFunctionFilePath(fileName: string): Promise<string> {\n    const resourcesFolder = this.getResourcesFolder();\n    return path.join(resourcesFolder, fileName);\n  }\n\n  private getFunctionResourcesPattern(): string {\n    return path.join(this.getResourcesFolder(), '*.ts');\n  }\n\n  private async migrateLegacy() {\n    const legacyQueriesFile = path.resolve(this.project.getRoot(), 'queries.ts');\n    if (await fileExists(legacyQueriesFile)) {\n      const functionsFile = this.getFunctionsFile();\n      await fs.mkdir(path.dirname(functionsFile), { recursive: true });\n      await fs.rename(legacyQueriesFile, functionsFile);\n    }\n  }\n\n  private async getFunctionFiles(): Promise<string[]> {\n    const paths = await glob(this.getFunctionResourcesPattern(), { windowsPathsNoEscape: true });\n    return paths.map((fullPath) => path.relative(this.project.getRoot(), fullPath));\n  }\n\n  private getBuildErrorsForFile(entryPoint: string) {\n    return this.buildErrors.filter((error) => error.location?.file === entryPoint);\n  }\n\n  private getFunctionsOutputFolder(): string {\n    return path.resolve(this.project.getOutputFolder(), 'functions');\n  }\n\n  private getIntrospectJsonPath(): string {\n    return path.resolve(this.getFunctionsOutputFolder(), 'introspect.json');\n  }\n\n  private async extractTypes() {\n    if (!this.extractTypesWorker) {\n      this.extractTypesWorker = new Piscina({\n        filename: path.resolve(currentDirectory, '../cli/functionsTypesWorker.mjs'),\n      });\n    }\n\n    const extractedTypes: Promise<IntrospectionResult> = this.extractTypesWorker\n      .run({ resourcesFolder: this.getResourcesFolder() } satisfies ExtractTypesParams, {})\n      .catch((error: unknown) => ({\n        error,\n        files: [],\n      }));\n    return extractedTypes;\n  }\n\n  private async createEsbuildContext() {\n    const root = this.project.getRoot();\n\n    const onFunctionBuildStart = async () => {\n      this.extractedTypes = undefined;\n    };\n\n    const onFunctionsBuildEnd = async (args: esbuild.BuildResult<esbuild.BuildOptions>) => {\n      // TODO: use for hot reloading\n      // eslint-disable-next-line no-console\n      console.log(\n        `${chalk.green('ready')} - built functions.ts: ${args.errors.length} error(s), ${\n          args.warnings.length\n        } warning(s)`,\n      );\n\n      this.buildErrors = args.errors;\n\n      this.project.events.emit('functionsChanged', {});\n    };\n\n    const toolpadStudioPlugin: esbuild.Plugin = {\n      name: 'toolpad-studio',\n      setup(build) {\n        build.onStart(onFunctionBuildStart);\n        build.onEnd(onFunctionsBuildEnd);\n      },\n    };\n\n    const entryPoints = await this.getFunctionFiles();\n    return esbuild.context({\n      absWorkingDir: root,\n      entryPoints,\n      plugins: [toolpadStudioPlugin],\n      write: true,\n      bundle: true,\n      metafile: true,\n      outdir: this.getFunctionsOutputFolder(),\n      outExtension: { '.js': '.mjs' },\n      platform: 'node',\n      format: 'esm',\n      packages: 'external',\n      target: 'es2022',\n      tsconfigRaw: JSON.stringify({ compilerOptions }),\n      loader: {\n        '.txt': 'text',\n        '.sql': 'text',\n      },\n    });\n  }\n\n  private async startWatchingFunctionFiles() {\n    // Make sure we pick up added/removed function files\n    const resourcesWatcher = chokidar.watch([this.getFunctionResourcesPattern()], {\n      ignoreInitial: true,\n    });\n\n    const reinitializeWatcher = async () => {\n      await this.buildCtx?.dispose();\n      this.buildCtx = await this.createEsbuildContext();\n      await this.buildCtx.watch();\n    };\n\n    reinitializeWatcher();\n    resourcesWatcher.on('add', reinitializeWatcher);\n    resourcesWatcher.on('unlink', reinitializeWatcher);\n  }\n\n  async start() {\n    if (this.project.options.dev) {\n      await this.migrateLegacy();\n      await this.startWatchingFunctionFiles();\n    }\n  }\n\n  async build() {\n    const ctx = await this.createEsbuildContext();\n    await ctx.rebuild();\n    await ctx.dispose();\n\n    const types = await this.extractTypes();\n    if (types.error) {\n      throw errorFrom(types.error);\n    }\n\n    await fs.mkdir(this.getFunctionsOutputFolder(), { recursive: true });\n    await fs.writeFile(this.getIntrospectJsonPath(), JSON.stringify(types, null, 2), 'utf-8');\n  }\n\n  private async disposeBuildcontext() {\n    this.buildCtx?.dispose();\n    this.buildCtx = undefined;\n  }\n\n  async dispose() {\n    await Promise.all([this.disposeBuildcontext(), this.extractTypesWorker?.destroy()]);\n  }\n\n  async getBuiltOutputFilePath(fileName: string): Promise<string> {\n    const resourcesFolder = this.getResourcesFolder();\n    const fullPath = path.resolve(resourcesFolder, fileName);\n    const entryPoint = path.relative(this.project.getRoot(), fullPath);\n\n    const buildErrors = this.getBuildErrorsForFile(entryPoint);\n\n    if (buildErrors.length > 0) {\n      throw formatError(buildErrors[0]);\n    }\n\n    const outputFilePath = path.resolve(\n      this.getFunctionsOutputFolder(),\n      `${path.basename(fileName, '.ts')}.mjs`,\n    );\n\n    return outputFilePath;\n  }\n\n  async exec(\n    fileName: string,\n    name: string,\n    parameters: Record<string, unknown>,\n  ): Promise<ExecFetchResult<unknown>> {\n    const extractedTypes = await this.introspect();\n\n    if (extractedTypes.error) {\n      throw errorFrom(extractedTypes.error);\n    }\n\n    const file = extractedTypes.files.find((fileEntry) => fileEntry.name === fileName);\n    const handler = file?.handlers.find((handlerEntry) => handlerEntry.name === name);\n\n    if (!handler) {\n      throw new Error(`No function found with the name \"${name}\"`);\n    }\n\n    const executeParams = handler.isCreateFunction\n      ? [{ parameters }]\n      : handler.parameters.map(([parameterName]) => parameters[parameterName]);\n\n    return this.execFunction(fileName, name, executeParams);\n  }\n\n  async execFunction(\n    fileName: string,\n    name: string,\n    parameters: unknown[],\n  ): Promise<ExecFetchResult<unknown>> {\n    const outputFilePath = await this.getBuiltOutputFilePath(fileName);\n\n    const data = await functionsRuntime.execute(outputFilePath, name, parameters);\n\n    return { data };\n  }\n\n  async introspect(): Promise<IntrospectionResult> {\n    if (!this.extractedTypes) {\n      if (this.project.options.dev) {\n        this.extractedTypes = this.extractTypes();\n      } else {\n        this.extractedTypes = readJsonFile(\n          this.getIntrospectJsonPath(),\n        ) as Promise<IntrospectionResult>;\n      }\n    }\n\n    return this.extractedTypes;\n  }\n\n  async createFunctionFile(name: string): Promise<void> {\n    const filePath = path.resolve(this.getResourcesFolder(), ensureSuffix(name, '.ts'));\n    const content = await createDefaultFunction(filePath);\n    if (await fileExists(filePath)) {\n      throw new Error(`\"${name}\" already exists`);\n    }\n    await writeFileRecursive(filePath, content, { encoding: 'utf-8' });\n    this.extractedTypes = undefined;\n  }\n\n  async createDataProviderFile(name: string, options: CreateDataProviderOptions): Promise<void> {\n    const filePath = path.resolve(this.getResourcesFolder(), ensureSuffix(name, '.ts'));\n    const content = await createDefaultDataProvider(filePath, options);\n    if (await fileExists(filePath)) {\n      throw new Error(`\"${name}\" already exists`);\n    }\n    await writeFileRecursive(filePath, content, { encoding: 'utf-8' });\n    this.extractedTypes = undefined;\n  }\n\n  async introspectDataProvider(\n    fileName: string,\n    exportName: string = 'default',\n  ): Promise<ToolpadDataProviderIntrospection> {\n    const fullPath = await this.getBuiltOutputFilePath(fileName);\n    const dataProvider = await functionsRuntime.loadDataProvider(fullPath, exportName);\n    return {\n      paginationMode: dataProvider.paginationMode,\n      hasDeleteRecord: !!dataProvider.deleteRecord,\n      hasUpdateRecord: !!dataProvider.updateRecord,\n      hasCreateRecord: !!dataProvider.createRecord,\n    };\n  }\n\n  async getDataProviderRecords<R, P extends PaginationMode>(\n    fileName: string,\n    exportName: string,\n    params: GetRecordsParams<R, P>,\n  ): Promise<GetRecordsResult<R, P>> {\n    const fullPath = await this.getBuiltOutputFilePath(fileName);\n    const dataProvider = await functionsRuntime.loadDataProvider(fullPath, exportName);\n    return dataProvider.getRecords(params);\n  }\n\n  async deleteDataProviderRecord(\n    fileName: string,\n    exportName: string,\n    id: GridRowId,\n  ): Promise<void> {\n    const fullPath = await this.getBuiltOutputFilePath(fileName);\n    const dataProvider = await functionsRuntime.loadDataProvider(fullPath, exportName);\n    invariant(dataProvider.deleteRecord, 'DataProvider does not support deleteRecord');\n    return dataProvider.deleteRecord(id);\n  }\n\n  async updateDataProviderRecord(\n    fileName: string,\n    exportName: string,\n    id: GridRowId,\n    values: Record<string, unknown>,\n  ): Promise<void> {\n    const fullPath = await this.getBuiltOutputFilePath(fileName);\n    const dataProvider = await functionsRuntime.loadDataProvider(fullPath, exportName);\n    invariant(dataProvider.updateRecord, 'DataProvider does not support updateRecord');\n    return dataProvider.updateRecord(id, values);\n  }\n\n  async createDataProviderRecord(\n    fileName: string,\n    exportName: string,\n    values: Record<string, unknown>,\n  ): Promise<void> {\n    const fullPath = await this.getBuiltOutputFilePath(fileName);\n    const dataProvider = await functionsRuntime.loadDataProvider(fullPath, exportName);\n    invariant(dataProvider.createRecord, 'DataProvider does not support createRecord');\n    return dataProvider.createRecord(values);\n  }\n}\n","import * as path from 'path';\nimport * as url from 'url';\nimport * as fs from 'fs/promises';\nimport { TOOLPAD_DATA_PROVIDER_MARKER, ToolpadDataProvider } from '@toolpad/studio-runtime/server';\nimport * as z from 'zod';\nimport { fromZodError } from 'zod-validation-error';\nimport * as crypto from 'crypto';\n\nasync function loadExports(filePath: string): Promise<Map<string, unknown>> {\n  // Need a valid file URL on Windows for the dynamic import()\n  const importFileUrl = url.pathToFileURL(path.resolve(filePath));\n  const content = await fs.readFile(importFileUrl, 'utf-8');\n  const hash = crypto.createHash('md5').update(content).digest('hex');\n  importFileUrl.searchParams.set('hash', hash);\n  // `webpackIgnore: true` is used to instruct webpack in Next.js to use the native import() function\n  // instead of trying to bundle the dynamic import() call\n  const exports = await import(/* webpackIgnore: true */ importFileUrl.href);\n  return new Map(Object.entries(exports));\n}\n\nconst dataProviderSchema: z.ZodType<ToolpadDataProvider<any, any>> = z.object({\n  paginationMode: z.enum(['index', 'cursor']).optional().default('index'),\n  getRecords: z.function(z.tuple([z.any()]), z.any()),\n  deleteRecord: z.function(z.tuple([z.any()]), z.any()).optional(),\n  updateRecord: z.function(z.tuple([z.any(), z.any()]), z.any()).optional(),\n  createRecord: z.function(z.tuple([z.any()]), z.any()).optional(),\n  [TOOLPAD_DATA_PROVIDER_MARKER]: z.literal(true),\n});\n\nexport async function loadDataProvider(\n  filePath: string,\n  name: string,\n): Promise<ToolpadDataProvider<any, any>> {\n  const exports = await loadExports(filePath);\n  const dataProviderExport = exports.get(name);\n\n  if (!dataProviderExport || typeof dataProviderExport !== 'object') {\n    throw new Error(`DataProvider \"${name}\" not found`);\n  }\n\n  const parsed = dataProviderSchema.safeParse(dataProviderExport);\n\n  if (parsed.success) {\n    return parsed.data;\n  }\n\n  throw fromZodError(parsed.error);\n}\n\nexport async function execute(filePath: string, name: string, parameters: unknown[]): Promise<any> {\n  const exports = await loadExports(filePath);\n\n  const fn = exports.get(name);\n  if (typeof fn !== 'function') {\n    throw new Error(`Function \"${name}\" not found`);\n  }\n\n  const result = await fn(...parameters);\n\n  return result;\n}\n","import ts from 'typescript';\n\nexport const compilerOptions: ts.CompilerOptions = {\n  noEmit: true,\n  target: ts.ScriptTarget.ESNext,\n  lib: ['lib.esnext.d.ts'],\n  types: ['node'],\n  // NOTE: strictNullChecks is essential for the type extraction to work properly. When we decide\n  // to support user-defined tsconfig.json, we must make sure this option is enabled.\n  strictNullChecks: true,\n  module: ts.ModuleKind.CommonJS,\n  moduleResolution: ts.ModuleResolutionKind.Bundler,\n  esModuleInterop: true,\n  allowSyntheticDefaultImports: true,\n};\n","import * as path from 'path';\nimport latestVersion from 'latest-version';\nimport * as semver from 'semver';\nimport { fileExists } from '@toolpad/utils/fs';\nimport pkg from '../../package.json';\n\nexport type PackageManager = 'npm' | 'yarn' | 'pnpm';\n\nasync function detectPackageManager(root: string) {\n  const [hasYarnLock, hasPackageLock, hasPnpmLock] = await Promise.all([\n    fileExists(path.resolve(root, './yarn.lock')),\n    fileExists(path.resolve(root, './package-lock.lock')),\n    fileExists(path.resolve(root, './pnpm-lock.lock')),\n  ]);\n\n  if (hasYarnLock) {\n    return 'yarn';\n  }\n\n  if (hasPnpmLock) {\n    return 'pnpm';\n  }\n\n  if (hasPackageLock) {\n    return 'npm';\n  }\n\n  return null;\n}\n\nexport interface VersionInfo {\n  current: string;\n  latest: string;\n  updateAvailable: boolean;\n  packageManager: PackageManager | null;\n}\n\nexport async function checkVersion(root: string): Promise<VersionInfo> {\n  const pkgName = '@toolpad/studio';\n  const [latest, packageManager] = await Promise.all([\n    latestVersion(pkgName),\n    detectPackageManager(root),\n  ]);\n  const current = pkg.version;\n  const updateAvailable = semver.compare(latest, current) > 0;\n  return { current, latest, updateAvailable, packageManager };\n}\n","{\n  \"name\": \"@toolpad/studio\",\n  \"version\": \"0.8.1\",\n  \"license\": \"MIT\",\n  \"bin\": {\n    \"toolpad-studio\": \"./cli.mjs\"\n  },\n  \"scripts\": {\n    \"build\": \"concurrently \\\"pnpm:build:*\\\"\",\n    \"dev\": \"concurrently \\\"pnpm:dev:*\\\"\",\n    \"cli\": \"./cli.mjs\",\n    \"lint\": \"prettier --check .\",\n    \"fix\": \"prettier --write .\",\n    \"build:cli\": \"tsup\",\n    \"dev:cli\": \"tsup --watch\",\n    \"check-types\": \"tsup && tsc --noEmit\",\n    \"test\": \"vitest run\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"mui\",\n    \"toolpad\",\n    \"internal tools\",\n    \"crud\",\n    \"low code\",\n    \"admin\",\n    \"dashboard\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mui/toolpad.git\",\n    \"directory\": \"packages/toolpad-studio\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/toolpad/issues\"\n  },\n  \"homepage\": \"https://mui.com/toolpad/\",\n  \"files\": [\n    \"public\",\n    \"scripts\",\n    \"dist\",\n    \"cli.mjs\",\n    \"browser\",\n    \"server\",\n    \"runtime\"\n  ],\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"types\": \"./dist/exports/index.d.ts\",\n      \"import\": \"./dist/exports/index.mjs\"\n    },\n    \"./*\": {\n      \"types\": \"./dist/exports/*.d.ts\",\n      \"import\": \"./dist/exports/*.mjs\"\n    }\n  },\n  \"dependencies\": {\n    \"@auth/core\": \"0.37.0\",\n    \"@emotion/cache\": \"11.13.1\",\n    \"@emotion/react\": \"11.13.3\",\n    \"@emotion/server\": \"11.11.0\",\n    \"@emotion/styled\": \"11.13.0\",\n    \"@googleapis/drive\": \"8.14.0\",\n    \"@googleapis/sheets\": \"9.3.1\",\n    \"@mui/icons-material\": \"6.1.4\",\n    \"@mui/lab\": \"6.0.0-beta.12\",\n    \"@mui/material\": \"6.1.4\",\n    \"@mui/system\": \"6.1.4\",\n    \"@mui/types\": \"7.2.18\",\n    \"@mui/utils\": \"6.1.4\",\n    \"@mui/x-charts\": \"7.21.0\",\n    \"@mui/x-data-grid\": \"7.21.0\",\n    \"@mui/x-data-grid-premium\": \"7.21.0\",\n    \"@mui/x-date-pickers\": \"7.21.0\",\n    \"@mui/x-date-pickers-pro\": \"7.21.0\",\n    \"@mui/x-tree-view\": \"7.21.0\",\n    \"@tanstack/react-query\": \"5.59.13\",\n    \"@tanstack/react-query-devtools\": \"5.59.13\",\n    \"@toolpad/core\": \"workspace:*\",\n    \"@toolpad/studio-components\": \"workspace:*\",\n    \"@toolpad/studio-runtime\": \"workspace:*\",\n    \"@toolpad/utils\": \"workspace:*\",\n    \"@types/cors\": \"2.8.17\",\n    \"@types/json-schema\": \"7.0.15\",\n    \"@types/node\": \"^20.16.11\",\n    \"@types/react-dev-utils\": \"9.0.15\",\n    \"@vitejs/plugin-react\": \"4.3.2\",\n    \"@webcontainer/env\": \"1.1.1\",\n    \"abort-controller\": \"3.0.0\",\n    \"basic-auth\": \"2.0.1\",\n    \"chalk\": \"5.3.0\",\n    \"chokidar\": \"3.6.0\",\n    \"clsx\": \"2.1.1\",\n    \"compression\": \"^1.7.4\",\n    \"concurrently\": \"9.0.1\",\n    \"cors\": \"2.8.5\",\n    \"csstype\": \"3.1.3\",\n    \"dayjs\": \"1.11.13\",\n    \"dotenv\": \"16.4.5\",\n    \"esbuild\": \"0.24.0\",\n    \"execa\": \"9.4.0\",\n    \"express\": \"4.21.1\",\n    \"find-up\": \"7.0.0\",\n    \"fractional-indexing\": \"3.2.0\",\n    \"get-port\": \"7.1.0\",\n    \"glob\": \"10.4.5\",\n    \"google-auth-library\": \"9.14.2\",\n    \"http-proxy-middleware\": \"3.0.3\",\n    \"invariant\": \"2.2.4\",\n    \"json-to-ts\": \"2.1.0\",\n    \"json5\": \"2.2.3\",\n    \"latest-version\": \"9.0.0\",\n    \"lodash-es\": \"4.17.21\",\n    \"markdown-to-jsx\": \"7.5.0\",\n    \"mime\": \"4.0.4\",\n    \"monaco-editor\": \"0.52.0\",\n    \"mysql2\": \"3.11.3\",\n    \"nanoid\": \"5.0.7\",\n    \"node-fetch\": \"2.7.0\",\n    \"node-fetch-har\": \"1.0.1\",\n    \"open-editor\": \"5.0.0\",\n    \"path-to-regexp\": \"6.3.0\",\n    \"perf-cascade\": \"3.0.3\",\n    \"pg\": \"8.13.0\",\n    \"piscina\": \"4.7.0\",\n    \"prettier\": \"3.3.3\",\n    \"pretty-bytes\": \"6.1.1\",\n    \"react\": \"18.3.1\",\n    \"react-dev-utils\": \"12.0.1\",\n    \"react-dom\": \"18.3.1\",\n    \"react-error-boundary\": \"4.0.13\",\n    \"react-hook-form\": \"7.53.0\",\n    \"react-inspector\": \"6.0.2\",\n    \"react-is\": \"18.3.1\",\n    \"react-resizable-panels\": \"2.1.4\",\n    \"react-router-dom\": \"6.26.2\",\n    \"semver\": \"7.6.3\",\n    \"serialize-javascript\": \"6.0.2\",\n    \"superjson\": \"2.0.0\",\n    \"typescript\": \"5.5.4\",\n    \"vite\": \"5.4.8\",\n    \"vm-browserify\": \"1.1.2\",\n    \"whatwg-url\": \"14.0.0\",\n    \"ws\": \"8.18.0\",\n    \"yaml\": \"2.5.1\",\n    \"yaml-diff-patch\": \"2.0.0\",\n    \"yargs\": \"17.7.2\",\n    \"zod\": \"3.23.8\",\n    \"zod-validation-error\": \"3.4.0\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__code-frame\": \"7.0.6\",\n    \"@types/compression\": \"^1.7.5\",\n    \"@types/express\": \"5.0.0\",\n    \"@types/express-serve-static-core\": \"5.0.0\",\n    \"@types/formidable\": \"3.4.5\",\n    \"@types/glob\": \"8.1.0\",\n    \"@types/har-format\": \"1.2.16\",\n    \"@types/invariant\": \"2.2.37\",\n    \"@types/lodash-es\": \"4.17.12\",\n    \"@types/node-fetch\": \"2.6.11\",\n    \"@types/pg\": \"8.11.10\",\n    \"@types/react\": \"18.3.11\",\n    \"@types/react-dom\": \"18.3.1\",\n    \"@types/react-is\": \"18.3.0\",\n    \"@types/semver\": \"7.5.8\",\n    \"@types/serialize-javascript\": \"5.0.4\",\n    \"@types/whatwg-url\": \"11.0.5\",\n    \"@types/ws\": \"8.5.12\",\n    \"@types/yargs\": \"17.0.33\",\n    \"ajv\": \"8.17.1\",\n    \"eslint\": \"8.57.1\",\n    \"eslint-config-prettier\": \"9.1.0\",\n    \"eslint-plugin-import\": \"2.31.0\",\n    \"formidable\": \"3.5.1\",\n    \"react-transition-group\": \"4.4.5\",\n    \"webpack\": \"5.95.0\"\n  },\n  \"typings\": \"./index.d.ts\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  }\n}\n","import { NodeId, ExecFetchResult } from '@toolpad/studio-runtime';\nimport { withContext, createServerContext } from '@toolpad/studio-runtime/serverRuntime';\nimport { createServerJsRuntime } from '@toolpad/studio-runtime/jsServerRuntime';\nimport express, { Router } from 'express';\nimport cors from 'cors';\nimport invariant from 'invariant';\nimport { errorFrom, serializeError, SerializedError } from '@toolpad/utils/errors';\nimport * as appDom from '@toolpad/studio-runtime/appDom';\nimport type { Methods, ServerDataSource } from '../types';\nimport serverDataSources from '../toolpadDataSources/server';\nimport applyTransform from '../toolpadDataSources/applyTransform';\nimport { asyncHandler } from '../utils/express';\nimport type FunctionsManager from './FunctionsManager';\nimport type EnvManager from './EnvManager';\n\nfunction withSerializedError<T extends { error?: unknown }>(\n  withError: T,\n): Omit<T, 'error'> & { error?: SerializedError } {\n  const { error, ...withoutError } = withError;\n  return withError.error\n    ? { ...withoutError, error: serializeError(errorFrom(error)) }\n    : withoutError;\n}\n\ninterface IToolpadProject {\n  options: { dev: boolean };\n  getRoot(): string;\n  loadDom(): Promise<appDom.AppDom>;\n  saveDom(dom: appDom.AppDom): Promise<void>;\n  functionsManager: FunctionsManager;\n  envManager: EnvManager;\n}\n\n/**\n * Handles loading env files and watches for updates.\n */\nexport default class DataManager {\n  private project: IToolpadProject;\n\n  private dataSources: Map<string, ServerDataSource<any, any, any> | undefined> | undefined;\n\n  constructor(project: IToolpadProject) {\n    this.project = project;\n  }\n\n  getDataSources(): Map<string, ServerDataSource<any, any, any> | undefined> {\n    if (!this.dataSources) {\n      this.dataSources = new Map(\n        Object.entries(serverDataSources).map(([key, value]) => [\n          key,\n          typeof value === 'function' ? value(this.project) : value,\n        ]),\n      );\n    }\n    return this.dataSources;\n  }\n\n  async getConnectionParams<P = unknown>(connectionId: string | null): Promise<P | null> {\n    const dom = await this.project.loadDom();\n    const node = appDom.getNode(\n      dom,\n      connectionId as NodeId,\n      'connection',\n    ) as appDom.ConnectionNode<P>;\n    return node.attributes.params.$$secret;\n  }\n\n  async setConnectionParams<P>(connectionId: NodeId, params: P): Promise<void> {\n    let dom = await this.project.loadDom();\n    const existing = appDom.getNode(dom, connectionId, 'connection');\n\n    dom = appDom.setNodeNamespacedProp(\n      dom,\n      existing,\n      'attributes',\n      'params',\n      appDom.createSecret(params),\n    );\n\n    await this.project.saveDom(dom);\n  }\n\n  async execDataNodeQuery<P, Q>(\n    dataNode: appDom.QueryNode<Q>,\n    params: Q,\n  ): Promise<ExecFetchResult<any>> {\n    const dataSources = this.getDataSources();\n    const dataSource: ServerDataSource<P, Q, any> | undefined = dataNode.attributes.dataSource\n      ? dataSources.get(dataNode.attributes.dataSource)\n      : undefined;\n    if (!dataSource) {\n      throw new Error(\n        `Unknown datasource \"${dataNode.attributes.dataSource}\" for query \"${dataNode.id}\"`,\n      );\n    }\n\n    let result = await dataSource.exec(null, dataNode.attributes.query, params);\n\n    if (appDom.isQuery(dataNode)) {\n      const transformEnabled = dataNode.attributes.transformEnabled;\n      const transform = dataNode.attributes.transform;\n      if (transformEnabled && transform) {\n        const jsServerRuntime = await createServerJsRuntime(process.env);\n        result = {\n          data: await applyTransform(jsServerRuntime, transform, result.data),\n        };\n      }\n    }\n\n    return result;\n  }\n\n  async execQuery(pageName: string, queryName: string, params: any): Promise<ExecFetchResult<any>> {\n    const dom = await this.project.loadDom();\n\n    const page = appDom.getPageByName(dom, pageName);\n\n    if (!page) {\n      throw new Error(`Unknown page \"${pageName}\"`);\n    }\n\n    const dataNode = appDom.getQueryByName(dom, page, queryName);\n\n    if (!dataNode) {\n      throw new Error(`Unknown query \"${queryName}\"`);\n    }\n\n    if (!appDom.isQuery(dataNode)) {\n      throw new Error(`Invalid node type for data request`);\n    }\n\n    try {\n      const result = await this.execDataNodeQuery(dataNode, params);\n      return withSerializedError(result);\n    } catch (error) {\n      return withSerializedError({ error });\n    }\n  }\n\n  async dataSourceFetchPrivate<P, Q>(\n    dataSourceId: string,\n    connectionId: NodeId | null,\n    query: Q,\n  ): Promise<any> {\n    const dataSources = this.getDataSources();\n    const dataSource: ServerDataSource<P, Q, any> | undefined = dataSources.get(dataSourceId);\n\n    if (!dataSource) {\n      throw new Error(`Unknown dataSource \"${dataSourceId}\"`);\n    }\n\n    if (!dataSource.execPrivate) {\n      throw new Error(`No execPrivate available on datasource \"${dataSourceId}\"`);\n    }\n\n    return dataSource.execPrivate(null, query);\n  }\n\n  async dataSourceExecPrivate<P, Q, PQS extends Methods>(\n    dataSourceId: string,\n    method: keyof PQS,\n    args: any[],\n  ): Promise<any> {\n    const dataSources = this.getDataSources();\n    const dataSource = dataSources.get(dataSourceId) as\n      | ServerDataSource<P, Q, any, PQS>\n      | undefined;\n\n    if (!dataSource) {\n      throw new Error(`Unknown dataSource \"${dataSourceId}\"`);\n    }\n\n    if (!dataSource.api) {\n      throw new Error(`No api available on datasource \"${dataSourceId}\"`);\n    }\n\n    return dataSource.api[method](...args);\n  }\n\n  createDataHandler(): Router {\n    const router = express.Router();\n\n    router.use(\n      cors({\n        methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],\n        // TODO: make this configurable\n        origin: '*',\n      }),\n    );\n\n    router.post(\n      '/:pageName/:queryName',\n      express.json(),\n      asyncHandler(async (req, res) => {\n        const { pageName, queryName } = req.params;\n\n        invariant(typeof pageName === 'string', 'pageName url param required');\n        invariant(typeof queryName === 'string', 'queryName url variable required');\n\n        const ctx = await createServerContext(req, res);\n        const result = await withContext(ctx, async () => {\n          return this.execQuery(pageName, queryName, req.body);\n        });\n        res.json(result);\n      }),\n    );\n\n    return router;\n  }\n\n  createDataSourcesHandler(): Router {\n    const dataSources = this.getDataSources();\n    const router = express.Router();\n\n    const handlerMap = new Map<String, Function | null | undefined>();\n    Object.keys(serverDataSources).forEach((dataSourceId) => {\n      const handler = dataSources.get(dataSourceId)?.createHandler?.();\n      if (handler) {\n        invariant(\n          typeof handler === 'function',\n          `Received a \"${typeof handler}\" instead of a \"function\" for the \"${dataSourceId}\" handler`,\n        );\n        handlerMap.set(dataSourceId, handler);\n      }\n    });\n\n    router.get(\n      '/:dataSource/*',\n      asyncHandler(async (req, res) => {\n        const dataSource = req.params.dataSource;\n\n        if (!dataSource) {\n          throw new Error(`Missing path parameter \"dataSource\"`);\n        }\n\n        const handler = handlerMap.get(dataSource);\n\n        if (typeof handler === 'function') {\n          return handler(this, req, res);\n        }\n\n        return res.status(404).json({ message: 'No handler found' });\n      }),\n    );\n\n    return router;\n  }\n}\n","import pg from 'pg';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport { Maybe } from '@toolpad/utils/types';\nimport { SqlConnectionParams, SqlQuery, SqlResult } from '../sql/types';\nimport { createSqlServerDatasource } from '../sql/server';\n\nconst { Client } = pg;\n\n/**\n * Substitute named parameters ($varName) in a postgres query with their positional parameter ($1)\n */\nfunction parseQuery(sql: string, params: [string, any][]): pg.QueryConfig {\n  const substitutions = new Map(params.map(([name], i) => [name.toLowerCase(), i + 1]));\n  const sqlWithNamedVars = sql.replaceAll(/\\$([a-zA-Z][a-zA-Z0-9]*)/g, (match, varName) => {\n    const index = substitutions.get(varName.toLowerCase());\n    if (typeof index === 'number') {\n      return `$${index}`;\n    }\n    return match;\n  });\n\n  return {\n    text: sqlWithNamedVars,\n    values: params.map(([, value]) => value),\n  };\n}\n/**\n * Augment variables ($1, $2,...) in an error message with their name \"$varName($1)\"\n */\nfunction parseErrorMessage(msg: string, params: [string, any][]): string {\n  const substitutions = new Map(params.map(([name], i) => [i + 1, name]));\n  const msgWithNamedVars = msg.replaceAll(/\\$(\\d+)/g, (match, index) => {\n    const varName = substitutions.get(Number(index));\n    if (typeof varName === 'string') {\n      return `$${varName}(${match})`;\n    }\n    return match;\n  });\n\n  return msgWithNamedVars;\n}\n\nasync function execSql(\n  connection: Maybe<SqlConnectionParams>,\n  postgresQuery: SqlQuery,\n  params: Record<string, string>,\n): Promise<SqlResult> {\n  if (!connection?.password) {\n    // pg client doesn't support passwordless authentication atm\n    // See https://github.com/brianc/node-postgres/issues/1927\n    throw new Error(`Password required`);\n  }\n\n  const client = new Client({ ...connection });\n  const paramEntries = Object.entries(params);\n  try {\n    await client.connect();\n\n    const pgQuery = parseQuery(postgresQuery.sql, paramEntries);\n\n    const res = await client.query(pgQuery);\n\n    return {\n      data: res.rows,\n      info:\n        res.command !== 'SELECT'\n          ? `OK ${res.command}, ${res.rowCount} ${res.rowCount === 1 ? 'row' : 'rows'} affected`\n          : undefined,\n    };\n  } catch (rawError) {\n    const error = errorFrom(rawError);\n    error.message = parseErrorMessage(error.message, paramEntries);\n    throw error;\n  } finally {\n    await client.end();\n  }\n}\n\nconst testConnection = async (connection: Maybe<SqlConnectionParams>) => {\n  const client = new Client({ ...connection });\n  await client.connect();\n  await client.query('SELECT * FROM version();');\n};\n\nexport default createSqlServerDatasource<SqlConnectionParams, SqlQuery>({\n  execSql,\n  testConnection,\n});\n","import { serializeError, errorFrom } from '@toolpad/utils/errors';\nimport { ServerDataSource } from '../../types';\nimport { SqlServerProps, SqlPrivateQuery, SqlConnectionStatus } from './types';\n\nexport function createSqlServerDatasource<P, Q>({\n  execSql,\n  testConnection,\n}: SqlServerProps<P, Q>): ServerDataSource<P, Q, SqlPrivateQuery<P, Q>> {\n  return {\n    exec: async (connection, query, params) => {\n      const { data, error } = await execSql(connection, query, params);\n      return { data, error };\n    },\n    execPrivate: async (connection, query) => {\n      switch (query.kind) {\n        case 'debugExec':\n          return execSql(connection, query.query, query.params);\n        case 'connectionStatus': {\n          let connectionStatus: SqlConnectionStatus;\n          try {\n            await testConnection(query.params);\n            connectionStatus = { status: 'success' };\n            return { data: connectionStatus };\n          } catch (rawError) {\n            const serializedError = serializeError(errorFrom(rawError));\n            connectionStatus = {\n              status: 'error',\n              error: serializedError.message,\n            };\n            return { data: connectionStatus, error: serializedError };\n          }\n        }\n        default:\n          throw new Error(`Unknown query \"${(query as SqlPrivateQuery<P, Q>).kind}\"`);\n      }\n    },\n    api: {},\n  };\n}\n","import { createConnection, OkPacket, ResultSetHeader } from 'mysql2/promise';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport { Maybe } from '@toolpad/utils/types';\nimport { SqlConnectionParams, SqlQuery, SqlResult } from '../sql/types';\nimport { createSqlServerDatasource } from '../sql/server';\n\n/**\n * Substitute all variables including named paramters ($varName) in a MySQL query with the placeholder '?'\n * and return an array containing the values to replace the placeholders with\n */\n\nfunction prepareQuery(sql: string, params: Record<string, string>) {\n  const substitutions: any[] = [];\n  const sqlWithVarsReplaced = sql.replaceAll(\n    // eslint-disable-next-line no-useless-escape\n    /(?<==|<|<=|>|>=|<>)[ ]*(([\\$\\w\\d]*\\b)|([']+[\\w ]+['][ ]*))|(;)/g,\n    (match) => {\n      const trimmedMatch = match.trim().replaceAll(/[']+/g, '');\n      if (trimmedMatch[0] === '$') {\n        const varName = trimmedMatch.slice(1);\n        if (typeof params[varName] !== 'undefined') {\n          substitutions.push(params[varName]);\n        }\n        return '?';\n      }\n      if (trimmedMatch === ';') {\n        return '';\n      }\n      substitutions.push(trimmedMatch);\n      return '?';\n    },\n  );\n  return {\n    sql: sqlWithVarsReplaced,\n    substitutions,\n  };\n}\n\nasync function execSql(\n  connection: Maybe<SqlConnectionParams>,\n  query: SqlQuery,\n  params: Record<string, string>,\n): Promise<SqlResult> {\n  const mysqlConnection = await createConnection({ ...connection });\n\n  try {\n    const { sql, substitutions } = prepareQuery(query.sql, params);\n\n    const [result] = await mysqlConnection.execute(sql, substitutions);\n\n    let rows: any[] = [];\n    let info: string | undefined;\n\n    if (Array.isArray(result)) {\n      rows = result;\n    } else {\n      info = (result as ResultSetHeader).info || (result as OkPacket).message;\n    }\n\n    return {\n      data: rows,\n      info,\n    };\n  } catch (rawError) {\n    const error = errorFrom(rawError);\n    throw error;\n  } finally {\n    await mysqlConnection.end();\n  }\n}\n\nasync function testConnection(connection: Maybe<SqlConnectionParams>): Promise<void> {\n  const mysqlConnection = await createConnection({ ...connection });\n  mysqlConnection.execute('SELECT 1');\n}\n\nexport default createSqlServerDatasource<SqlConnectionParams, SqlQuery>({\n  execSql,\n  testConnection,\n});\n","import {\n  ExecFetchResult,\n  BindableAttrEntries,\n  BindableAttrValue,\n  BindableAttrValues,\n  JsRuntime,\n} from '@toolpad/studio-runtime';\nimport fetch, { RequestInit, Response, Headers } from 'node-fetch';\nimport { createServerJsRuntime } from '@toolpad/studio-runtime/jsServerRuntime';\nimport { SerializedError, errorFrom, serializeError } from '@toolpad/utils/errors';\nimport { evaluateBindable } from '@toolpad/studio-runtime/jsRuntime';\nimport { removePrefix } from '@toolpad/utils/strings';\nimport { Maybe } from '@toolpad/utils/types';\nimport { withHarInstrumentation, createHarLog } from '../../server/har';\nimport { ServerDataSource } from '../../types';\nimport {\n  FetchPrivateQuery,\n  Body,\n  FetchQuery,\n  FetchResult,\n  RawBody,\n  RestConnectionParams,\n  UrlEncodedBody,\n  IntrospectionResult,\n} from './types';\nimport applyTransform from '../applyTransform';\nimport { HTTP_NO_BODY, getAuthenticationHeaders, parseBaseUrl } from './shared';\nimport type { IToolpadProject } from '../server';\n\nfunction resolveBindable<T>(\n  jsRuntime: JsRuntime,\n  bindable: BindableAttrValue<T>,\n  scope: Record<string, unknown>,\n): T {\n  const { value, error } = evaluateBindable(jsRuntime, bindable, scope);\n  if (error) {\n    throw error;\n  }\n  return value as T;\n}\n\nfunction resolveBindableEntries(\n  jsRuntime: JsRuntime,\n  entries: BindableAttrEntries,\n  scope: Record<string, unknown>,\n): [string, any][] {\n  return entries.map(([key, value]) => [key, resolveBindable(jsRuntime, value, scope)]);\n}\n\nfunction resolveBindables<P>(\n  jsRuntime: JsRuntime,\n  obj: BindableAttrValues<P>,\n  scope: Record<string, unknown>,\n): P {\n  return Object.fromEntries(\n    resolveBindableEntries(jsRuntime, Object.entries(obj) as BindableAttrEntries, scope),\n  ) as P;\n}\n\nfunction parseQueryUrl(queryUrl: string, baseUrl: Maybe<string>): URL {\n  if (baseUrl) {\n    const parsedBase = parseBaseUrl(baseUrl);\n    return new URL(parsedBase.href + removePrefix(queryUrl, '/'));\n  }\n\n  return new URL(queryUrl);\n}\n\ninterface ResolvedRawBody {\n  kind: 'raw';\n  contentType: string;\n  content: string;\n}\n\nfunction resolveRawBody(\n  jsRuntime: JsRuntime,\n  body: RawBody,\n  scope: Record<string, unknown>,\n): ResolvedRawBody {\n  const { content, contentType } = resolveBindables(\n    jsRuntime,\n    {\n      contentType: body.contentType,\n      content: body.content,\n    },\n    scope,\n  );\n  return {\n    kind: 'raw',\n    contentType,\n    content: String(content),\n  };\n}\n\ninterface ResolveUrlEncodedBodyBody {\n  kind: 'urlEncoded';\n  content: [string, string][];\n}\n\nfunction resolveUrlEncodedBody(\n  jsRuntime: JsRuntime,\n  body: UrlEncodedBody,\n  scope: Record<string, unknown>,\n): ResolveUrlEncodedBodyBody {\n  return {\n    kind: 'urlEncoded',\n    content: resolveBindableEntries(jsRuntime, body.content, scope),\n  };\n}\n\nfunction resolveBody(jsRuntime: JsRuntime, body: Body, scope: Record<string, unknown>) {\n  switch (body.kind) {\n    case 'raw':\n      return resolveRawBody(jsRuntime, body, scope);\n    case 'urlEncoded':\n      return resolveUrlEncodedBody(jsRuntime, body, scope);\n    default:\n      throw new Error(`Missing case for \"${(body as Body).kind}\"`);\n  }\n}\n\nasync function readData(res: Response, fetchQuery: FetchQuery): Promise<any> {\n  if (!fetchQuery.response || fetchQuery.response?.kind === 'json') {\n    return res.json();\n  }\n  if (fetchQuery.response?.kind === 'raw') {\n    return res.text();\n  }\n  throw new Error(`Unsupported response type \"${fetchQuery.response.kind}\"`);\n}\n\nasync function execBase(\n  project: IToolpadProject,\n  connection: Maybe<RestConnectionParams>,\n  fetchQuery: FetchQuery,\n  params: Record<string, string | BindableAttrValue<any>>,\n): Promise<FetchResult> {\n  const har = createHarLog();\n  const instrumentedFetch = withHarInstrumentation(fetch, { har });\n  const jsRuntime = createServerJsRuntime(process.env);\n  const resolvedParams = resolveBindableEntries(jsRuntime, Object.entries(params), {});\n\n  const queryScope = {\n    // @TODO: remove deprecated query after v1\n    query: params,\n    parameters: Object.fromEntries(resolvedParams),\n  };\n\n  const urlvalue = fetchQuery.url ?? '';\n  const resolvedUrl = resolveBindable(jsRuntime, urlvalue, queryScope);\n  const resolvedSearchParams = resolveBindableEntries(\n    jsRuntime,\n    fetchQuery.searchParams || [],\n    queryScope,\n  );\n  const resolvedHeaders = resolveBindableEntries(jsRuntime, fetchQuery.headers || [], queryScope);\n\n  const queryUrl = parseQueryUrl(resolvedUrl, connection?.baseUrl);\n  resolvedSearchParams.forEach(([key, value]) => queryUrl.searchParams.append(key, value));\n\n  const headers = new Headers([\n    ...(connection ? getAuthenticationHeaders(connection.authentication) : []),\n    ...(connection?.headers || []),\n  ]);\n  resolvedHeaders.forEach(([key, value]) => headers.append(key, value));\n\n  const method = fetchQuery.method || 'GET';\n\n  const requestInit: RequestInit = { method, headers };\n\n  if (!HTTP_NO_BODY.has(method) && fetchQuery.body) {\n    const resolvedBody = resolveBody(jsRuntime, fetchQuery.body, queryScope);\n\n    switch (resolvedBody.kind) {\n      case 'raw': {\n        headers.set('content-type', resolvedBody.contentType);\n        requestInit.body = resolvedBody.content;\n        break;\n      }\n      case 'urlEncoded': {\n        headers.set('content-type', 'application/x-www-form-urlencoded');\n        requestInit.body = new URLSearchParams(resolvedBody.content).toString();\n        break;\n      }\n      default:\n        throw new Error(`Missing case for \"${(resolvedBody as any).kind}\"`);\n    }\n  }\n\n  let error: SerializedError | undefined;\n  let untransformedData;\n  let data;\n\n  try {\n    const res = await instrumentedFetch(queryUrl.href, requestInit);\n\n    if (!res.ok) {\n      throw new Error(`HTTP ${res.status} (${res.statusText}) while fetching \"${res.url}\"`);\n    }\n\n    untransformedData = await readData(res, fetchQuery);\n    data = untransformedData;\n\n    if (fetchQuery.transformEnabled && fetchQuery.transform) {\n      data = await applyTransform(jsRuntime, fetchQuery.transform, untransformedData);\n    }\n  } catch (rawError) {\n    error = serializeError(errorFrom(rawError));\n  }\n  return { data, untransformedData, error, har };\n}\n\nexport default function createDatasource(\n  project: IToolpadProject,\n): ServerDataSource<{}, FetchQuery, any> {\n  return {\n    async exec(\n      connection: Maybe<RestConnectionParams>,\n      fetchQuery: FetchQuery,\n      params: Record<string, string>,\n    ): Promise<ExecFetchResult<any>> {\n      const { data, error } = await execBase(project, connection, fetchQuery, params);\n      return { data, error };\n    },\n\n    async execPrivate(connection: Maybe<RestConnectionParams>, query: FetchPrivateQuery) {\n      switch (query.kind) {\n        case 'introspection': {\n          return {\n            env: process.env,\n            declaredEnvKeys: await project.envManager.getDeclaredKeys(),\n          } satisfies IntrospectionResult;\n        }\n        case 'debugExec':\n          return execBase(project, connection, query.query, query.params);\n        default:\n          throw new Error(`Unknown private query \"${(query as FetchPrivateQuery).kind}\"`);\n      }\n    },\n\n    api: {},\n  };\n}\n","import { withHar as withHarOriginal, FetchFn } from 'node-fetch-har';\nimport { Request } from 'node-fetch';\n\nconst withHarInstrumentation: typeof withHarOriginal = function withHar(fetchFn, options) {\n  const withHarFetch: FetchFn = withHarOriginal(fetchFn, options);\n\n  const patchedFetch: FetchFn = (...args: Parameters<FetchFn>): ReturnType<FetchFn> => {\n    // node-fetch-har doesn't deal well with certain ways of passing parameters e.g. passing headers as [string, string][]\n    // We're normalizing them here to a format that we know it can handle correctly:\n    const req = new Request(...args);\n    const input = req.url;\n    return withHarFetch(input, {\n      agent: req.agent,\n      body: req.body,\n      compress: req.compress,\n      follow: req.follow,\n      headers: req.headers,\n      method: req.method,\n      redirect: req.redirect,\n    });\n  };\n\n  return patchedFetch;\n};\n\nexport { createHarLog } from '../utils/har';\nexport { withHarInstrumentation };\n","import { JsRuntime } from '@toolpad/studio-runtime';\n\nexport default async function applyTransform(\n  jsRuntime: JsRuntime,\n  transform: string,\n  data: any,\n): Promise<any> {\n  const transformFn = `(data) => {${transform}}`;\n  const { error, value } = jsRuntime.evaluateExpression(\n    `(${transformFn})(${JSON.stringify(data)})`,\n    {},\n  );\n  if (error) {\n    throw error;\n  }\n  return value;\n}\n","import { drive_v3 } from '@googleapis/drive';\nimport { sheets_v4 } from '@googleapis/sheets';\nimport { OAuth2Client } from 'google-auth-library';\nimport { match } from 'path-to-regexp';\nimport { asArray } from '@toolpad/utils/collections';\nimport * as express from 'express';\nimport { Maybe } from '@toolpad/utils/types';\nimport invariant from 'invariant';\nimport { ServerDataSource, CreateHandlerApi } from '../../types';\nimport config from '../../server/config';\nimport {\n  GoogleSheetsConnectionParams,\n  GoogleSheetsPrivateQuery,\n  GoogleSheetsApiQuery,\n  GoogleSheetsResult,\n} from './types';\n\n/**\n * Create an OAuth2 client based on the configuration\n */\n\nfunction createOAuthClient(): OAuth2Client {\n  const externalUrl = process.env.TOOLPAD_EDITOR_EXTERNAL_URL;\n  invariant(externalUrl, 'Missing TOOLPAD_EDITOR_EXTERNAL_URL');\n  if (!config.googleSheetsClientId) {\n    throw new Error('Google Sheets: Missing client ID \"TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_ID\"');\n  }\n  if (!config.googleSheetsClientSecret) {\n    throw new Error(\n      'Google Sheets: Missing client secret \"TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_SECRET\"',\n    );\n  }\n  return new OAuth2Client(\n    config.googleSheetsClientId,\n    config.googleSheetsClientSecret,\n    new URL('/api/dataSources/googleSheets/auth/callback', externalUrl).href,\n  );\n}\n\n/**\n * Create a Google Drive client based on the configuration\n */\n\nfunction createDriveClient(client: OAuth2Client) {\n  if (!client) {\n    throw new Error('Malformed Google Sheets datasource client');\n  }\n  return new drive_v3.Drive({\n    auth: client,\n  });\n}\n\n/**\n * Create a Google Sheets client based on the configuration\n */\n\nfunction createSheetsClient(client: OAuth2Client) {\n  if (!client) {\n    throw new Error('Malformed Google Sheets datasource client');\n  }\n  return new sheets_v4.Sheets({\n    auth: client,\n  });\n}\n\nexport default function createDatasource(): ServerDataSource<\n  GoogleSheetsConnectionParams,\n  GoogleSheetsApiQuery,\n  GoogleSheetsPrivateQuery\n> {\n  /**\n   * Executor function for this connection\n   * @param connection  The connection object\n   * @param query  The query object\n   * @returns The api response\n   */\n  const exec = async (\n    connection: Maybe<GoogleSheetsConnectionParams>,\n    query: GoogleSheetsApiQuery,\n  ): Promise<GoogleSheetsResult> => {\n    const client = createOAuthClient();\n    if (connection) {\n      client.setCredentials(connection);\n    }\n    const sheets = createSheetsClient(client);\n\n    const { spreadsheetId, sheetName, ranges, headerRow } = query;\n    if (spreadsheetId && sheetName) {\n      const response = await sheets.spreadsheets.values.get({\n        spreadsheetId,\n        range: `${sheetName}!${ranges}`,\n      });\n      if (response.status === 200) {\n        const { values } = response.data;\n        if (values && values.length > 0) {\n          let data = values;\n          if (headerRow) {\n            const firstRow = values.shift() ?? [];\n            data = values.map((row) => {\n              const rowObject: any = {};\n              row.forEach((elem, cellIndex) => {\n                if (firstRow[cellIndex]) {\n                  rowObject[firstRow[cellIndex]] = elem;\n                }\n              });\n              return rowObject;\n            });\n          }\n          return { data };\n        }\n        return { data: [] };\n      }\n\n      throw new Error(\n        `${response.status}: ${response.statusText} Failed to fetch \"${JSON.stringify(query)}\"`,\n      );\n    }\n    throw new Error(`No sheet selected`);\n  };\n\n  /**\n   * Private executor function for this connection\n   * @param connection  The connection object\n   * @param query  The query object\n   * @returns The private api response\n   */\n  const execPrivate = async (\n    connection: Maybe<GoogleSheetsConnectionParams>,\n    query: GoogleSheetsPrivateQuery,\n  ): Promise<any> => {\n    const client = createOAuthClient();\n    if (connection) {\n      client.setCredentials(connection);\n    }\n    if (query.type === 'FILE_GET') {\n      const driveClient = createDriveClient(client);\n      const { spreadsheetId } = query;\n      if (spreadsheetId) {\n        const response = await driveClient.files.get({\n          fileId: spreadsheetId,\n        });\n        if (response.status === 200) {\n          return response.data;\n        }\n        throw new Error(\n          `${response?.status}: ${response.statusText} Failed to fetch \"${JSON.stringify(query)}\"`,\n        );\n      }\n      throw new Error(`Google Sheets: Missing spreadsheetId in query`);\n    }\n    if (query.type === 'FILES_LIST') {\n      const driveClient = createDriveClient(client);\n      const { spreadsheetQuery, pageToken } = query;\n      let queryString = \"mimeType='application/vnd.google-apps.spreadsheet'\";\n      if (spreadsheetQuery) {\n        /** Escaping spreadsheetQuery\n         *  based on: https://developers.google.com/drive/api/guides/ref-search-terms#file_properties\n         */\n        const escapedSpreadsheetQuery = spreadsheetQuery.replace(/\\\\|'/g, '\\\\$&');\n        queryString = `name contains '${escapedSpreadsheetQuery}' and ${queryString}`;\n      }\n\n      const response = await driveClient.files.list({\n        q: queryString,\n        pageToken,\n      });\n\n      if (response.status === 200) {\n        return response.data;\n      }\n      throw new Error(\n        `${response?.status}: ${response.statusText} Failed to fetch \"${JSON.stringify(query)}\"`,\n      );\n    }\n    if (query.type === 'FETCH_SPREADSHEET') {\n      const sheetsClient = createSheetsClient(client);\n      const { spreadsheetId } = query;\n      if (spreadsheetId) {\n        const response = await sheetsClient.spreadsheets.get({\n          spreadsheetId,\n          includeGridData: false,\n        });\n        if (response.status === 200) {\n          return response.data;\n        }\n        throw new Error(\n          `${response?.status}: ${response.statusText} Failed to fetch \"${JSON.stringify(query)}\"`,\n        );\n      }\n      throw new Error(`Google Sheets: Missing spreadsheetId in query`);\n    }\n    if (query.type === 'CONNECTION_STATUS') {\n      const driveClient = createDriveClient(client);\n      const response = await driveClient.about.get({ fields: 'user' });\n      if (response.status === 200) {\n        return response.data.user;\n      }\n      return null;\n    }\n    if (query.type === 'DEBUG_EXEC') {\n      return exec(connection, query.query);\n    }\n    throw new Error(`Google Sheets: Unrecognized private query \"${JSON.stringify(query)}\"`);\n  };\n\n  return {\n    exec,\n    execPrivate,\n    api: {},\n    createHandler: () => {\n      /**\n       * Handler for new connections\n       * @param api  The api for the handler object\n       * @param req  The request object\n       * @param res The response object\n       */\n\n      return async (\n        api: CreateHandlerApi<GoogleSheetsConnectionParams>,\n        req: express.Request,\n        res: express.Response,\n      ): Promise<express.Response | void> => {\n        const client = createOAuthClient();\n        try {\n          const pathname = `/${asArray(req.query.path)\n            .map((segment = '') => encodeURIComponent(String(segment)))\n            .join('/')}`;\n          const matchAuthLogin = match('/auth/login', { decode: decodeURIComponent });\n          const matchAuthCallback = match('/auth/callback', { decode: decodeURIComponent });\n\n          const [state] = asArray(req.query.state);\n          if (typeof state !== 'string') {\n            return res.status(400).send(`Missing query parameter \"state\"`);\n          }\n          const { connectionId } = JSON.parse(decodeURIComponent(state));\n\n          // Check if connection with connectionId exists, if so: merge\n          const savedConnection = await api.getConnectionParams(connectionId);\n          if (savedConnection) {\n            client.setCredentials(savedConnection);\n          }\n          if (matchAuthLogin(pathname)) {\n            return res.redirect(\n              client.generateAuthUrl({\n                access_type: 'offline',\n                scope: [\n                  'https://www.googleapis.com/auth/spreadsheets.readonly',\n                  'https://www.googleapis.com/auth/drive.readonly',\n                ],\n                state,\n                include_granted_scopes: true,\n                prompt: 'consent',\n              }),\n            );\n          }\n          if (matchAuthCallback(pathname)) {\n            const [oAuthError] = asArray(req.query.error);\n            if (oAuthError) {\n              throw new Error(String(oAuthError));\n            }\n            const [code] = asArray(req.query.code);\n            if (typeof code !== 'string') {\n              return res.status(400).send(`Missing query parameter \"code\"`);\n            }\n            const { tokens, res: getTokenResponse } = await client.getToken(code);\n            if (!tokens) {\n              throw new Error(`${getTokenResponse?.status}: ${getTokenResponse?.statusText}`);\n            }\n            if (tokens) {\n              client.setCredentials(tokens);\n              await api.setConnectionParams(connectionId, client.credentials);\n            }\n            return res.redirect(`/_toolpad/app/connections/${encodeURIComponent(connectionId)}`);\n          }\n          return res.status(404).send('No handler exists for given path');\n        } catch (error) {\n          if (error instanceof Error) {\n            console.error(error.message);\n            return res.status(500).send(error.message);\n          }\n          return res.status(500).send(error);\n        }\n      };\n    },\n  };\n}\n","import { ExecFetchResult } from '@toolpad/studio-runtime';\nimport { Maybe } from '@toolpad/utils/types';\nimport { ServerDataSource } from '../../types';\nimport { LocalQuery, LocalConnectionParams, LocalPrivateApi } from './types';\nimport { parseLegacyFunctionId } from './shared';\nimport type { IToolpadProject } from '../server';\n\nexport default function createDatasource(\n  project: IToolpadProject,\n): ServerDataSource<{}, LocalQuery, any, LocalPrivateApi> {\n  const exec = async (\n    connection: Maybe<LocalConnectionParams>,\n    fetchQuery: LocalQuery,\n    parameters: Record<string, string>,\n  ): Promise<ExecFetchResult<any>> => {\n    if (!fetchQuery.function) {\n      throw new Error('Missing function name');\n    }\n    const parsed = parseLegacyFunctionId(fetchQuery.function);\n    if (!parsed.handler) {\n      throw new Error('Missing function name');\n    }\n    const { data, error } = await project.functionsManager.exec(\n      parsed.file,\n      parsed.handler,\n      parameters,\n    );\n    return { data, error };\n  };\n\n  return {\n    exec,\n    api: {\n      async introspection() {\n        return project.functionsManager.introspect();\n      },\n      async debugExec(query, params) {\n        return exec(null, query, params);\n      },\n      async createNew(fileName) {\n        return project.functionsManager.createFunctionFile(fileName);\n      },\n    },\n  };\n}\n","import type { ServerDataSource } from '../types';\nimport postgres from './postgres/server';\nimport mysql from './mysql/server';\nimport rest from './rest/server';\nimport googleSheets from './googleSheets/server';\nimport local from './local/server';\nimport type FunctionsManager from '../server/FunctionsManager';\nimport type EnvManager from '../server/EnvManager';\n\nexport interface IToolpadProject {\n  functionsManager: FunctionsManager;\n  envManager: EnvManager;\n}\n\ntype ServerDataSources = {\n  [key: string]:\n    | ServerDataSource<any, any, any>\n    | ((project: IToolpadProject) => ServerDataSource<any, any, any>)\n    | undefined;\n};\n\nconst dataSources: ServerDataSources = {\n  rest,\n  postgres,\n  googleSheets,\n  mysql,\n  local,\n};\n\nexport default dataSources;\n","import * as path from 'path';\nimport * as url from 'node:url';\nimport * as fs from 'fs';\n\nconst currentDirectory = url.fileURLToPath(new URL('.', String(import.meta.url)));\n\nconst pkgJsonContent = fs.readFileSync(path.resolve(currentDirectory, '../../package.json'), {\n  encoding: 'utf-8',\n});\nconst pkgJson = JSON.parse(pkgJsonContent);\n\nexport interface PackageInfo {\n  version: string;\n  build: string;\n}\n\nexport default {\n  version: pkgJson.version,\n  build: process.env.GIT_SHA1?.slice(0, 7) || 'dev',\n} satisfies PackageInfo;\n","import { createMethod, MethodResolvers } from './rpc';\nimport type { ToolpadProject } from './localMode';\n\n// Methods exposing the actions on the Toolpad Studio project\nexport function createRpcServer(project: ToolpadProject) {\n  return {\n    dataSourceFetchPrivate: createMethod<typeof project.dataManager.dataSourceFetchPrivate>(\n      ({ params }) => {\n        return project.dataManager.dataSourceFetchPrivate(...params);\n      },\n    ),\n    execQuery: createMethod<typeof project.dataManager.execDataNodeQuery>(({ params }) => {\n      return project.dataManager.execDataNodeQuery(...params);\n    }),\n    loadDom: createMethod<typeof project.loadDom>(({ params }) => {\n      return project.loadDom(...params);\n    }),\n    getVersionInfo: createMethod<typeof project.getVersionInfo>(({ params }) => {\n      return project.getVersionInfo(...params);\n    }),\n    introspect: createMethod<typeof project.functionsManager.introspect>(({ params }) => {\n      return project.functionsManager.introspect(...params);\n    }),\n    getPrettierConfig: createMethod<typeof project.getPrettierConfig>(({ params }) => {\n      return project.getPrettierConfig(...params);\n    }),\n    saveDom: createMethod<typeof project.saveDom>(({ params }) => {\n      return project.saveDom(...params);\n    }),\n    applyDomDiff: createMethod<typeof project.applyDomDiff>(({ params }) => {\n      return project.applyDomDiff(...params);\n    }),\n    openCodeEditor: createMethod<typeof project.openCodeEditor>(({ params }) => {\n      return project.openCodeEditor(...params);\n    }),\n    createComponent: createMethod<typeof project.createComponent>(({ params }) => {\n      return project.createComponent(...params);\n    }),\n    deletePage: createMethod<typeof project.deletePage>(({ params }) => {\n      return project.deletePage(...params);\n    }),\n    dataSourceExecPrivate: createMethod<typeof project.dataManager.dataSourceExecPrivate>(\n      ({ params }) => {\n        return project.dataManager.dataSourceExecPrivate(...params);\n      },\n    ),\n    createDataProvider: createMethod<typeof project.createDataProvider>(({ params }) => {\n      return project.createDataProvider(...params);\n    }),\n    getComponents: createMethod<typeof project.getComponentsManifest>(({ params }) => {\n      return project.getComponentsManifest(...params);\n    }),\n  } satisfies MethodResolvers;\n}\n\nexport type ServerDefinition = ReturnType<typeof createRpcServer>;\n"],"mappings":"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","names":["path","express","mapValues","chalk","url","cors","express","express","express","path","fs","invariant","chalk","fromZodError","glob","chokidar","errorFrom","hasOwnProperty","writeFileRecursive","fileExists","readJsonFile","z","appDom","z","path","chalk","path","fs","chokidar","chalk","errorFrom","url","path","fs","z","fromZodError","chalk","errorFrom","path","fileExists","fileExists","withContext","createServerContext","createServerJsRuntime","express","invariant","errorFrom","serializeError","appDom","errorFrom","serializeError","errorFrom","execSql","testConnection","match","errorFrom","errorFrom","match","execSql","errorFrom","testConnection","server_default","fetch","errorFrom","serializeError","fetch","serializeError","errorFrom","invariant","invariant","createDatasource","createDatasource","createDatasource","server_default","serializeError","errorFrom","server_default","dataSources","createServerJsRuntime","express","invariant","createServerContext","withContext","path","url","fs","currentDirectory","invariant","errorFrom","chalk","fromZodError","z","fileExists","writeFileRecursive","hasOwnProperty","glob","config","readJsonFile","pageFilePath","stat","createRpcServer","currentDirectory","express","cors","currentDirectory","resolve","createRpcServer"]}