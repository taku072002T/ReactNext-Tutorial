{"version":3,"sources":["../../src/constants.ts","../../src/utils/insecureHash.ts","../../src/runtime/createRuntimeState.tsx","../../src/utils/prettier.ts","../../src/toolpadDataSources/local/shared.tsx","../../src/toolpadDataSources/rest/shared.ts"],"sourcesContent":["export const WINDOW_PROP_TOOLPAD_APP_RENDER_PARAMS = '__TOOLPAD_APP_RENDER_PARAMS__';\nexport const INITIAL_STATE_WINDOW_PROPERTY = '__initialToolpadState__';\n\nexport const TOOLPAD_TARGET_CE = 'CE';\nexport const TOOLPAD_TARGET_CLOUD = 'CLOUD';\nexport const TOOLPAD_TARGET_PRO = 'PRO';\nexport const REPOSITORY_URL = 'https://github.com/mui/toolpad';\nexport const LANDING_PAGE_URL = 'https://mui.com/toolpad/';\nexport const DOCUMENTATION_URL = 'https://mui.com/toolpad/studio/getting-started/';\nexport const DOCUMENTATION_INSTALLATION_URL =\n  'https://mui.com/toolpad/studio/getting-started/installation/';\nexport const ROADMAP_URL = 'https://github.com/orgs/mui/projects/9';\nexport const SCHEDULE_DEMO_URL = 'https://calendly.com/prakhar-mui/';\nexport const UPGRADE_URL = 'https://mui.com/toolpad/studio/getting-started/roadmap/#paid-plan';\n\nexport const VERSION_CHECK_INTERVAL = 1000 * 60 * 10;\n\n// TODO: Remove once global functions UI is ready\nexport const FEATURE_FLAG_GLOBAL_FUNCTIONS = false;\n","/**\n * Returns a hash code for a string.\n * (Compatible to Java's String.hashCode())\n *\n * The hash code for a string object is computed as\n *     s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n * using number arithmetic, where s[i] is the i th character\n * of the given string, n is the length of the string,\n * and ^ indicates exponentiation.\n * (The hash value of the empty string is zero.)\n *\n * Do not use in a security critical context.\n *\n * @see https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\n */\nexport default function insecureHash(str: string) {\n  let h = 0;\n  for (let i = 0; i < str.length; i += 1) {\n    // eslint-disable-next-line no-bitwise\n    h = (Math.imul(31, h) + str.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n","import * as appDom from '@toolpad/studio-runtime/appDom';\nimport { RuntimeState } from './types';\n\nexport interface CreateRuntimeStateParams {\n  dom: appDom.AppDom;\n}\n\nexport default function createRuntimeState({ dom }: CreateRuntimeStateParams): RuntimeState {\n  return {\n    dom: appDom.createRenderTree(dom),\n  };\n}\n","import prettier from 'prettier';\nimport parserBabel from 'prettier/parser-babel';\n\nconst DEFAULT_OPTIONS = {\n  parser: 'babel-ts',\n  plugins: [parserBabel],\n};\n\n/**\n * get prettier config file\n */\nexport async function resolvePrettierConfig(filePath: string) {\n  const config = await prettier.resolveConfig(filePath);\n  return config;\n}\n\n/**\n * Formats a javascript source with `prettier`.\n */\nexport async function format(code: string, filePath: string): Promise<string> {\n  const readConfig = await resolvePrettierConfig(filePath);\n  return prettier.format(code, {\n    ...readConfig,\n    ...DEFAULT_OPTIONS,\n  });\n}\n\n/**\n * Formats a javascript expression with `prettier`.\n */\nexport async function formatExpression(\n  code: string,\n  config?: prettier.Options | null,\n): Promise<string> {\n  const formatted = await prettier.format(code, {\n    ...config,\n    ...DEFAULT_OPTIONS,\n    semi: false,\n  });\n\n  // There's no mode to format expressions in prettier. It will insert a semicolon in front\n  // in certain occasions. See https://github.com/prettier/prettier/issues/2841\n  return formatted.replace(/^;/, '');\n}\n\n/**\n * Formats a javascript expression with `prettier`, if it's valid.\n */\nexport async function tryFormatExpression(\n  code: string,\n  config?: prettier.Options,\n): Promise<string> {\n  try {\n    return await formatExpression(code, config);\n  } catch (err) {\n    return code;\n  }\n}\n","export type ParsedFunctionId =\n  | {\n      file: string;\n      handler?: undefined;\n    }\n  | {\n      file: string;\n      handler: string;\n    };\n\nexport function parseLegacyFunctionId(id: string): ParsedFunctionId {\n  if (!id) {\n    return { file: 'functions.ts' };\n  }\n  const [file, handler] = id.split('#');\n  return handler ? { file, handler } : { file: 'functions.ts', handler: file };\n}\n\nexport function parseFunctionId(id: string): ParsedFunctionId {\n  const [file, handler] = id.split('#');\n  return handler ? { file, handler } : { file };\n}\n\nexport function serializeFunctionId({ file, handler }: ParsedFunctionId): string {\n  return handler ? `${file}#${handler}` : file;\n}\n\nexport function transformLegacyFunctionId(id: string): string {\n  if (!id) {\n    return '';\n  }\n  const [file, handler] = id.split('#');\n  return handler ? id : `functions.ts#${file}`;\n}\n","import { ensureSuffix } from '@toolpad/utils/strings';\nimport { Maybe } from '@toolpad/utils/types';\nimport { Authentication } from './types';\n\nexport const HTTP_NO_BODY = new Set(['GET', 'HEAD']);\n\nexport function getAuthenticationHeaders(auth: Maybe<Authentication>): [string, string][] {\n  if (!auth) {\n    return [];\n  }\n\n  switch (auth.type) {\n    case 'basic':\n      return [\n        [\n          'Authorization',\n          `Basic ${Buffer.from(`${auth.user}:${auth.password}`, 'utf-8').toString('base64')}`,\n        ],\n      ];\n    case 'bearerToken':\n      return [['Authorization', `Bearer ${auth.token}`]];\n    case 'apiKey':\n      return [[auth.header, auth.key]];\n    default:\n      throw new Error(`Unsupported authentication type \"${(auth as Authentication).type}\"`);\n  }\n}\n\nexport function parseBaseUrl(baseUrl: string): URL {\n  const parsedBase = new URL(baseUrl);\n  parsedBase.pathname = ensureSuffix(parsedBase.pathname, '/');\n  parsedBase.search = '';\n  parsedBase.hash = '';\n  return parsedBase;\n}\n"],"mappings":"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","names":[]}