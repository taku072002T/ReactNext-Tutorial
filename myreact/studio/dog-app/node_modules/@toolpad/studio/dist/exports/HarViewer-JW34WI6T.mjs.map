{"version":3,"sources":["../../src/components/HarViewer.tsx"],"sourcesContent":["import { fromHar } from 'perf-cascade';\nimport * as React from 'react';\nimport type { Har } from 'har-format';\nimport { styled, SxProps } from '@mui/material';\nimport { useTheme, Theme } from '@mui/material/styles';\nimport { createHarLog } from '../utils/har';\nimport 'perf-cascade/dist/perf-cascade.css';\n\nconst HarViewerRoot = styled('div')({});\n\nfunction fixLinks(elm: Element) {\n  elm.querySelectorAll('a').forEach((link) => link.setAttribute('target', '_blank'));\n}\n\nfunction forceDarkMode(elm: Element, theme: Theme) {\n  elm.querySelectorAll('svg').forEach((svg) => {\n    svg.setAttribute('fill', 'white');\n    if (svg.classList.contains('left-fixed-holder')) {\n      const fullLabel = svg.getElementsByClassName('label-full-bg');\n      if (fullLabel && fullLabel.length > 0) {\n        (fullLabel[0] as SVGElement).style.fill = theme.palette.primaryDark[500];\n      }\n    }\n\n    if (svg.classList.contains('tooltip-holder')) {\n      const tooltips = svg.getElementsByClassName('tooltip-payload');\n      if (tooltips && tooltips.length > 0) {\n        for (const tooltip of tooltips) {\n          (tooltip as HTMLDivElement).style.backgroundColor = theme.palette.primaryDark[500];\n        }\n      }\n    }\n  });\n}\n\nexport interface HarViewerProps {\n  value?: Har;\n  sx?: SxProps;\n}\n\nexport default function HarViewer({ value = createHarLog(), sx }: HarViewerProps) {\n  const rootRef = React.useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    const root = rootRef.current;\n    if (value && value.log.entries.length > 0 && root) {\n      const svg = fromHar(value);\n      fixLinks(svg);\n      if (theme.palette.mode === 'dark') {\n        forceDarkMode(svg, theme);\n      }\n\n      const observer = new MutationObserver((entries) => {\n        for (const entry of entries) {\n          for (const node of entry.addedNodes) {\n            if (node instanceof Element) {\n              fixLinks(node);\n              if (theme.palette.mode === 'dark') {\n                forceDarkMode(svg, theme);\n              }\n            }\n          }\n        }\n      });\n\n      observer.observe(svg, {\n        subtree: true,\n        childList: true,\n      });\n\n      root.append(svg);\n      return () => {\n        observer.disconnect();\n        svg.remove();\n      };\n    }\n    return () => {};\n  }, [value, theme]);\n\n  return <HarViewerRoot ref={rootRef} sx={sx} />;\n}\n"],"mappings":";;;;;;AAAA,SAAS,eAAe;AACxB,YAAY,WAAW;AAEvB,SAAS,cAAuB;AAChC,SAAS,gBAAuB;AAEhC,OAAO;AAEP,IAAM,gBAAgB,OAAO,KAAK,EAAE,CAAC,CAAC;AAEtC,SAAS,SAAS,KAAc;AAC9B,MAAI,iBAAiB,GAAG,EAAE,QAAQ,CAAC,SAAS,KAAK,aAAa,UAAU,QAAQ,CAAC;AACnF;AAEA,SAAS,cAAc,KAAc,OAAc;AACjD,MAAI,iBAAiB,KAAK,EAAE,QAAQ,CAAC,QAAQ;AAC3C,QAAI,aAAa,QAAQ,OAAO;AAChC,QAAI,IAAI,UAAU,SAAS,mBAAmB,GAAG;AAC/C,YAAM,YAAY,IAAI,uBAAuB,eAAe;AAC5D,UAAI,aAAa,UAAU,SAAS,GAAG;AACrC,QAAC,UAAU,CAAC,EAAiB,MAAM,OAAO,MAAM,QAAQ,YAAY,GAAG;AAAA,MACzE;AAAA,IACF;AAEA,QAAI,IAAI,UAAU,SAAS,gBAAgB,GAAG;AAC5C,YAAM,WAAW,IAAI,uBAAuB,iBAAiB;AAC7D,UAAI,YAAY,SAAS,SAAS,GAAG;AACnC,mBAAW,WAAW,UAAU;AAC9B,UAAC,QAA2B,MAAM,kBAAkB,MAAM,QAAQ,YAAY,GAAG;AAAA,QACnF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAOe,SAAR,UAA2B,EAAE,QAAQ,aAAa,GAAG,GAAG,GAAmB;AAChF,QAAM,UAAgB,aAAuB,IAAI;AACjD,QAAM,QAAQ,SAAS;AAEvB,EAAM,gBAAU,MAAM;AACpB,UAAM,OAAO,QAAQ;AACrB,QAAI,SAAS,MAAM,IAAI,QAAQ,SAAS,KAAK,MAAM;AACjD,YAAM,MAAM,QAAQ,KAAK;AACzB,eAAS,GAAG;AACZ,UAAI,MAAM,QAAQ,SAAS,QAAQ;AACjC,sBAAc,KAAK,KAAK;AAAA,MAC1B;AAEA,YAAM,WAAW,IAAI,iBAAiB,CAAC,YAAY;AACjD,mBAAW,SAAS,SAAS;AAC3B,qBAAW,QAAQ,MAAM,YAAY;AACnC,gBAAI,gBAAgB,SAAS;AAC3B,uBAAS,IAAI;AACb,kBAAI,MAAM,QAAQ,SAAS,QAAQ;AACjC,8BAAc,KAAK,KAAK;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,eAAS,QAAQ,KAAK;AAAA,QACpB,SAAS;AAAA,QACT,WAAW;AAAA,MACb,CAAC;AAED,WAAK,OAAO,GAAG;AACf,aAAO,MAAM;AACX,iBAAS,WAAW;AACpB,YAAI,OAAO;AAAA,MACb;AAAA,IACF;AACA,WAAO,MAAM;AAAA,IAAC;AAAA,EAChB,GAAG,CAAC,OAAO,KAAK,CAAC;AAEjB,SAAO,oCAAC,iBAAc,KAAK,SAAS,IAAQ;AAC9C;","names":[]}