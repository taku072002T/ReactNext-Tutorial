{"version":3,"sources":["../../src/entrypoint.tsx"],"sourcesContent":["import Button from '@mui/material/Button';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { AppHostProvider, ToolpadComponents } from '@toolpad/studio-runtime';\nimport createCache from '@emotion/cache';\nimport { CacheProvider } from '@emotion/react';\nimport { Box } from '@mui/material';\nimport { ToolpadPlan } from '@toolpad/studio-runtime/appDom';\nimport { RuntimeState } from './runtime/types';\nimport { ToolpadApp as RuntimeToolpadApp, ToolpadAppProps, componentsStore } from './runtime';\n\nconst IS_PREVIEW = process.env.NODE_ENV !== 'production';\n\nconst TOOLPAD_PLAN = process.env.TOOLPAD_PLAN as ToolpadPlan;\n\nconst cache = createCache({\n  key: 'css',\n  prepend: true,\n});\n\n// See https://github.com/emotion-js/emotion/issues/1105#issuecomment-1058225197\ncache.compat = true;\n\n/**\n * This allows us to hot update the components when a file is added/removed\n */\nexport function setComponents(newComponents: ToolpadComponents) {\n  componentsStore.setState(newComponents);\n}\n\ninterface RootProps {\n  initialState: RuntimeState;\n  base: string;\n  ToolpadApp: React.ComponentType<ToolpadAppProps>;\n}\n\nfunction Root({ ToolpadApp, initialState, base }: RootProps) {\n  return (\n    <React.StrictMode>\n      <CacheProvider value={cache}>\n        {/* For some reason this helps with https://github.com/vitejs/vite/issues/12423 */}\n        <Button sx={{ display: 'none' }} />\n        <AppHostProvider isPreview={IS_PREVIEW} plan={TOOLPAD_PLAN}>\n          <ToolpadApp basename={base} state={initialState} />\n        </AppHostProvider>\n        <Box data-testid=\"page-ready-marker\" sx={{ display: 'none' }} />\n      </CacheProvider>\n    </React.StrictMode>\n  );\n}\n\nexport interface InitParams {\n  initialState: RuntimeState;\n  base: string;\n  ToolpadApp?: React.ComponentType<ToolpadAppProps>;\n}\n\nexport function init({ ToolpadApp = RuntimeToolpadApp, initialState, base }: InitParams) {\n  ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n    <Root base={base} ToolpadApp={ToolpadApp} initialState={initialState} />,\n  );\n}\n"],"mappings":";;;;;;;;;AAAA,OAAO,YAAY;AACnB,YAAY,WAAW;AACvB,YAAY,cAAc;AAC1B,SAAS,uBAA0C;AACnD,OAAO,iBAAiB;AACxB,SAAS,qBAAqB;AAC9B,SAAS,WAAW;AAKpB,IAAM,aAAa,QAAQ,IAAI,aAAa;AAE5C,IAAM,eAAe,QAAQ,IAAI;AAEjC,IAAM,QAAQ,YAAY;AAAA,EACxB,KAAK;AAAA,EACL,SAAS;AACX,CAAC;AAGD,MAAM,SAAS;AAKR,SAAS,cAAc,eAAkC;AAC9D,kBAAgB,SAAS,aAAa;AACxC;AAQA,SAAS,KAAK,EAAE,YAAAA,aAAY,cAAc,KAAK,GAAc;AAC3D,SACE,oCAAO,kBAAN,MACC,oCAAC,iBAAc,OAAO,SAEpB,oCAAC,UAAO,IAAI,EAAE,SAAS,OAAO,GAAG,GACjC,oCAAC,mBAAgB,WAAW,YAAY,MAAM,gBAC5C,oCAACA,aAAA,EAAW,UAAU,MAAM,OAAO,cAAc,CACnD,GACA,oCAAC,OAAI,eAAY,qBAAoB,IAAI,EAAE,SAAS,OAAO,GAAG,CAChE,CACF;AAEJ;AAQO,SAAS,KAAK,EAAE,YAAAA,cAAa,YAAmB,cAAc,KAAK,GAAe;AACvF,EAAS,oBAAW,SAAS,eAAe,MAAM,CAAgB,EAAE;AAAA,IAClE,oCAAC,QAAK,MAAY,YAAYA,aAAY,cAA4B;AAAA,EACxE;AACF;","names":["ToolpadApp"]}