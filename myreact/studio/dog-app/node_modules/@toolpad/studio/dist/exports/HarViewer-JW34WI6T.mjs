import {
  createHarLog
} from "./chunk-UZE2EYMX.mjs";
import "./chunk-IEP6GGEX.mjs";

// src/components/HarViewer.tsx
import { fromHar } from "perf-cascade";
import * as React from "react";
import { styled } from "@mui/material";
import { useTheme } from "@mui/material/styles";
import "perf-cascade/dist/perf-cascade.css";
var HarViewerRoot = styled("div")({});
function fixLinks(elm) {
  elm.querySelectorAll("a").forEach((link) => link.setAttribute("target", "_blank"));
}
function forceDarkMode(elm, theme) {
  elm.querySelectorAll("svg").forEach((svg) => {
    svg.setAttribute("fill", "white");
    if (svg.classList.contains("left-fixed-holder")) {
      const fullLabel = svg.getElementsByClassName("label-full-bg");
      if (fullLabel && fullLabel.length > 0) {
        fullLabel[0].style.fill = theme.palette.primaryDark[500];
      }
    }
    if (svg.classList.contains("tooltip-holder")) {
      const tooltips = svg.getElementsByClassName("tooltip-payload");
      if (tooltips && tooltips.length > 0) {
        for (const tooltip of tooltips) {
          tooltip.style.backgroundColor = theme.palette.primaryDark[500];
        }
      }
    }
  });
}
function HarViewer({ value = createHarLog(), sx }) {
  const rootRef = React.useRef(null);
  const theme = useTheme();
  React.useEffect(() => {
    const root = rootRef.current;
    if (value && value.log.entries.length > 0 && root) {
      const svg = fromHar(value);
      fixLinks(svg);
      if (theme.palette.mode === "dark") {
        forceDarkMode(svg, theme);
      }
      const observer = new MutationObserver((entries) => {
        for (const entry of entries) {
          for (const node of entry.addedNodes) {
            if (node instanceof Element) {
              fixLinks(node);
              if (theme.palette.mode === "dark") {
                forceDarkMode(svg, theme);
              }
            }
          }
        }
      });
      observer.observe(svg, {
        subtree: true,
        childList: true
      });
      root.append(svg);
      return () => {
        observer.disconnect();
        svg.remove();
      };
    }
    return () => {
    };
  }, [value, theme]);
  return /* @__PURE__ */ React.createElement(HarViewerRoot, { ref: rootRef, sx });
}
export {
  HarViewer as default
};
//# sourceMappingURL=HarViewer-JW34WI6T.mjs.map