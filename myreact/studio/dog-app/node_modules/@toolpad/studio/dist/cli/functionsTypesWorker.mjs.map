{"version":3,"sources":["../../src/server/functionsTypesWorker.ts","../../src/server/functionsShared.ts"],"sourcesContent":["import * as path from 'path';\nimport invariant from 'invariant';\nimport ts from 'typescript';\nimport { glob } from 'glob';\nimport chalk from 'chalk';\nimport type { JSONSchema7, JSONSchema7TypeName, JSONSchema7Type } from 'json-schema';\nimport { asArray } from '@toolpad/utils/collections';\nimport { PrimitiveValueType } from '@toolpad/studio-runtime';\nimport { compilerOptions } from './functionsShared';\n\nexport interface ReturnTypeIntrospectionResult {\n  schema: JSONSchema7 | null;\n}\n\nexport interface HandlerIntrospectionResult {\n  name: string;\n  isCreateFunction: boolean;\n  parameters: [string, PrimitiveValueType][];\n  returnType: ReturnTypeIntrospectionResult;\n}\n\nexport interface DataProviderIntrospectionResult {\n  name: string;\n}\n\nexport interface IntrospectionMessage {\n  message: string;\n}\n\nexport interface FileIntrospectionResult {\n  name: string;\n  errors: IntrospectionMessage[];\n  warnings: IntrospectionMessage[];\n  handlers: HandlerIntrospectionResult[];\n  dataProviders: DataProviderIntrospectionResult[];\n}\n\nexport interface IntrospectionResult {\n  error?: Error;\n  files: FileIntrospectionResult[];\n}\n\nexport type WorkerApi = {\n  introspect(): Promise<IntrospectionResult>;\n};\n\nexport interface TypesWorkerData {\n  resourcesFolder: string;\n}\n\nconst NULL_PROP_VALUE: PrimitiveValueType = {\n  type: 'object',\n  schema: { type: 'null' },\n  default: null,\n};\n\nfunction propValueFromJsonSchema(schema: JSONSchema7 | null): PrimitiveValueType {\n  if (!schema) {\n    return NULL_PROP_VALUE;\n  }\n\n  if (Array.isArray(schema.type)) {\n    return propValueFromJsonSchema({\n      ...schema,\n      type: schema.type[0],\n    });\n  }\n\n  switch (schema.type) {\n    case 'integer':\n      return { type: 'number' };\n    case 'string': {\n      if (schema.enum) {\n        return { type: 'string', enum: schema.enum.map((value) => String(value)) };\n      }\n      return { type: 'string' };\n    }\n    case 'null':\n    case null:\n    case undefined:\n      return NULL_PROP_VALUE;\n    default:\n      return { type: schema.type, schema };\n  }\n}\n\nfunction formatDiagnostic(diagnostic: ts.Diagnostic): string {\n  const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n  if (diagnostic.file) {\n    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n    return `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`;\n  }\n  return message;\n}\n\nfunction hasTypeFlag(type: ts.Type, flag: ts.TypeFlags) {\n  // eslint-disable-next-line no-bitwise\n  return (type.getFlags() & flag) !== 0;\n}\n\nfunction asUnionTypes(type: ts.Type): ts.Type[] {\n  return type.isUnion() ? type.types : [type];\n}\n\nfunction toJsonSchema(\n  tsType: ts.Type,\n  checker: ts.TypeChecker,\n  seenTypes: Set<ts.Type>,\n): JSONSchema7 | null {\n  if (seenTypes.has(tsType)) {\n    return { const: '[Circular]' };\n  }\n\n  seenTypes.add(tsType);\n\n  try {\n    if (\n      hasTypeFlag(tsType, ts.TypeFlags.Undefined) ||\n      hasTypeFlag(tsType, ts.TypeFlags.Void) ||\n      hasTypeFlag(tsType, ts.TypeFlags.VoidLike)\n    ) {\n      return null;\n    }\n\n    if (hasTypeFlag(tsType, ts.TypeFlags.Null)) {\n      return { type: 'null' };\n    }\n\n    if (tsType === checker.getTrueType()) {\n      return { type: 'boolean', const: true };\n    }\n\n    if (tsType === checker.getFalseType()) {\n      return { type: 'boolean', const: false };\n    }\n\n    if (tsType.isNumberLiteral()) {\n      return { type: 'number', const: tsType.value };\n    }\n\n    if (tsType.isStringLiteral()) {\n      return { type: 'string', const: tsType.value };\n    }\n\n    if (tsType.isUnion()) {\n      const anyOf = [];\n\n      const withoutUndefined = tsType.types.filter(\n        (type) => !hasTypeFlag(type, ts.TypeFlags.Undefined),\n      );\n\n      if (withoutUndefined.length <= 0) {\n        return null;\n      }\n\n      if (withoutUndefined.length === 1) {\n        return toJsonSchema(withoutUndefined[0], checker, seenTypes);\n      }\n\n      for (const type of withoutUndefined) {\n        const itemType = toJsonSchema(type, checker, seenTypes);\n\n        if (itemType) {\n          anyOf.push(itemType);\n        }\n      }\n\n      const typeNames = new Set<JSONSchema7TypeName>();\n      const enumValues = new Set<JSONSchema7Type>();\n      let hasTrue = false;\n      let hasFalse = false;\n      let hasOther = false;\n      let isEnum = true;\n      for (const itemType of anyOf) {\n        if (typeof itemType.const !== 'undefined') {\n          enumValues.add(itemType.const);\n        } else {\n          isEnum = false;\n        }\n\n        if (itemType.const === true) {\n          hasTrue = true;\n        } else if (itemType.const === false) {\n          hasFalse = true;\n        } else {\n          hasOther = true;\n        }\n\n        for (const typeName of asArray(itemType.type)) {\n          if (typeName) {\n            typeNames.add(typeName);\n          }\n        }\n      }\n\n      if (hasTrue && hasFalse && !hasOther) {\n        return { type: 'boolean' };\n      }\n\n      if (isEnum) {\n        let type: JSONSchema7TypeName | undefined;\n        if (typeNames.size === 1) {\n          type = Array.from(typeNames)[0];\n        }\n        return { type, enum: Array.from(enumValues) };\n      }\n\n      if (anyOf.length === 1) {\n        return anyOf[0];\n      }\n\n      return { anyOf };\n    }\n\n    if (\n      hasTypeFlag(tsType, ts.TypeFlags.BooleanLike) ||\n      hasTypeFlag(tsType, ts.TypeFlags.Boolean) ||\n      hasTypeFlag(tsType, ts.TypeFlags.BooleanLiteral)\n    ) {\n      return { type: 'boolean' };\n    }\n\n    if (\n      hasTypeFlag(tsType, ts.TypeFlags.NumberLike) ||\n      hasTypeFlag(tsType, ts.TypeFlags.Number) ||\n      hasTypeFlag(tsType, ts.TypeFlags.NumberLiteral) ||\n      hasTypeFlag(tsType, ts.TypeFlags.BigIntLike) ||\n      hasTypeFlag(tsType, ts.TypeFlags.BigInt) ||\n      hasTypeFlag(tsType, ts.TypeFlags.BigIntLiteral)\n    ) {\n      return { type: 'number' };\n    }\n\n    if (\n      hasTypeFlag(tsType, ts.TypeFlags.StringLike) ||\n      hasTypeFlag(tsType, ts.TypeFlags.String) ||\n      hasTypeFlag(tsType, ts.TypeFlags.StringLiteral)\n    ) {\n      return { type: 'string' };\n    }\n\n    if (hasTypeFlag(tsType, ts.TypeFlags.Object)) {\n      if (checker.isArrayLikeType(tsType)) {\n        let items: JSONSchema7 | undefined;\n        const indexType = tsType.getNumberIndexType();\n        if (indexType) {\n          items = toJsonSchema(indexType, checker, seenTypes) ?? undefined;\n        }\n\n        return {\n          type: 'array',\n          items,\n        };\n      }\n\n      const required: string[] = [];\n\n      const properties = Object.fromEntries(\n        tsType.getProperties().flatMap((propertySymbol) => {\n          const propertyName = propertySymbol.getName();\n          const propertyType = checker.getTypeOfSymbol(propertySymbol);\n          const isOptional = asUnionTypes(propertyType).some((type) =>\n            hasTypeFlag(type, ts.TypeFlags.Undefined),\n          );\n          if (!isOptional) {\n            required.push(propertyName);\n          }\n          const propertySchema = toJsonSchema(propertyType, checker, seenTypes);\n          return propertySchema ? [[propertyName, propertySchema]] : [];\n        }),\n      );\n\n      return { type: 'object', properties, required };\n    }\n\n    return {};\n  } finally {\n    seenTypes.delete(tsType);\n  }\n}\n\nfunction getParameters(\n  callSignatures: readonly ts.Signature[],\n  checker: ts.TypeChecker,\n): [string, PrimitiveValueType][] {\n  invariant(callSignatures.length > 0, 'Expected at least 1 call signature');\n\n  const paramEntries: [string, PrimitiveValueType][] = callSignatures[0]\n    .getParameters()\n    .map((parameter) => {\n      const paramType = checker.getTypeOfSymbolAtLocation(parameter, parameter.valueDeclaration!);\n      const schema = toJsonSchema(paramType, checker, new Set());\n\n      return [\n        parameter.getName(),\n        {\n          ...propValueFromJsonSchema(schema),\n          required: !checker.isOptionalParameter(\n            parameter.valueDeclaration as ts.ParameterDeclaration,\n          ),\n        },\n      ];\n    });\n\n  return paramEntries;\n}\n\nfunction getAwaitedType(type: ts.Type, checker: ts.TypeChecker): ts.Type {\n  const awaitedType = type.getNonNullableType();\n  const then = awaitedType.getProperty('then');\n  if (hasTypeFlag(awaitedType, ts.TypeFlags.Object) && then) {\n    const thenType = checker.getTypeOfSymbolAtLocation(then, then.valueDeclaration!);\n    for (const thenCallSignature of thenType.getCallSignatures()) {\n      const [onfulfilled] = thenCallSignature.getParameters();\n      if (onfulfilled) {\n        const onfulfilledType = checker\n          .getTypeOfSymbolAtLocation(onfulfilled, onfulfilled.valueDeclaration!)\n          .getNonNullableType();\n        for (const onFulfilledCallSignature of onfulfilledType.getCallSignatures()) {\n          const [value] = onFulfilledCallSignature.getParameters();\n          if (value) {\n            const valueType = checker.getTypeOfSymbolAtLocation(value, value.valueDeclaration!);\n            return getAwaitedType(valueType, checker);\n          }\n        }\n      }\n    }\n  }\n\n  return type;\n}\n\nfunction isToolpadCreateFunction(exportType: ts.Type): boolean {\n  const properties = exportType.getProperties();\n\n  for (const property of properties) {\n    if (ts.isPropertySignature(property.valueDeclaration!)) {\n      if (property.valueDeclaration.name.getText() === '[TOOLPAD_FUNCTION]') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isToolpadCreateDataProvider(exportType: ts.Type): boolean {\n  const properties = exportType.getProperties();\n\n  for (const property of properties) {\n    if (ts.isPropertySignature(property.valueDeclaration!)) {\n      if (property.valueDeclaration.name.getText() === '[TOOLPAD_DATA_PROVIDER_MARKER]') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction getCreateFunctionParameters(\n  callSignatures: readonly ts.Signature[],\n  checker: ts.TypeChecker,\n): [string, PrimitiveValueType][] {\n  invariant(callSignatures.length > 0, 'Expected at least 1 call signature');\n  const [callSignature] = callSignatures;\n  const [firstParameter] = callSignature.getParameters();\n  invariant(firstParameter, 'Expected at least 1 parameter');\n  const firstParameterType = checker.getTypeOfSymbolAtLocation(\n    firstParameter,\n    firstParameter.valueDeclaration!,\n  );\n  const parametersProperty = firstParameterType.getProperty('parameters');\n  invariant(parametersProperty, 'Expected parameters property');\n  const parametersPropertyType = checker.getTypeOfSymbolAtLocation(\n    parametersProperty,\n    parametersProperty.valueDeclaration!,\n  );\n  return parametersPropertyType.getProperties().map((property) => {\n    const propertyType = checker.getTypeOfSymbol(property);\n    const schema = toJsonSchema(propertyType, checker, new Set());\n    return [\n      property.getName(),\n      {\n        ...propValueFromJsonSchema(schema),\n        required: false,\n      },\n    ];\n  });\n}\n\nfunction getReturnType(callSignatures: readonly ts.Signature[], checker: ts.TypeChecker) {\n  invariant(callSignatures.length > 0, 'Expected at least 1 call signature');\n\n  const returnType = callSignatures[0].getReturnType();\n\n  const awaitedReturnType = getAwaitedType(returnType, checker);\n\n  const schema = toJsonSchema(awaitedReturnType, checker, new Set());\n\n  return {\n    schema,\n  };\n}\n\nexport interface ExtractTypesParams {\n  resourcesFolder: string;\n}\n\nlet createFunctionWarningShown = false;\n\nexport default async function extractTypes({\n  resourcesFolder,\n}: ExtractTypesParams): Promise<IntrospectionResult> {\n  const entryPoints = await glob(path.join(resourcesFolder, './*.ts'), {\n    windowsPathsNoEscape: true,\n  });\n\n  const program = ts.createProgram(entryPoints, compilerOptions);\n\n  const checker = program.getTypeChecker();\n\n  const usingCreateFunction = [];\n\n  const files: FileIntrospectionResult[] = entryPoints\n    .map((entrypoint) => {\n      const sourceFile = program.getSourceFile(entrypoint);\n      const relativeEntrypoint = path.relative(resourcesFolder, entrypoint);\n\n      if (!sourceFile) {\n        return null;\n      }\n\n      const diagnostics = program.getSemanticDiagnostics(sourceFile);\n\n      for (const diagnostic of diagnostics) {\n        // eslint-disable-next-line no-console\n        console.log(`${chalk.blue('info')}  - ${formatDiagnostic(diagnostic)}`);\n      }\n\n      const moduleSymbol = checker.getSymbolAtLocation(sourceFile);\n\n      if (!moduleSymbol) {\n        return null;\n      }\n\n      const exports = checker.getExportsOfModule(moduleSymbol);\n\n      const handlers: HandlerIntrospectionResult[] = exports\n        .map((symbol) => {\n          const exportType = checker.getTypeOfSymbolAtLocation(symbol, symbol.valueDeclaration!);\n          const callSignatures = exportType.getCallSignatures();\n\n          if (callSignatures.length <= 0) {\n            return null;\n          }\n\n          const isCreateFunction = isToolpadCreateFunction(exportType);\n          if (isCreateFunction) {\n            usingCreateFunction.push(symbol.name);\n          }\n          return {\n            name: symbol.name,\n            isCreateFunction,\n            parameters: isCreateFunction\n              ? getCreateFunctionParameters(callSignatures, checker)\n              : getParameters(callSignatures, checker),\n            returnType: getReturnType(callSignatures, checker),\n          } satisfies HandlerIntrospectionResult;\n        })\n        .filter(Boolean);\n\n      const dataProviders: DataProviderIntrospectionResult[] = exports\n        .map((symbol) => {\n          const exportType = checker.getTypeOfSymbolAtLocation(symbol, symbol.valueDeclaration!);\n\n          if (isToolpadCreateDataProvider(exportType)) {\n            return {\n              name: symbol.name,\n            };\n          }\n\n          return null;\n        })\n        .filter(Boolean);\n\n      return {\n        name: relativeEntrypoint,\n        errors: diagnostics\n          .filter((diagnostic) => diagnostic.category === ts.DiagnosticCategory.Error)\n          .map((diagnostic) => ({ message: formatDiagnostic(diagnostic) })),\n        warnings: diagnostics\n          .filter((diagnostic) => diagnostic.category === ts.DiagnosticCategory.Warning)\n          .map((diagnostic) => ({ message: formatDiagnostic(diagnostic) })),\n        handlers,\n        dataProviders,\n      } satisfies FileIntrospectionResult;\n    })\n    .filter(Boolean)\n    .sort((a, b) => a.name.localeCompare(b.name));\n\n  if (usingCreateFunction.length > 0 && !createFunctionWarningShown) {\n    console.warn(\n      `${chalk.yellow('warn')} - ${chalk.bold(usingCreateFunction.length)} function${\n        usingCreateFunction.length === 1 ? ' is' : 's are'\n      } using the deprecated ${chalk.red(\n        'createFunction',\n      )} API. This will be removed from Toolpad in a future release. Please see ${chalk.underline(\n        chalk.blue('https://mui.com/toolpad/studio/reference/api/create-function/'),\n      )} for migration information and updates.`,\n    );\n    createFunctionWarningShown = true;\n  }\n\n  return { files };\n}\n","import ts from 'typescript';\n\nexport const compilerOptions: ts.CompilerOptions = {\n  noEmit: true,\n  target: ts.ScriptTarget.ESNext,\n  lib: ['lib.esnext.d.ts'],\n  types: ['node'],\n  // NOTE: strictNullChecks is essential for the type extraction to work properly. When we decide\n  // to support user-defined tsconfig.json, we must make sure this option is enabled.\n  strictNullChecks: true,\n  module: ts.ModuleKind.CommonJS,\n  moduleResolution: ts.ModuleResolutionKind.Bundler,\n  esModuleInterop: true,\n  allowSyntheticDefaultImports: true,\n};\n"],"mappings":"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","names":["ts","ts"]}