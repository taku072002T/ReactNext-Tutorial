{"version":3,"sources":["../../src/server/appServerWorker.ts","../../src/server/toolpadAppBuilder.ts","../../src/constants.ts","../../src/server/viteVirtualPlugin.ts","../../src/runtime/constants.ts","../../src/runtime/createRuntimeState.tsx","../../src/server/toolpadAppServer.ts","../../src/server/config.ts","../../src/server/rpc.ts","../../src/server/auth.ts"],"sourcesContent":["import { parentPort, workerData, MessagePort } from 'worker_threads';\nimport invariant from 'invariant';\nimport type { Plugin } from 'vite';\nimport { createRpcClient } from '@toolpad/utils/workerRpc';\nimport type * as appDom from '@toolpad/studio-runtime/appDom';\nimport { createViteConfig, getEditorHtmlContent } from './toolpadAppBuilder';\nimport type { ComponentEntry, PagesManifest } from './localMode';\nimport createRuntimeState from '../runtime/createRuntimeState';\nimport { postProcessHtml } from './toolpadAppServer';\n\nexport type Command = { kind: 'reload-components' } | { kind: 'exit' };\n\nexport type WorkerRpc = {\n  notifyReady: () => Promise<void>;\n  loadDom: () => Promise<appDom.AppDom>;\n  getComponents: () => Promise<ComponentEntry[]>;\n  getPagesManifest: () => Promise<PagesManifest>;\n};\n\nconst { notifyReady, loadDom, getComponents, getPagesManifest } = createRpcClient<WorkerRpc>(\n  workerData.mainThreadRpcPort,\n);\n\ninvariant(\n  process.env.NODE_ENV === 'development',\n  'The dev server must be started with NODE_ENV=development',\n);\n\nfunction devServerPlugin(): Plugin {\n  return {\n    name: 'toolpad-dev-server',\n\n    async configureServer(viteServer) {\n      return () => {\n        viteServer.middlewares.use('/', async (req, res, next) => {\n          invariant(req.url, 'request must have a url');\n          try {\n            const dom = await loadDom();\n\n            const template = getEditorHtmlContent();\n\n            let html = await viteServer.transformIndexHtml(req.url, template);\n\n            html = postProcessHtml(html, {\n              initialState: createRuntimeState({ dom }),\n            });\n\n            res.setHeader('content-type', 'text/html; charset=utf-8').end(html);\n          } catch (error) {\n            next(error);\n          }\n        });\n      };\n    },\n  };\n}\n\nexport interface AppViteServerConfig {\n  outDir: string;\n  root: string;\n  base: string;\n  customServer: boolean;\n  toolpadDevMode: boolean;\n  port: number;\n  mainThreadRpcPort: MessagePort;\n}\n\nexport async function main({ port, ...config }: AppViteServerConfig) {\n  const { reloadComponents, viteConfig } = await createViteConfig({\n    ...config,\n    dev: true,\n    plugins: [devServerPlugin()],\n    getComponents,\n    getPagesManifest,\n    loadDom,\n  });\n\n  const vite = await import('vite');\n  const devServer = await vite.createServer(viteConfig);\n\n  await devServer.listen(port);\n\n  invariant(parentPort, 'parentPort must be defined');\n\n  parentPort.on('message', async (msg: Command) => {\n    switch (msg.kind) {\n      case 'reload-components': {\n        reloadComponents();\n        break;\n      }\n      case 'exit': {\n        await devServer.close();\n        process.exit();\n        break;\n      }\n      default:\n        throw new Error(`Unknown command ${msg}`);\n    }\n  });\n\n  await notifyReady();\n}\n\nmain(workerData);\n","import * as path from 'path';\nimport * as url from 'node:url';\nimport * as fs from 'fs';\nimport type { InlineConfig, Plugin } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport { indent } from '@toolpad/utils/strings';\nimport * as appDom from '@toolpad/studio-runtime/appDom';\nimport type { ComponentEntry, PagesManifest } from './localMode';\nimport { INITIAL_STATE_WINDOW_PROPERTY } from '../constants';\nimport viteVirtualPlugin, { VirtualFileContent, replaceFiles } from './viteVirtualPlugin';\nimport { FONTS_URL } from '../runtime/constants';\n\nconst currentDirectory = url.fileURLToPath(new URL('.', import.meta.url));\n\nconst pkgJsonContent = fs.readFileSync(path.resolve(currentDirectory, '../../package.json'), {\n  encoding: 'utf-8',\n});\nconst pkgJson = JSON.parse(pkgJsonContent);\nconst TOOLPAD_BUILD = process.env.GIT_SHA1?.slice(0, 7) || 'dev';\n\nconst MAIN_ENTRY = '/main.tsx';\nconst EDITOR_ENTRY = '/editor.tsx';\n\nfunction getHtmlContent(entry: string) {\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>Toolpad</title>\n        <link rel=\"preload\" href=\"${FONTS_URL}\" as=\"style\" onload=\"this.onload=null;this.rel='stylesheet'\">\n        <noscript><link rel=\"stylesheet\" href=\"${FONTS_URL}\"></noscript>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n    \n        <!-- __TOOLPAD_SCRIPTS__ -->\n\n        <script type=\"module\" src=${JSON.stringify(entry)}></script>\n      </body>\n    </html>\n  `;\n}\n\nfunction getAppHtmlContent() {\n  return getHtmlContent(MAIN_ENTRY);\n}\n\nexport function getEditorHtmlContent() {\n  return getHtmlContent(EDITOR_ENTRY);\n}\n\nfunction toolpadStudioVitePlugin(): Plugin {\n  return {\n    name: 'toolpad-studio',\n\n    async resolveId(id) {\n      if (id.endsWith('.html')) {\n        return id;\n      }\n      return null;\n    },\n\n    async load(id) {\n      if (id.endsWith('index.html')) {\n        // production build only\n        return getAppHtmlContent();\n      }\n\n      if (id.endsWith('editor.html')) {\n        // production build only\n        return getEditorHtmlContent();\n      }\n      return null;\n    },\n  };\n}\n\nexport interface CreateViteConfigParams {\n  toolpadDevMode: boolean;\n  outDir: string;\n  root: string;\n  dev: boolean;\n  base: string;\n  customServer?: boolean;\n  plugins?: Plugin[];\n  getComponents: () => Promise<ComponentEntry[]>;\n  loadDom: () => Promise<appDom.AppDom>;\n  getPagesManifest: () => Promise<PagesManifest>;\n}\n\nexport interface CreateViteConfigResult {\n  reloadComponents: () => Promise<void>;\n  viteConfig: InlineConfig;\n}\n\nexport async function createViteConfig({\n  toolpadDevMode,\n  outDir,\n  root,\n  dev,\n  base,\n  customServer,\n  plugins = [],\n  getComponents,\n  loadDom,\n  getPagesManifest,\n}: CreateViteConfigParams): Promise<CreateViteConfigResult> {\n  const mode = dev ? 'development' : 'production';\n\n  const initialDom = await loadDom();\n  const plan = appDom.getPlan(initialDom);\n\n  const getEntryPoint = (target: 'prod' | 'editor') => {\n    const isEditor = target === 'editor';\n\n    const componentsId = 'virtual:toolpad-files:components.tsx';\n\n    return `\nimport { init, setComponents } from '@toolpad/studio/entrypoint';\nimport components from ${JSON.stringify(componentsId)};\n${isEditor ? `import ToolpadEditor from '@toolpad/studio/editor'` : ''}\n\n${\n  isEditor\n    ? `\n      // importing monaco to get around module ordering issues in esbuild\n      import 'monaco-editor';\n\n      window.MonacoEnvironment = {\n        getWorker: async (_, label) => {\n          // { type: 'module' } is supported in firefox but behind feature flag:\n          // you have to enable it manually via about:config and set dom.workers.modules.enabled to true.\n          if (label === 'typescript') {\n            const { default: TsWorker } = await import('monaco-editor/esm/vs/language/typescript/ts.worker?worker');\n            return new TsWorker();\n          }\n          if (label === 'json') {\n            const { default: JsonWorker } = await import('monaco-editor/esm/vs/language/json/json.worker?worker');\n            return new JsonWorker();\n          }\n          if (label === 'html') {\n            const { default: HtmlWorker } = await import('monaco-editor/esm/vs/language/html/html.worker?worker');\n            return new HtmlWorker();\n          }\n          if (label === 'css') {\n            const { default: CssWorker } = await import('monaco-editor/esm/vs/language/css/css.worker?worker');\n            return new CssWorker();\n          }\n          if (label === 'editorWorkerService') {\n            const { default: EditorWorker } = await import('monaco-editor/esm/vs/editor/editor.worker?worker');\n            return new EditorWorker();\n          }\n          throw new Error(\\`Failed to resolve worker with label \"\\${label}\"\\`);\n        },\n      } as monaco.Environment;\n      `\n    : ''\n}\n\nconst initialState = window[${JSON.stringify(INITIAL_STATE_WINDOW_PROPERTY)}];\n\nsetComponents(components);\n\ninit({\n  ${isEditor ? `ToolpadApp: ToolpadEditor,` : ''}\n  base: ${JSON.stringify(base)},\n  initialState,\n})\n\nif (import.meta.hot) {\n  // TODO: investigate why this doesn't work, see https://github.com/vitejs/vite/issues/12912\n  import.meta.hot.accept(\n    [${JSON.stringify(componentsId)}],\n    (newComponents) => {\n    if (newComponents) {\n      console.log('hot updating Toolpad Studio components')\n      setComponents(\n        newComponents ?? components,\n      );\n    }\n  });\n}\n`;\n  };\n\n  const createComponentsFile = async () => {\n    const components = await getComponents();\n\n    const imports = components.map(\n      ({ name }) => `import ${name} from 'toolpad-user-project:./components/${name}';`,\n    );\n\n    const defaultExportProperties = components.map(\n      ({ name }) => `${JSON.stringify(`codeComponent.${name}`)}: ${name}`,\n    );\n\n    const code = `\n      ${imports.join('\\n')}\n\n      export default {\n        ${indent(defaultExportProperties.join(',\\n'), 2)}\n      };\n    `;\n\n    return {\n      code,\n      map: null,\n    };\n  };\n\n  const virtualFiles = new Map<string, VirtualFileContent>([\n    ['main.tsx', getEntryPoint('prod')],\n    ['editor.tsx', getEntryPoint('editor')],\n    ['components.tsx', await createComponentsFile()],\n    ['pages-manifest.json', JSON.stringify(await getPagesManifest(), null, 2)],\n  ]);\n\n  const virtualToolpadFiles = viteVirtualPlugin(virtualFiles, 'toolpad-files');\n\n  return {\n    reloadComponents: async () => {\n      const newFiles = new Map(virtualFiles);\n      newFiles.set('components.tsx', await createComponentsFile());\n      replaceFiles(virtualToolpadFiles, newFiles);\n    },\n    viteConfig: {\n      configFile: false,\n      mode,\n      build: {\n        outDir,\n        emptyOutDir: true,\n        chunkSizeWarningLimit: Infinity,\n        rollupOptions: {\n          input: {\n            index: path.resolve(currentDirectory, './index.html'),\n            ...(dev ? { editor: path.resolve(currentDirectory, './editor.html') } : {}),\n          },\n          onwarn(warning, warn) {\n            if (warning.code === 'MODULE_LEVEL_DIRECTIVE') {\n              return;\n            }\n            warn(warning);\n          },\n        },\n      },\n      envFile: false,\n      resolve: {\n        dedupe: ['@mui/material', '@emotion/react', '@emotion/styled', '@tanstack/react-query'],\n        alias: [\n          {\n            // FIXME(https://github.com/mui/material-ui/issues/35233)\n            find: /^@mui\\/icons-material\\/(?!esm\\/)([^/]*)/,\n            replacement: '@mui/icons-material/esm/$1',\n          },\n          {\n            find: /^toolpad-user-project:(.*)$/,\n            replacement: `${root}/$1`,\n          },\n          {\n            find: MAIN_ENTRY,\n            replacement: 'virtual:toolpad-files:main.tsx',\n          },\n          {\n            find: '@toolpad/studio',\n            replacement: toolpadDevMode\n              ? // load source\n                path.resolve(currentDirectory, '../../src/exports')\n              : // load compiled\n                path.resolve(currentDirectory, '../exports'),\n          },\n          ...(dev\n            ? [\n                {\n                  find: EDITOR_ENTRY,\n                  replacement: 'virtual:toolpad-files:editor.tsx',\n                },\n                {\n                  find: 'vm',\n                  replacement: 'vm-browserify',\n                },\n              ]\n            : []),\n        ],\n      },\n      optimizeDeps: {\n        include: [\n          ...(dev\n            ? [\n                'perf-cascade',\n                'monaco-editor',\n                'monaco-editor/esm/vs/basic-languages/javascript/javascript',\n                'monaco-editor/esm/vs/basic-languages/typescript/typescript',\n                'monaco-editor/esm/vs/basic-languages/markdown/markdown',\n              ]\n            : ['@toolpad/studio/entrypoint', '@toolpad/studio/editor']),\n        ],\n      },\n      appType: 'custom',\n      logLevel: 'info',\n      root: currentDirectory,\n      plugins: [toolpadStudioVitePlugin(), virtualToolpadFiles, react(), ...plugins],\n      base,\n      define: {\n        'process.env.NODE_ENV': `'${mode}'`,\n        'process.env.BASE_URL': `'${base}'`,\n        'process.env.TOOLPAD_CUSTOM_SERVER': `'${JSON.stringify(customServer)}'`,\n        'process.env.TOOLPAD_VERSION': JSON.stringify(pkgJson.version),\n        'process.env.TOOLPAD_BUILD': JSON.stringify(TOOLPAD_BUILD),\n        'process.env.TOOLPAD_PLAN': JSON.stringify(plan),\n      },\n    },\n  };\n}\n\nexport interface ToolpadBuilderParams {\n  outDir: string;\n  getComponents: () => Promise<ComponentEntry[]>;\n  loadDom: () => Promise<appDom.AppDom>;\n  getPagesManifest: () => Promise<PagesManifest>;\n  root: string;\n  base: string;\n}\n\nexport async function buildApp({\n  root,\n  base,\n  getComponents,\n  getPagesManifest,\n  loadDom,\n  outDir,\n}: ToolpadBuilderParams) {\n  const { viteConfig } = await createViteConfig({\n    toolpadDevMode: false,\n    dev: false,\n    root,\n    base,\n    outDir,\n    getComponents,\n    getPagesManifest,\n    loadDom,\n  });\n  const vite = await import('vite');\n  await vite.build(viteConfig);\n}\n","export const WINDOW_PROP_TOOLPAD_APP_RENDER_PARAMS = '__TOOLPAD_APP_RENDER_PARAMS__';\nexport const INITIAL_STATE_WINDOW_PROPERTY = '__initialToolpadState__';\n\nexport const TOOLPAD_TARGET_CE = 'CE';\nexport const TOOLPAD_TARGET_CLOUD = 'CLOUD';\nexport const TOOLPAD_TARGET_PRO = 'PRO';\nexport const REPOSITORY_URL = 'https://github.com/mui/toolpad';\nexport const LANDING_PAGE_URL = 'https://mui.com/toolpad/';\nexport const DOCUMENTATION_URL = 'https://mui.com/toolpad/studio/getting-started/';\nexport const DOCUMENTATION_INSTALLATION_URL =\n  'https://mui.com/toolpad/studio/getting-started/installation/';\nexport const ROADMAP_URL = 'https://github.com/orgs/mui/projects/9';\nexport const SCHEDULE_DEMO_URL = 'https://calendly.com/prakhar-mui/';\nexport const UPGRADE_URL = 'https://mui.com/toolpad/studio/getting-started/roadmap/#paid-plan';\n\nexport const VERSION_CHECK_INTERVAL = 1000 * 60 * 10;\n\n// TODO: Remove once global functions UI is ready\nexport const FEATURE_FLAG_GLOBAL_FUNCTIONS = false;\n","import { posix as path } from 'path';\nimport { Plugin, ViteDevServer, transformWithEsbuild } from 'vite';\n\nconst API_PROPERTY = Symbol('virtual-fs-api');\n\ninterface VirtualFsPluginApi {\n  replaceFiles: (newFiles: Map<string, LoadResult>) => void;\n}\n\nexport type VirtualFsPlugin = Plugin & { [API_PROPERTY]: VirtualFsPluginApi };\n\nexport type LoadResult = Awaited<ReturnType<Extract<NonNullable<Plugin['load']>, Function>>>;\n\nexport type VirtualFileContent = LoadResult;\n\nexport default function virtualFsPlugin(\n  initialFiles: Map<string, VirtualFileContent>,\n  userIdentifier: string,\n): VirtualFsPlugin {\n  const prefix = `virtual:${userIdentifier}:`;\n  const resolvedPrefix = `\\0${prefix}`;\n  const transformExtensions = new Set(['.js', '.jsx', '.ts', '.tsx']);\n  const resolveExtensions = new Set(['.js', '.jsx', '.ts', '.tsx', '.json']);\n  let serverInstance: ViteDevServer | undefined;\n  let files = initialFiles;\n  return {\n    name: 'virtual-fs',\n\n    enforce: 'pre',\n\n    configureServer(server: ViteDevServer) {\n      serverInstance = server;\n    },\n\n    resolveId(id: string, importer: string | undefined) {\n      if (id.startsWith(prefix)) {\n        const entryPath = id.slice(prefix.length);\n\n        if (files.has(entryPath)) {\n          return `${resolvedPrefix}${entryPath}`;\n        }\n\n        for (const extension of resolveExtensions) {\n          const entryPathWithExtension = `${entryPath}${extension}`;\n          if (files.has(entryPathWithExtension)) {\n            return `${resolvedPrefix}${entryPathWithExtension}`;\n          }\n        }\n      } else if (importer?.startsWith(resolvedPrefix)) {\n        const importerPath = importer.slice(resolvedPrefix.length);\n        const fullPath = path.resolve(path.dirname(importerPath), id);\n        return this.resolve(`${prefix}${fullPath}`, importer);\n      }\n      return null;\n    },\n\n    async load(id) {\n      if (id.startsWith(resolvedPrefix)) {\n        const virtualPath = id.slice(resolvedPrefix.length);\n        const content = files.get(virtualPath);\n        return content;\n      }\n      return null;\n    },\n\n    async transform(code, id) {\n      if (id.startsWith(resolvedPrefix)) {\n        const virtualPath = id.slice(resolvedPrefix.length);\n        if (transformExtensions.has(path.extname(virtualPath))) {\n          return transformWithEsbuild(code, virtualPath);\n        }\n      }\n      return null;\n    },\n\n    [API_PROPERTY]: {\n      async replaceFiles(newFiles: Map<string, LoadResult>) {\n        const filesToInvalidate = [];\n        for (const [virtualPath, content] of files) {\n          if (!newFiles.has(virtualPath) || newFiles.get(virtualPath) !== content) {\n            filesToInvalidate.push(virtualPath);\n          }\n        }\n\n        files = newFiles;\n\n        if (serverInstance) {\n          for (const virtualPath of filesToInvalidate) {\n            const resolvedId = `${resolvedPrefix}${virtualPath}`;\n            const mod = serverInstance.moduleGraph.getModuleById(resolvedId);\n            if (mod) {\n              serverInstance.reloadModule(mod);\n            }\n          }\n        } else {\n          console.warn('Server instance not found, cannot invalidate files');\n        }\n      },\n    },\n  };\n}\n\nexport function replaceFiles(plugin: VirtualFsPlugin, newFiles: Map<string, LoadResult>) {\n  return plugin[API_PROPERTY].replaceFiles(newFiles);\n}\n","export const FONTS_URL =\n  'https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap';\n","import * as appDom from '@toolpad/studio-runtime/appDom';\nimport { RuntimeState } from './types';\n\nexport interface CreateRuntimeStateParams {\n  dom: appDom.AppDom;\n}\n\nexport default function createRuntimeState({ dom }: CreateRuntimeStateParams): RuntimeState {\n  return {\n    dom: appDom.createRenderTree(dom),\n  };\n}\n","import * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { Server } from 'http';\nimport * as express from 'express';\nimport serializeJavascript from 'serialize-javascript';\nimport { ToolpadProject } from './localMode';\nimport { asyncHandler } from '../utils/express';\nimport { basicAuthUnauthorized, checkBasicAuthHeader } from './basicAuth';\nimport { createRpcServer } from './runtimeRpcServer';\nimport { createRpcHandler } from './rpc';\nimport { INITIAL_STATE_WINDOW_PROPERTY } from '../constants';\nimport createRuntimeState from '../runtime/createRuntimeState';\nimport type { RuntimeState } from '../runtime';\nimport { createAuthHandler, createRequireAuthMiddleware, getRequireAuthentication } from './auth';\n\nexport interface PostProcessHtmlParams {\n  initialState: RuntimeState;\n}\n\nexport function postProcessHtml(html: string, { initialState }: PostProcessHtmlParams): string {\n  const serializedInitialState = serializeJavascript(initialState, { isJSON: true });\n\n  const toolpadScripts = [\n    `<script>window[${JSON.stringify(\n      INITIAL_STATE_WINDOW_PROPERTY,\n    )}] = ${serializedInitialState}</script>`,\n  ];\n\n  return html.replace(`<!-- __TOOLPAD_SCRIPTS__ -->`, () => toolpadScripts.join('\\n'));\n}\n\nexport interface CreateViteConfigParams {\n  server?: Server;\n  root: string;\n  base: string;\n  canvas: boolean;\n}\n\nexport interface ToolpadAppHandlerParams {\n  root: string;\n}\n\nexport async function createProdHandler(project: ToolpadProject) {\n  const handler = express.Router();\n\n  handler.use(express.static(project.getAppOutputFolder(), { index: false }));\n\n  // Allow static assets, block everything else\n  handler.use((req, res, next) => {\n    if (checkBasicAuthHeader(req.headers.authorization ?? null)) {\n      next();\n      return;\n    }\n    basicAuthUnauthorized(res);\n  });\n\n  const hasAuthentication = await getRequireAuthentication(project);\n  if (hasAuthentication) {\n    const authHandler = createAuthHandler(project);\n    handler.use('/api/auth', express.urlencoded({ extended: true }), authHandler);\n\n    handler.use(await createRequireAuthMiddleware(project));\n  }\n\n  handler.use('/api/data', project.dataManager.createDataHandler());\n\n  const runtimeRpcServer = createRpcServer(project);\n  handler.use('/api/runtime-rpc', createRpcHandler(runtimeRpcServer));\n\n  handler.use(\n    asyncHandler(async (req, res) => {\n      const htmlFilePath = path.resolve(project.getAppOutputFolder(), './index.html');\n\n      const [dom] = await Promise.all([project.loadDom()]);\n\n      let html = await fs.readFile(htmlFilePath, { encoding: 'utf-8' });\n\n      html = postProcessHtml(html, {\n        initialState: createRuntimeState({ dom }),\n      });\n\n      res.setHeader('Content-Type', 'text/html; charset=utf-8').status(200).end(html);\n    }),\n  );\n\n  return { handler, dispose: async () => undefined };\n}\n","type BasicAuthConfig =\n  | {\n      basicAuthUser: string;\n      basicAuthPassword: string;\n    }\n  | {\n      basicAuthUser?: undefined;\n      basicAuthPassword?: undefined;\n    };\n\nexport type ServerConfig = {\n  databaseUrl?: string;\n  googleSheetsClientId?: string;\n  googleSheetsClientSecret?: string;\n  encryptionKeys: string[];\n  basicAuthUser?: string;\n  basicAuthPassword?: string;\n} & BasicAuthConfig;\n\nfunction readConfig(): ServerConfig {\n  if (typeof window !== 'undefined') {\n    throw new Error(`Server-side config can't be loaded on the client side`);\n  }\n\n  // Whitespace separated, do not use spaces in your keys\n  const encryptionKeys: string[] =\n    process.env.TOOLPAD_ENCRYPTION_KEYS?.split(/\\s+/).filter(Boolean) ?? [];\n\n  let basicAuthConfig: BasicAuthConfig = {};\n  if (process.env.TOOLPAD_BASIC_AUTH_USER && process.env.TOOLPAD_BASIC_AUTH_PASSWORD) {\n    basicAuthConfig = {\n      basicAuthUser: process.env.TOOLPAD_BASIC_AUTH_USER,\n      basicAuthPassword: process.env.TOOLPAD_BASIC_AUTH_PASSWORD,\n    };\n  } else if (process.env.TOOLPAD_BASIC_AUTH_USER) {\n    throw new Error(\n      `Basic Auth user configured without password. Please provide the TOOLPAD_BASIC_AUTH_PASSWORD environment variable.`,\n    );\n  }\n\n  return {\n    ...basicAuthConfig,\n    databaseUrl: process.env.TOOLPAD_DATABASE_URL,\n    googleSheetsClientId: process.env.TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_ID,\n    googleSheetsClientSecret: process.env.TOOLPAD_DATASOURCE_GOOGLESHEETS_CLIENT_SECRET,\n    encryptionKeys,\n  };\n}\n\nexport default readConfig();\n","import type { IncomingMessage, ServerResponse } from 'http';\nimport * as superjson from 'superjson';\nimport express from 'express';\nimport * as z from 'zod';\nimport { fromZodError } from 'zod-validation-error';\nimport { hasOwnProperty } from '@toolpad/utils/collections';\nimport { errorFrom, serializeError } from '@toolpad/utils/errors';\nimport { withContext, createServerContext } from '@toolpad/studio-runtime/serverRuntime';\nimport { asyncHandler } from '../utils/express';\n\nexport interface Method<P extends any[] = any[], R = any> {\n  (...params: P): Promise<R>;\n}\n\nexport interface Methods {\n  readonly [key: string]: Method;\n}\n\ninterface ResolverInput<P> {\n  params: P;\n  req: IncomingMessage;\n  res: ServerResponse;\n}\n\nexport interface MethodResolver<F extends Method> {\n  (input: ResolverInput<Parameters<F>>): ReturnType<F>;\n}\n\nexport interface MethodResolvers {\n  readonly [key: string]: MethodResolver<any>;\n}\n\nexport type MethodsOf<R extends MethodResolvers> = {\n  [K in keyof R]: (...params: Parameters<R[K]>[0]['params']) => ReturnType<R[K]>;\n};\n\nconst rpcRequestSchema = z.object({\n  name: z.string(),\n  params: z.array(z.any()),\n});\n\nexport type RpcRequest = z.infer<typeof rpcRequestSchema>;\n\nexport type RpcResponse =\n  | {\n      result: string;\n      error?: undefined;\n    }\n  | {\n      error: { message: string; code?: unknown; stack?: string };\n    };\n\nexport function createRpcHandler(definition: MethodResolvers): express.RequestHandler {\n  const router = express.Router();\n  router.post(\n    '/',\n    express.json({ limit: '50mb' }),\n    asyncHandler(async (req, res) => {\n      const parseResult = rpcRequestSchema.safeParse(req.body);\n      if (!parseResult.success) {\n        res.status(400).send(fromZodError(parseResult.error));\n        return;\n      }\n\n      const { name, params } = parseResult.data;\n\n      if (!hasOwnProperty(definition, name)) {\n        // This is important to avoid RCE\n        res.status(404).end();\n        return;\n      }\n      const method: MethodResolver<any> = definition[name];\n\n      let rawResult;\n      let error: Error | null = null;\n      try {\n        const ctx = await createServerContext(req, res);\n        rawResult = await withContext(ctx, async () => {\n          return method({ params, req, res });\n        });\n      } catch (rawError) {\n        error = errorFrom(rawError);\n      }\n\n      const responseData: RpcResponse = error\n        ? { error: serializeError(error) }\n        : { result: superjson.stringify(rawResult) };\n\n      res.json(responseData);\n    }),\n  );\n  return router;\n}\n\nexport function createMethod<F extends Method>(handler: MethodResolver<F>): MethodResolver<F> {\n  return handler;\n}\n","import express, { Router } from 'express';\nimport { Auth, AuthConfig } from '@auth/core';\nimport GithubProvider, { GitHubEmail, GitHubProfile } from '@auth/core/providers/github';\nimport GoogleProvider from '@auth/core/providers/google';\nimport AzureADProvider from '@auth/core/providers/azure-ad';\nimport CredentialsProvider from '@auth/core/providers/credentials';\nimport { TokenSet } from '@auth/core/types';\nimport { OAuthConfig } from '@auth/core/providers';\nimport chalk from 'chalk';\nimport * as appDom from '@toolpad/studio-runtime/appDom';\nimport { adaptRequestFromExpressToFetch } from '@toolpad/utils/httpApiAdapters';\nimport { getUserToken } from '@toolpad/studio-runtime/auth';\nimport { asyncHandler } from '../utils/express';\nimport type { ToolpadProject } from './localMode';\n\nconst SKIP_VERIFICATION_PROVIDERS: appDom.AuthProvider[] = [\n  // Azure AD should be fine to skip as the user has to belong to the organization to sign in\n  'azure-ad',\n  'credentials',\n];\n\nasync function getAuthProviders(\n  project: Pick<ToolpadProject, 'loadDom'>,\n): Promise<appDom.AuthProviderConfig[]> {\n  const dom = await project.loadDom();\n  const app = appDom.getApp(dom);\n\n  const authProviders = app.attributes.authentication?.providers ?? [];\n\n  return authProviders;\n}\n\nexport async function getRequireAuthentication(project: ToolpadProject): Promise<boolean> {\n  const authProviders = await getAuthProviders(project);\n  return authProviders.length > 0;\n}\n\nfunction getMappedRoles(\n  roles: string[],\n  allRoles: string[],\n  roleMappings: appDom.AuthProviderConfig['roles'] = [],\n): string[] {\n  return (roles ?? []).flatMap((providerRole) =>\n    allRoles\n      .filter((role) => {\n        const targetRoleMapping = roleMappings.find((roleMapping) => roleMapping.target === role);\n\n        return targetRoleMapping\n          ? targetRoleMapping.source.includes(providerRole)\n          : role === providerRole;\n      })\n      // Remove duplicates in case multiple provider roles map to the same role\n      .filter((value, index, self) => self.indexOf(value) === index),\n  );\n}\n\nexport function createAuthHandler(project: ToolpadProject): Router {\n  if (!process.env.TOOLPAD_AUTH_SECRET) {\n    console.error(\n      `\\n${chalk.red(\n        'Missing secret for authentication. Please provide a secret in the TOOLPAD_AUTH_SECRET environment variable. Read more at https://mui.com/toolpad/studio/concepts/authentication/#authentication-secret',\n      )}\\n`,\n    );\n  }\n\n  const { base } = project.options;\n\n  const router = express.Router();\n\n  const githubProvider = GithubProvider({\n    clientId: process.env.TOOLPAD_GITHUB_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_GITHUB_CLIENT_SECRET,\n    userinfo: {\n      url: 'https://api.github.com/user',\n      async request({\n        tokens,\n        provider,\n      }: {\n        tokens: TokenSet;\n        provider: OAuthConfig<GitHubProfile>;\n      }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const restrictedDomains = app.attributes.authentication?.restrictedDomains ?? [];\n\n        const headers = {\n          Authorization: `Bearer ${tokens.access_token}`,\n          'User-Agent': 'authjs',\n        };\n\n        const profile = await fetch(provider.userinfo?.url as URL, {\n          headers,\n        }).then(async (githubRes) => githubRes.json());\n\n        if (!profile.email) {\n          // If the user does not have a public email, get another via the GitHub API\n          // See https://docs.github.com/en/rest/users/emails#list-public-email-addresses-for-the-authenticated-user\n          const githubRes = await fetch('https://api.github.com/user/emails', {\n            headers,\n          });\n\n          if (githubRes.ok) {\n            const githubEmails: GitHubEmail[] = await githubRes.json();\n\n            const activeEmail =\n              (restrictedDomains.length > 0\n                ? githubEmails.find(\n                    (githubEmail) =>\n                      githubEmail.verified &&\n                      restrictedDomains.some((restrictedDomain) =>\n                        githubEmail.email.endsWith(`@${restrictedDomain}`),\n                      ),\n                  )\n                : null) ??\n              githubEmails.find((githubEmail) => githubEmail.primary) ??\n              githubEmails[0];\n\n            profile.email = activeEmail.email;\n            profile.email_verified = activeEmail.verified;\n          }\n        }\n\n        return profile;\n      },\n    },\n  });\n\n  const googleProvider = GoogleProvider({\n    clientId: process.env.TOOLPAD_GOOGLE_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_GOOGLE_CLIENT_SECRET,\n  });\n\n  const azureADProvider = AzureADProvider({\n    clientId: process.env.TOOLPAD_AZURE_AD_CLIENT_ID,\n    clientSecret: process.env.TOOLPAD_AZURE_AD_CLIENT_SECRET,\n    tenantId: process.env.TOOLPAD_AZURE_AD_TENANT_ID,\n  });\n\n  const credentialsProvider = CredentialsProvider({\n    name: 'Credentials',\n    async authorize({ username, password }) {\n      if (process.env.NODE_ENV !== 'test') {\n        throw new Error('Credentials authentication provider can only be used in test mode.');\n      }\n\n      if (username === 'admin' && password === 'admin') {\n        return {\n          id: 'admin',\n          name: 'Lord Admin',\n          email: 'admin@example.com',\n          roles: ['mock-admin'],\n        };\n      }\n      if (username === 'mui' && password === 'mui') {\n        return { id: 'mui', name: 'Mr. MUI 2024', email: 'test@mui.com', roles: [] };\n      }\n      if (username === 'test' && password === 'test') {\n        return { id: 'test', name: 'Miss Test', email: 'test@example.com', roles: [] };\n      }\n\n      return null;\n    },\n  });\n\n  const authConfig: AuthConfig = {\n    basePath: `${base}/api/auth`,\n    pages: {\n      signIn: `${base}/signin`,\n      signOut: base,\n      error: `${base}/signin`, // Error code passed in query string as ?error=\n      verifyRequest: base,\n    },\n    providers: [githubProvider, googleProvider, azureADProvider, credentialsProvider],\n    secret: process.env.TOOLPAD_AUTH_SECRET,\n    trustHost: true,\n    callbacks: {\n      async signIn({ profile, account, user }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const restrictedDomains = app.attributes.authentication?.restrictedDomains ?? [];\n\n        const skipEmailVerification =\n          !!account?.provider &&\n          SKIP_VERIFICATION_PROVIDERS.includes(account.provider as appDom.AuthProvider);\n\n        return Boolean(\n          (profile?.email_verified || skipEmailVerification) &&\n            user?.email &&\n            (restrictedDomains.length === 0 ||\n              restrictedDomains.some(\n                (restrictedDomain) => user.email!.endsWith(`@${restrictedDomain}`) ?? false,\n              )),\n        );\n      },\n      async redirect({ baseUrl }) {\n        return `${baseUrl}${base}`;\n      },\n      async jwt({ token, account, user }) {\n        const dom = await project.loadDom();\n        const app = appDom.getApp(dom);\n\n        const authorization = app.attributes.authorization ?? {};\n        const roleNames = authorization?.roles?.map((role) => role.name) ?? [];\n\n        const authentication = app.attributes.authentication ?? {};\n\n        if (account?.provider === 'azure-ad' && account.id_token) {\n          const roleMappings =\n            authentication?.providers?.find(\n              (providerConfig) => providerConfig.provider === 'azure-ad',\n            )?.roles ?? [];\n\n          const [, payload] = account.id_token.split('.');\n          const idToken: { roles?: string[] } = JSON.parse(\n            Buffer.from(payload, 'base64').toString('utf8'),\n          );\n\n          token.roles = getMappedRoles(idToken?.roles ?? [], roleNames, roleMappings);\n        }\n\n        if (account?.provider === 'credentials') {\n          const roleMappings =\n            authentication?.providers?.find(\n              (providerConfig) => providerConfig.provider === 'credentials',\n            )?.roles ?? [];\n\n          token.roles = getMappedRoles(user?.roles ?? [], roleNames, roleMappings);\n        }\n\n        return token;\n      },\n      // @TODO: Types for session callback are broken as it says token does not exist but it does\n      // Github issue: https://github.com/nextauthjs/next-auth/issues/9437\n      // @ts-ignore\n      session({ session, token }) {\n        if (session.user) {\n          session.user.roles = token.roles ?? [];\n        }\n\n        return session;\n      },\n    },\n  };\n\n  router.use(\n    '/*',\n    asyncHandler(async (req, res) => {\n      if (!process.env.TOOLPAD_AUTH_SECRET) {\n        res.status(400).json({ url: `${base}/signin?error=MissingSecretError` });\n        return;\n      }\n\n      const request = adaptRequestFromExpressToFetch(req);\n\n      const response = (await Auth(request, authConfig)) as Response;\n\n      // Converting Fetch API's Response to Express' res\n      res.status(response.status);\n      res.contentType(response.headers.get('content-type') ?? 'text/plain');\n      response.headers.forEach((value, key) => {\n        if (value) {\n          res.setHeader(key, value);\n        }\n      });\n      const body = await response.text();\n      res.send(body);\n    }),\n  );\n\n  return router;\n}\n\nexport async function createRequireAuthMiddleware(project: ToolpadProject) {\n  return async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { options } = project;\n    const { base } = options;\n\n    const isPageRequest = req.get('sec-fetch-dest') === 'document';\n    const signInPath = `${base}/signin`;\n    const editorPath = `${base}/editor`;\n\n    const requestPath = req.originalUrl.split('?')[0];\n\n    let isAuthorized = true;\n    if (\n      (!project.options.dev || isPageRequest) &&\n      !requestPath.startsWith(signInPath) &&\n      !requestPath.startsWith(editorPath)\n    ) {\n      const token = await getUserToken(req);\n      if (!token) {\n        isAuthorized = false;\n      }\n    }\n\n    if (!isAuthorized) {\n      if (isPageRequest) {\n        res.redirect(signInPath);\n      } else {\n        res.status(401).send('Unauthorized');\n      }\n      res.end();\n    } else {\n      next();\n    }\n  };\n}\n"],"mappings":"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","names":["path","getComponents","loadDom","getPagesManifest","appDom","express","express","appDom"]}