import * as React from 'react';
import { BoxProps } from '@mui/material';
import { useForm, FieldValues, ValidationMode, FieldError } from 'react-hook-form';
import { BuiltinArgTypeDefinitions } from './createBuiltin';
export declare const FormContext: React.Context<{
    form: ReturnType<typeof useForm> | null;
    fieldValues: FieldValues;
}>;
interface FormProps extends BoxProps {
    value: FieldValues;
    onChange: (newValue: FieldValues) => void;
    onSubmit?: (data?: FieldValues) => unknown | Promise<unknown>;
    formControlsAlign?: BoxProps['justifyContent'];
    formControlsFullWidth?: boolean;
    submitButtonText?: string;
    hasResetButton?: boolean;
    mode?: keyof ValidationMode | undefined;
    hasChrome?: boolean;
}
declare const _default: import("@toolpad/studio-runtime").ToolpadComponent<FormProps>;
export default _default;
export interface FormInputComponentProps {
    name: string;
    isRequired: boolean;
    minLength: number;
    maxLength: number;
}
interface UseFormInputInput<V> {
    name: string;
    label?: string;
    value?: V;
    onChange?: (newValue: V) => void;
    emptyValue?: V;
    defaultValue?: V;
    validationProps: Partial<Pick<FormInputComponentProps, 'isRequired' | 'minLength' | 'maxLength'>>;
}
interface UseFormInputPayload<V> {
    onFormInputChange: (newValue: V) => void;
    formInputError?: FieldError;
    renderFormInput: (element: JSX.Element) => JSX.Element;
}
export declare function useFormInput<V>({ name, label, value, onChange, emptyValue, defaultValue, validationProps, }: UseFormInputInput<V>): UseFormInputPayload<V>;
export declare function withComponentForm<P extends Record<string, any>>(InputComponent: React.ComponentType<P>): (props: P) => React.JSX.Element;
export declare const FORM_INPUT_ARG_TYPES: BuiltinArgTypeDefinitions<Pick<FormInputComponentProps, 'name' | 'isRequired'>>;
export declare const FORM_TEXT_INPUT_ARG_TYPES: BuiltinArgTypeDefinitions<Pick<FormInputComponentProps, 'minLength' | 'maxLength'>>;
