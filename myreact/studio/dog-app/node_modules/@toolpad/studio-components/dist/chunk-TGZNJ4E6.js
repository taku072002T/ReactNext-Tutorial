import {
  ErrorContent,
  ErrorOverlay_default
} from "./chunk-LHQVOIUN.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";
import {
  createBuiltin
} from "./chunk-5BNQEU2R.js";

// src/DataGrid.tsx
import {
  DataGridPremium,
  useGridApiContext,
  gridColumnsTotalWidthSelector,
  gridColumnPositionsSelector,
  useGridApiRef,
  useGridRootProps,
  gridDensityFactorSelector,
  useGridSelector,
  getGridDefaultColumnTypes,
  GridNoRowsOverlay,
  GridRowModes,
  GridToolbarContainer,
  GridToolbarColumnsButton,
  GridToolbarFilterButton,
  GridToolbarDensitySelector,
  GridToolbarExport,
  gridVisibleColumnFieldsSelector,
  GridRowEditStopReasons,
  GridRowEditStartReasons
} from "@mui/x-data-grid-premium";
import {
  Unstable_LicenseInfoProvider as LicenseInfoProvider
} from "@mui/x-license";
import * as React from "react";
import {
  useNode,
  useComponents,
  UseDataProviderContext,
  useAppHost
} from "@toolpad/studio-runtime";
import {
  Box,
  debounce,
  LinearProgress,
  Skeleton,
  Link,
  styled,
  Typography,
  Tooltip,
  Popover,
  IconButton,
  CircularProgress,
  Alert,
  Button,
  Snackbar
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/DeleteOutline";
import CloseIcon from "@mui/icons-material/Close";
import SaveIcon from "@mui/icons-material/Save";
import EditIcon from "@mui/icons-material/Edit";
import AddIcon from "@mui/icons-material/Add";
import { getObjectKey } from "@toolpad/utils/objectKey";
import { errorFrom } from "@toolpad/utils/errors";
import { hasImageExtension } from "@toolpad/utils/path";
import { ErrorBoundary } from "react-error-boundary";
import { useNonNullableContext } from "@toolpad/utils/react";
import { useQuery, keepPreviousData } from "@tanstack/react-query";
import invariant from "invariant";
import {
  createFormat as createNumberFormat
} from "@toolpad/studio-runtime/numberFormat";
import { createFormat as createDateFormat } from "@toolpad/studio-runtime/dateFormat";
import useLatest from "@toolpad/utils/hooks/useLatest";
var DRAFT_ROW_MARKER = Symbol("draftRow");
var ACTIONS_COLUMN_FIELD = "___actions___";
var LICENSE_INFO = {
  key: "f359d9c0d105599a7d83c3f8d775eca5Tz0xMjMsRT0yNTI0NjA0NDAwMDAwLFM9cHJlbWl1bSxMTT1wZXJwZXR1YWwsS1Y9Mg=="
};
var DEFAULT_COLUMN_TYPES = getGridDefaultColumnTypes();
var DataGridRoot = styled("div")({
  width: "100%",
  height: "100%",
  position: "relative"
});
var SetActionResultContext = React.createContext(
  void 0
);
function mulberry32(a) {
  return () => {
    let t = a += 1831565813;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}
function randomBetween(seed, min, max) {
  const random = mulberry32(seed);
  return () => min + (max - min) * random();
}
function isNumeric(input) {
  return input ? !Number.isNaN(Number(input)) : false;
}
var ISO_8601 = /^\d{4}(-\d{2}(-\d{2}([T ]\d{2}:\d{2}(:\d{2})?(\.\d+)?(([+-]\d{2}:\d{2})|Z)?)?)?)?$/i;
var ISO_8601_FULL = /^\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}(\.\d+)?(([+-]\d{2}:\d{2})|Z)?$/i;
function isValidDateTime(input) {
  if (ISO_8601_FULL.test(input) && !Number.isNaN(Date.parse(input))) {
    return !Number.isNaN(Date.parse(input));
  }
  return false;
}
function isValidDate(input) {
  if (ISO_8601.test(input) && !Number.isNaN(Date.parse(input))) {
    return !Number.isNaN(Date.parse(input));
  }
  return false;
}
var SkeletonCell = styled("div")(({ theme }) => ({
  display: "flex",
  flexDirection: "row",
  alignItems: "center",
  borderBottom: `1px solid ${theme.palette.divider}`
}));
function SkeletonLoadingOverlay() {
  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const dimensions = apiRef.current?.getRootDimensions();
  const viewportHeight = dimensions?.viewportInnerSize.height ?? 0;
  const factor = useGridSelector(apiRef, gridDensityFactorSelector);
  const rowHeight = Math.floor(rootProps.rowHeight * factor);
  const skeletonRowsCount = Math.ceil(viewportHeight / rowHeight);
  const totalWidth = gridColumnsTotalWidthSelector(apiRef);
  const positions = gridColumnPositionsSelector(apiRef);
  const inViewportCount = React.useMemo(
    () => positions.filter((value) => value <= totalWidth).length,
    [totalWidth, positions]
  );
  const columns = apiRef.current.getVisibleColumns().slice(0, inViewportCount);
  const children = React.useMemo(() => {
    const random = randomBetween(12345, 25, 75);
    const array = [];
    for (let i = 0; i < skeletonRowsCount; i += 1) {
      for (const column of columns) {
        const width = Math.round(random());
        array.push(
          /* @__PURE__ */ React.createElement(SkeletonCell, { key: `col-${column.field}-${i}`, sx: { justifyContent: column.align } }, /* @__PURE__ */ React.createElement(Skeleton, { sx: { mx: 1 }, width: `${width}%` }))
        );
      }
      array.push(/* @__PURE__ */ React.createElement(SkeletonCell, { key: `fill-${i}` }));
    }
    return array;
  }, [skeletonRowsCount, columns]);
  const rowsCount = apiRef.current.getRowsCount();
  const scrollRef = React.useRef(null);
  React.useEffect(() => {
    return apiRef.current.subscribeEvent("scrollPositionChange", (params) => {
      if (scrollRef.current) {
        scrollRef.current.scrollLeft = params.left;
      }
    });
  }, [apiRef]);
  return rowsCount > 0 ? /* @__PURE__ */ React.createElement(LinearProgress, null) : /* @__PURE__ */ React.createElement(
    "div",
    {
      ref: scrollRef,
      style: {
        display: "grid",
        gridTemplateColumns: `${columns.map(({ computedWidth }) => `${computedWidth}px`).join(" ")} 1fr`,
        gridAutoRows: `${rowHeight}px`,
        overflowX: "hidden"
      }
    },
    children
  );
}
function urlCanParse(url, base) {
  try {
    return !!new URL(url, base);
  } catch {
    return false;
  }
}
function inferColumnType(value) {
  if (value instanceof Date) {
    return "dateTime";
  }
  const valueType = typeof value;
  switch (typeof value) {
    case "number":
    case "boolean":
      return valueType;
    case "string": {
      if (urlCanParse(value)) {
        const url = new URL(value);
        if (hasImageExtension(url.pathname)) {
          return "image";
        }
        return "link";
      }
      if (isNumeric(value)) {
        return "number";
      }
      if (isValidDateTime(value)) {
        return "dateTime";
      }
      if (isValidDate(value)) {
        return "date";
      }
      return valueType;
    }
    case "object":
      return "json";
    default:
      return "string";
  }
}
var ImageCellImg = styled("img")(({ theme }) => ({
  maxWidth: "100%",
  maxHeight: "100%",
  objectFit: "contain",
  paddingTop: theme.spacing(1),
  paddingBottom: theme.spacing(1)
}));
var ImageCellPopoverImg = styled("img")(({ theme }) => ({
  maxWidth: "60vw",
  maxHeight: "60vh",
  objectFit: "contain",
  margin: theme.spacing(1)
}));
function ImageCell({ field, id, value: src }) {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const handlePopoverOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handlePopoverClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const popoverId = React.useId();
  const alt = `${field} ${id}`;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    ImageCellImg,
    {
      "aria-owns": open ? popoverId : void 0,
      "aria-haspopup": "true",
      onMouseEnter: handlePopoverOpen,
      onMouseLeave: handlePopoverClose,
      src,
      alt
    }
  ), /* @__PURE__ */ React.createElement(
    Popover,
    {
      id: popoverId,
      sx: {
        pointerEvents: "none"
      },
      open,
      anchorEl,
      onClose: handlePopoverClose,
      disableRestoreFocus: true
    },
    /* @__PURE__ */ React.createElement(ImageCellPopoverImg, { src, alt })
  ));
}
var INVALID_DATE = /* @__PURE__ */ new Date(NaN);
var dateValueGetter = (value) => {
  if (value === null || value === void 0 || value === "") {
    return void 0;
  }
  if (value instanceof Date) {
    return value;
  }
  if (typeof value === "number") {
    return new Date(value);
  }
  if (typeof value === "string") {
    if (isNumeric(value)) {
      return new Date(Number(value));
    }
    if (isValidDate(value)) {
      return new Date(value);
    }
  }
  return INVALID_DATE;
};
function ComponentErrorFallback({ error }) {
  return /* @__PURE__ */ React.createElement(Typography, { variant: "overline", sx: { color: "error.main", fontSize: "10px" } }, "Code component error", " ", /* @__PURE__ */ React.createElement(Tooltip, { title: error.message }, /* @__PURE__ */ React.createElement("span", null, "\u2139\uFE0F")));
}
function CustomColumn({ params }) {
  const { value, colDef, row, field } = params;
  const column = colDef;
  const components = useComponents();
  const Component = components[`codeComponent.${column.codeComponent}`];
  if (!Component) {
    return /* @__PURE__ */ React.createElement(Typography, { variant: "overline", sx: { color: "error.main", fontSize: "10px" } }, "No component selected");
  }
  return /* @__PURE__ */ React.createElement(ErrorBoundary, { FallbackComponent: ComponentErrorFallback }, /* @__PURE__ */ React.createElement(Component, { value, row, field }));
}
var CUSTOM_COLUMN_TYPES = {
  json: {
    valueFormatter: (value) => JSON.stringify(value)
  },
  date: {
    valueGetter: dateValueGetter
  },
  dateTime: {
    valueGetter: dateValueGetter
  },
  link: {
    renderCell: ({ value }) => /* @__PURE__ */ React.createElement(Link, { href: value, target: "_blank", rel: "noopener nofollow" }, value)
  },
  image: {
    renderCell: ({ value, ...params }) => value ? /* @__PURE__ */ React.createElement(ImageCell, { value, ...params }) : ""
  },
  codeComponent: {
    renderCell: (params) => {
      return /* @__PURE__ */ React.createElement(CustomColumn, { params });
    }
  }
};
function inferColumns(rows) {
  if (rows.length < 1) {
    return [];
  }
  const firstRow = rows[0];
  return Object.entries(firstRow).map(([field, value]) => {
    return {
      field,
      type: inferColumnType(value)
    };
  });
}
function getNarrowedColType(type) {
  return type && type in DEFAULT_COLUMN_TYPES ? type : void 0;
}
function parseColumns(columns) {
  return columns.map(({ type: colType, ...column }) => {
    const isIdColumn = column.field === "id";
    let baseColumn = { editable: true };
    if (isIdColumn) {
      baseColumn = {
        ...baseColumn,
        editable: false,
        renderCell: ({ row, value }) => row[DRAFT_ROW_MARKER] ? "" : value
      };
    }
    if (colType) {
      baseColumn = { ...baseColumn, ...CUSTOM_COLUMN_TYPES[colType], ...column };
    }
    if (colType === "number" && column.numberFormat) {
      const format = createNumberFormat(column.numberFormat);
      baseColumn = {
        ...baseColumn,
        valueFormatter: (value) => format.format(value)
      };
    }
    if (colType === "date") {
      const format = createDateFormat(column.dateFormat);
      baseColumn = {
        ...baseColumn,
        valueFormatter: (value) => {
          try {
            return format.format(value);
          } catch {
            return "Invalid Date";
          }
        }
      };
    }
    if (colType === "dateTime") {
      const format = createDateFormat(column.dateTimeFormat);
      baseColumn = {
        ...baseColumn,
        valueFormatter: (value) => {
          try {
            return format.format(value);
          } catch {
            return "Invalid Date";
          }
        }
      };
    }
    return { ...baseColumn, ...column, type: getNarrowedColType(colType) };
  });
}
var EMPTY_ROWS = [];
function DeleteAction({ id, dataProvider, refetch }) {
  const [loading, setLoading] = React.useState(false);
  const setActionResult = useNonNullableContext(SetActionResultContext);
  const handleDeleteClick = React.useCallback(async () => {
    invariant(dataProvider.deleteRecord, "dataProvider must be defined");
    setLoading(true);
    try {
      await dataProvider.deleteRecord(id);
      await refetch();
      setActionResult({ action: "delete", id });
    } catch (error) {
      setActionResult({ action: "delete", id, error: errorFrom(error) });
    } finally {
      setLoading(false);
    }
  }, [dataProvider, id, refetch, setActionResult]);
  return /* @__PURE__ */ React.createElement(IconButton, { onClick: handleDeleteClick, size: "small", "aria-label": `Delete row with id "${id}"` }, loading ? /* @__PURE__ */ React.createElement(CircularProgress, { size: 16 }) : /* @__PURE__ */ React.createElement(DeleteIcon, { fontSize: "inherit" }));
}
function EditToolbar({ hasCreateButton, onCreateClick, createDisabled }) {
  return /* @__PURE__ */ React.createElement(GridToolbarContainer, null, hasCreateButton ? /* @__PURE__ */ React.createElement(
    Button,
    {
      color: "primary",
      startIcon: /* @__PURE__ */ React.createElement(AddIcon, null),
      onClick: onCreateClick,
      disabled: createDisabled
    },
    "Add record"
  ) : null, /* @__PURE__ */ React.createElement(GridToolbarColumnsButton, null), /* @__PURE__ */ React.createElement(GridToolbarFilterButton, null), /* @__PURE__ */ React.createElement(GridToolbarDensitySelector, null), /* @__PURE__ */ React.createElement(GridToolbarExport, null));
}
function useDataProviderDataGridProps(dataProviderId, idField, apiRef, setActionResult) {
  const useDataProvider = useNonNullableContext(UseDataProviderContext);
  const {
    dataProvider,
    error: dataProviderLoadError,
    isLoading: dataProviderLoading
  } = useDataProvider(dataProviderId || null);
  const [rawPaginationModel, setRawPaginationModel] = React.useState({
    page: 0,
    pageSize: 100
  });
  const mapPageToNextCursor = React.useRef(/* @__PURE__ */ new Map());
  const paginationModel = React.useMemo(() => {
    const page = rawPaginationModel.page;
    const pageSize = rawPaginationModel.pageSize;
    if (dataProvider?.paginationMode === "cursor") {
      let cursor = null;
      if (page !== 0) {
        cursor = mapPageToNextCursor.current.get(page - 1) ?? null;
        if (cursor === null) {
          throw new Error(`No cursor found for page ${page - 1}`);
        }
      }
      return {
        cursor,
        pageSize
      };
    }
    return {
      start: page * pageSize,
      pageSize
    };
  }, [dataProvider?.paginationMode, rawPaginationModel.page, rawPaginationModel.pageSize]);
  const [rawFilterModel, setRawFilterModel] = React.useState();
  const filterModel = React.useMemo(
    () => ({
      items: rawFilterModel?.items.map(({ field, operator, value }) => ({ field, operator, value })) ?? [],
      logicOperator: rawFilterModel?.logicOperator ?? "and"
    }),
    [rawFilterModel]
  );
  const [rawSortModel, setRawSortModel] = React.useState();
  const sortModel = React.useMemo(
    () => rawSortModel?.map(({ field, sort }) => ({ field, sort: sort ?? "asc" })) ?? [],
    [rawSortModel]
  );
  const [rowModesModel, setRowModesModel] = React.useState({});
  const isEditing = React.useMemo(
    () => Object.values(rowModesModel).some((mode) => mode.mode === GridRowModes.Edit),
    [rowModesModel]
  );
  const [draftRow, setDraftRow] = React.useState(null);
  const handleRowEditStop = (params, event) => {
    if (params.reason === GridRowEditStopReasons.rowFocusOut) {
      event.defaultMuiPrevented = true;
    }
    if (draftRow && params.reason === GridRowEditStopReasons.escapeKeyDown) {
      setRowModesModel({
        ...rowModesModel,
        [draftRow.id]: { mode: GridRowModes.View, ignoreModifications: true }
      });
      setDraftRow(null);
    }
  };
  const handleRowEditStart = (params, event) => {
    if (isEditing && params.reason === GridRowEditStartReasons.cellDoubleClick) {
      event.defaultMuiPrevented = true;
    }
  };
  const {
    data,
    isFetching,
    isPlaceholderData,
    isLoading,
    error: rowLoadingError,
    refetch
  } = useQuery({
    enabled: !!dataProvider,
    queryKey: ["toolpadDataProvider", dataProviderId, paginationModel, filterModel, sortModel],
    placeholderData: keepPreviousData,
    queryFn: async () => {
      invariant(dataProvider, "dataProvider must be defined");
      const result = await dataProvider.getRecords({
        paginationModel,
        filterModel,
        sortModel
      });
      if (dataProvider.paginationMode === "cursor") {
        if (typeof result.cursor === "undefined") {
          throw new Error(
            `No cursor returned for page ${rawPaginationModel.page}. Return \`null\` to signal the end of the data.`
          );
        }
        if (typeof result.cursor === "string") {
          mapPageToNextCursor.current.set(rawPaginationModel.page, result.cursor);
        }
      }
      return result;
    }
  });
  const rowCount = data?.totalCount ?? (data?.hasNextPage ? (rawPaginationModel.page + 1) * rawPaginationModel.pageSize + 1 : void 0) ?? 0;
  const [rowUpdating, setRowUpdating] = React.useState({});
  const handleProcessRowUpdate = React.useCallback(
    async (newRow, oldRow) => {
      const id = oldRow[idField];
      const values = Object.fromEntries(
        Object.entries(newRow).filter(([key, value]) => value !== oldRow[key])
      );
      const action = oldRow[DRAFT_ROW_MARKER] ? "create" : "update";
      setRowUpdating((oldState) => ({ ...oldState, [id]: true }));
      try {
        if (action === "create") {
          try {
            invariant(
              dataProvider?.createRecord,
              "Edit action should be unavailable when dataProvider.createRecord is not defined"
            );
            const newRecord = await dataProvider.createRecord(values);
            if (!newRecord) {
              throw new Error("No record returned by createRecord");
            }
            invariant(newRecord[idField], "Record returned by createRecord must have an id");
            setActionResult({ action, id: newRecord[idField] });
            return newRecord;
          } catch (error) {
            setActionResult({ action, error: errorFrom(error) });
            return oldRow;
          }
        } else {
          try {
            invariant(
              dataProvider?.updateRecord,
              "Edit action should be unavailable when dataProvider.updateRecord is not defined"
            );
            let newRecord = await dataProvider.updateRecord(id, values);
            if (!newRecord?.[idField]) {
              console.warn("Record returned by updateRecord must have an id");
            }
            newRecord ?? (newRecord = newRow);
            setActionResult({ action, id: newRecord[idField] });
            return newRecord;
          } catch (error) {
            setActionResult({ action, id, error: errorFrom(error) });
            return oldRow;
          }
        }
      } finally {
        setRowUpdating((oldState) => {
          const { [id]: discard, ...newState } = oldState;
          return newState;
        });
        setDraftRow(null);
        await refetch();
      }
    },
    [dataProvider, idField, refetch, setActionResult]
  );
  const getActions = React.useMemo(() => {
    if (!dataProvider?.deleteRecord && !dataProvider?.updateRecord && !dataProvider?.createRecord) {
      return void 0;
    }
    return ({ id, row }) => {
      const result = [];
      if (dataProvider.updateRecord || dataProvider.createRecord) {
        const rowIsInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;
        const rowIsUpdating = rowUpdating[id];
        const isDraft = row[DRAFT_ROW_MARKER];
        if (rowIsInEditMode || rowIsUpdating) {
          return [
            /* @__PURE__ */ React.createElement(
              IconButton,
              {
                key: "commit",
                size: "small",
                "aria-label": `Save updates to ${isDraft ? "new row" : `row with id "${id}"`}`,
                disabled: rowIsUpdating,
                onClick: async () => {
                  setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });
                }
              },
              rowIsUpdating ? /* @__PURE__ */ React.createElement(CircularProgress, { size: 16 }) : /* @__PURE__ */ React.createElement(SaveIcon, { fontSize: "inherit" })
            ),
            /* @__PURE__ */ React.createElement(
              IconButton,
              {
                key: "cancel",
                size: "small",
                "aria-label": "Cancel updates",
                disabled: rowIsUpdating,
                onClick: () => {
                  setRowModesModel({
                    ...rowModesModel,
                    [id]: { mode: GridRowModes.View, ignoreModifications: true }
                  });
                  setDraftRow(null);
                }
              },
              /* @__PURE__ */ React.createElement(CloseIcon, { fontSize: "inherit" })
            )
          ];
        }
        if (!isEditing && dataProvider.updateRecord) {
          result.push(
            /* @__PURE__ */ React.createElement(
              IconButton,
              {
                key: "update",
                onClick: () => {
                  setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });
                },
                size: "small",
                "aria-label": `Edit row with id "${id}"`
              },
              /* @__PURE__ */ React.createElement(EditIcon, { fontSize: "inherit" })
            )
          );
        }
      }
      if (!isEditing) {
        if (dataProvider.deleteRecord) {
          result.push(
            /* @__PURE__ */ React.createElement(DeleteAction, { key: "delete", id, dataProvider, refetch })
          );
        }
      }
      return result;
    };
  }, [dataProvider, isEditing, refetch, rowModesModel, rowUpdating]);
  const rows = React.useMemo(() => {
    let rowData = data?.records ?? [];
    if (draftRow) {
      rowData = [draftRow, ...rowData];
    }
    return rowData;
  }, [data?.records, draftRow]);
  if (!dataProviderId) {
    return {};
  }
  if (dataProviderLoadError) {
    return {
      rowLoadingError: dataProviderLoadError
    };
  }
  if (dataProviderLoading) {
    return {
      loading: true
    };
  }
  invariant(dataProvider, "dataProvider must be defined if it's loaded without error");
  return {
    loading: isLoading || isPlaceholderData && isFetching,
    paginationMode: "server",
    filterMode: "server",
    sortingMode: "server",
    pagination: true,
    rowCount,
    paginationModel: rawPaginationModel,
    onPaginationModelChange(model) {
      setRawPaginationModel((prevModel) => {
        if (prevModel.pageSize !== model.pageSize) {
          return { ...model, page: 0 };
        }
        return model;
      });
    },
    filterModel: rawFilterModel,
    onFilterModelChange: setRawFilterModel,
    sortModel: rawSortModel,
    onSortModelChange: setRawSortModel,
    rows,
    rowLoadingError,
    getActions,
    editMode: "row",
    rowModesModel,
    onRowModesModelChange: (model) => setRowModesModel(model),
    processRowUpdate: handleProcessRowUpdate,
    onRowEditStart: handleRowEditStart,
    onRowEditStop: handleRowEditStop,
    slots: {
      toolbar: EditToolbar
    },
    slotProps: {
      toolbar: {
        hasCreateButton: !!dataProvider.createRecord,
        createDisabled: !!isEditing,
        onCreateClick: () => {
          const draftRowId = crypto.randomUUID();
          const visibleFields = gridVisibleColumnFieldsSelector(apiRef);
          const firstVisibleFieldIndex = visibleFields.findIndex((field) => field !== idField);
          const fieldToFocus = firstVisibleFieldIndex >= 0 ? visibleFields[firstVisibleFieldIndex] : void 0;
          const colIndex = firstVisibleFieldIndex >= 0 ? firstVisibleFieldIndex : 0;
          setDraftRow({ id: draftRowId, [DRAFT_ROW_MARKER]: true });
          setRowModesModel((oldModel) => ({
            ...oldModel,
            [draftRowId]: { mode: GridRowModes.Edit, fieldToFocus }
          }));
          apiRef.current.scrollToIndexes({ rowIndex: 0, colIndex });
        }
      }
    }
  };
}
function NoRowsOverlay(props) {
  if (props.error) {
    return /* @__PURE__ */ React.createElement(ErrorContent, { sx: { height: "100%" }, error: props.error });
  }
  return /* @__PURE__ */ React.createElement(GridNoRowsOverlay, { ...props });
}
function ActionResultOverlay({ result, onClose, apiRef }) {
  const open = !!result;
  const actionError = result?.error;
  React.useEffect(() => {
    if (actionError) {
      console.error(actionError);
    }
  }, [actionError]);
  const lastResult = useLatest(result);
  let message = null;
  if (lastResult) {
    if (lastResult.action === "create") {
      if (lastResult.error) {
        message = `Failed to create a record, ${lastResult.error.message}`;
      } else {
        const index = apiRef.current.getAllRowIds().indexOf(lastResult.id);
        const visibleFields = gridVisibleColumnFieldsSelector(apiRef);
        const fieldToFocus = visibleFields[0];
        if (index >= 0 && fieldToFocus) {
          message = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
            Link,
            {
              href: "#",
              color: "inherit",
              onClick: (event) => {
                event.preventDefault();
                apiRef.current.scrollToIndexes({ rowIndex: index, colIndex: 0 });
                apiRef.current.setCellFocus(lastResult.id, fieldToFocus);
              },
              "aria-label": "Go to new record"
            },
            "New record"
          ), " ", "created successfully");
        } else {
          message = "New record created successfully";
        }
      }
    } else if (lastResult.action === "update") {
      message = lastResult.error ? `Failed to update a record, ${lastResult.error.message}` : "Record updated successfully";
    } else if (lastResult.action === "delete") {
      message = lastResult.error ? `Failed to delete a record, ${lastResult.error.message}` : "Record deleted successfully";
    }
  }
  return /* @__PURE__ */ React.createElement(Box, { sx: { mt: 1, position: "absolute", bottom: 0, left: 0, right: 0, m: 2 } }, /* @__PURE__ */ React.createElement(
    Snackbar,
    {
      sx: { position: "absolute" },
      anchorOrigin: { vertical: "bottom", horizontal: "right" },
      open,
      autoHideDuration: 2e3,
      onClose,
      action: /* @__PURE__ */ React.createElement(IconButton, { size: "small", "aria-label": "close", color: "inherit", onClick: onClose }, /* @__PURE__ */ React.createElement(CloseIcon, { fontSize: "inherit" }))
    },
    /* @__PURE__ */ React.createElement(Alert, { severity: lastResult?.error ? "error" : "success", onClose }, message)
  ));
}
function dataGridFallbackRender({ error }) {
  return /* @__PURE__ */ React.createElement(ErrorOverlay_default, { error });
}
var DataGridComponent = React.forwardRef(function DataGridComponent2({
  columns: columnsProp,
  rows: rowsProp,
  rowIdField: rowIdFieldProp,
  error: errorProp,
  selection,
  onSelectionChange,
  hideToolbar,
  rowsSource,
  dataProviderId,
  sx,
  ...props
}, ref) {
  const apiRef = useGridApiRef();
  const [actionResult, setActionResult] = React.useState(null);
  const rowIdField = rowIdFieldProp ?? "id";
  const {
    rows: dataProviderRowsInput,
    getActions: getProviderActions,
    slots: dataProviderSlots,
    slotProps: dataProviderSlotProps,
    ...dataProviderProps
  } = useDataProviderDataGridProps(
    rowsSource === "dataProvider" ? dataProviderId : null,
    rowIdField,
    apiRef,
    setActionResult
  );
  const nodeRuntime = useNode();
  const handleResize = React.useMemo(
    () => debounce((params) => {
      if (!nodeRuntime) {
        return;
      }
      nodeRuntime.updateAppDomConstProp(
        "columns",
        (columns2) => columns2?.map(
          (column) => column.field === params.colDef.field ? { ...column, width: params.width } : column
        )
      );
    }, 500),
    [nodeRuntime]
  );
  React.useEffect(() => handleResize.clear(), [handleResize]);
  const handleColumnOrderChange = React.useMemo(
    () => debounce((params) => {
      if (!nodeRuntime) {
        return;
      }
      nodeRuntime.updateAppDomConstProp("columns", (columns2) => {
        if (!columns2) {
          return columns2;
        }
        const old = columns2.find((colDef) => colDef.field === params.column.field);
        if (!old) {
          return columns2;
        }
        const withoutOld = columns2.filter((column) => column.field !== params.column.field);
        return [
          ...withoutOld.slice(0, params.targetIndex),
          old,
          ...withoutOld.slice(params.targetIndex)
        ];
      });
    }, 500),
    [nodeRuntime]
  );
  React.useEffect(() => handleColumnOrderChange.clear(), [handleColumnOrderChange]);
  let rowsInput;
  if (rowsSource === "dataProvider") {
    rowsInput = dataProviderRowsInput ?? EMPTY_ROWS;
  } else {
    rowsInput = rowsProp ?? EMPTY_ROWS;
  }
  const hasExplicitRowId = React.useMemo(() => {
    const hasRowIdField = !!(rowIdFieldProp && rowIdFieldProp !== "id");
    return hasRowIdField || rowsInput.length === 0 || rowsInput[0].id !== void 0;
  }, [rowIdFieldProp, rowsInput]);
  const rows = React.useMemo(
    () => hasExplicitRowId ? rowsInput : rowsInput.map((row, id) => ({ ...row, id })),
    [hasExplicitRowId, rowsInput]
  );
  const columnsInitRef = React.useRef(false);
  const hasColumnsDefined = columnsProp && columnsProp.length > 0;
  React.useEffect(() => {
    if (!nodeRuntime || hasColumnsDefined || rows.length <= 0 || columnsInitRef.current) {
      return;
    }
    let inferredColumns = inferColumns(rows);
    if (!hasExplicitRowId) {
      inferredColumns = inferredColumns.filter((column) => column.field !== "id");
    }
    nodeRuntime.updateAppDomConstProp("columns", inferredColumns);
    columnsInitRef.current = true;
  }, [hasColumnsDefined, rows, nodeRuntime, hasExplicitRowId]);
  const getRowId = React.useCallback(
    (row) => {
      return rowIdFieldProp && row[rowIdFieldProp] ? row[rowIdFieldProp] : row.id;
    },
    [rowIdFieldProp]
  );
  const onSelectionModelChange = React.useCallback(
    (ids) => {
      onSelectionChange?.(ids.length > 0 ? rows.find((row) => row.id === ids[0]) : null);
    },
    [rows, onSelectionChange]
  );
  const selectionModel = React.useMemo(
    () => selection?.id ? [selection.id] : [],
    [selection?.id]
  );
  const columns = React.useMemo(
    () => columnsProp ? parseColumns(columnsProp) : [],
    [columnsProp]
  );
  React.useEffect(() => {
    apiRef.current.updateColumns(columns);
  }, [apiRef, columns]);
  const gridKey = React.useMemo(
    () => [getObjectKey(getRowId), getObjectKey(columns)].join("::"),
    [getRowId, columns]
  );
  let rowLoadingError = null;
  if (dataProviderProps?.rowLoadingError) {
    rowLoadingError = errorFrom(dataProviderProps.rowLoadingError);
  } else if (errorProp) {
    rowLoadingError = errorFrom(errorProp);
  }
  React.useEffect(() => {
    nodeRuntime?.updateEditorNodeData("rawRows", rows);
  }, [nodeRuntime, rows]);
  const renderedColumns = React.useMemo(() => {
    const result = [...columns];
    if (getProviderActions) {
      result.push({
        field: ACTIONS_COLUMN_FIELD,
        type: "actions",
        align: "right",
        resizable: false,
        pinnable: false,
        getActions: getProviderActions
      });
    }
    return result;
  }, [columns, getProviderActions]);
  const appHost = useAppHost();
  const isProPlan = appHost.plan === "pro";
  const columnVisibilityModel = Object.fromEntries(
    (columnsProp ?? []).map((column) => [column.field, column.visible ?? true])
  );
  const pinnedColumns = React.useMemo(() => {
    const result = (columnsProp ?? []).reduce((acc, column) => {
      var _a;
      if (column.pin) {
        acc[_a = column.pin] ?? (acc[_a] = []);
        acc[column.pin]?.push(column.field);
      }
      return acc;
    }, {});
    result.right ?? (result.right = []);
    result.right.push(ACTIONS_COLUMN_FIELD);
    return result;
  }, [columnsProp]);
  return /* @__PURE__ */ React.createElement(LicenseInfoProvider, { info: LICENSE_INFO }, /* @__PURE__ */ React.createElement(DataGridRoot, { ref, sx }, /* @__PURE__ */ React.createElement(ErrorBoundary, { fallbackRender: dataGridFallbackRender, resetKeys: [rows] }, /* @__PURE__ */ React.createElement(SetActionResultContext.Provider, { value: setActionResult }, /* @__PURE__ */ React.createElement(
    DataGridPremium,
    {
      apiRef,
      slots: {
        ...dataProviderSlots,
        loadingOverlay: SkeletonLoadingOverlay,
        noRowsOverlay: NoRowsOverlay,
        toolbar: hideToolbar ? null : dataProviderSlots?.toolbar
      },
      slotProps: {
        noRowsOverlay: {
          error: rowLoadingError
        },
        ...dataProviderSlotProps
      },
      onColumnResize: handleResize,
      onColumnOrderChange: handleColumnOrderChange,
      rows,
      columns: renderedColumns,
      key: gridKey,
      getRowId,
      onRowSelectionModelChange: onSelectionModelChange,
      rowSelectionModel: selectionModel,
      initialState: {
        columns: { columnVisibilityModel },
        pinnedColumns
      },
      disableAggregation: !isProPlan,
      disableRowGrouping: !isProPlan,
      disableColumnPinning: !isProPlan,
      ...props,
      ...dataProviderProps,
      sx: {
        height: "100%"
      }
    }
  ))), /* @__PURE__ */ React.createElement(
    ActionResultOverlay,
    {
      result: actionResult,
      onClose: () => setActionResult(null),
      apiRef
    }
  )));
});
var DataGrid_default = createBuiltin(DataGridComponent, {
  helperText: "The [MUI\xA0X Data Grid](https://mui.com/toolpad/studio/components/data-grid/) component.\n\nThe datagrid lets users display tabular data in a flexible grid.",
  errorProp: "error",
  loadingPropSource: ["rows", "columns"],
  loadingProp: "loading",
  defaultLayoutHeight: 360,
  minimumLayoutHeight: 100,
  argTypes: {
    rowsSource: {
      helperText: "Defines how rows are provided to the grid.",
      type: "string",
      enum: ["prop", "dataProvider"],
      enumLabels: {
        prop: "Direct",
        dataProvider: "Data provider"
      },
      default: "prop",
      label: "Rows source",
      control: { type: "ToggleButtons", bindable: false }
    },
    rows: {
      helperText: "The data to be displayed as rows. Must be an array of objects.",
      type: "array",
      schema: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: true,
          properties: {
            id: {
              type: "string"
            }
          },
          required: ["id"]
        }
      },
      visible: ({ rowsSource }) => rowsSource === "prop"
    },
    dataProviderId: {
      helperText: "The backend data provider that will supply the rows to this grid",
      type: "string",
      control: { type: "DataProviderSelector", bindable: false },
      visible: ({ rowsSource }) => rowsSource === "dataProvider"
    },
    columns: {
      helperText: "The columns to be displayed.",
      type: "array",
      schema: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: true,
          properties: {
            field: {
              type: "string"
            },
            align: {
              type: "string",
              enum: ["center", "right", "left"]
            }
          },
          required: ["field"]
        }
      },
      control: { type: "GridColumns", bindable: false }
    },
    rowIdField: {
      helperText: "Defines which column contains the [id](https://mui.com/x/react-data-grid/row-definition/#row-identifier) that uniquely identifies each row.",
      type: "string",
      control: { type: "RowIdFieldSelect" },
      label: "Id field"
    },
    selection: {
      helperText: "The currently selected row. Or `null` in case no row has been selected.",
      type: "object",
      default: null,
      onChangeProp: "onSelectionChange",
      tsType: `ThisComponent['rows'][number] | undefined`
    },
    density: {
      helperText: "The [density](https://mui.com/x/react-data-grid/accessibility/#density-prop) of the rows. Possible values are `compact`, `standard`, or `comfortable`.",
      type: "string",
      enum: ["compact", "standard", "comfortable"],
      default: "compact"
    },
    loading: {
      helperText: "Displays a loading animation indicating the data grid isn't ready to present data yet.",
      type: "boolean"
    },
    hideToolbar: {
      helperText: "Hide the toolbar area that contains the data grid user controls.",
      type: "boolean"
    },
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    }
  }
});

export {
  CUSTOM_COLUMN_TYPES,
  inferColumns,
  parseColumns,
  DataGrid_default
};
//# sourceMappingURL=chunk-TGZNJ4E6.js.map