{"version":3,"sources":["../src/TextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  TextField as MuiTextField,\n  TextFieldProps as MuiTextFieldProps,\n  BoxProps,\n} from '@mui/material';\nimport createBuiltin from './createBuiltin';\nimport {\n  FORM_INPUT_ARG_TYPES,\n  FORM_TEXT_INPUT_ARG_TYPES,\n  FormInputComponentProps,\n  useFormInput,\n  withComponentForm,\n} from './Form';\nimport { SX_PROP_HELPER_TEXT } from './constants';\n\nexport type TextFieldProps = Omit<MuiTextFieldProps, 'value' | 'onChange'> & {\n  value: string;\n  onChange?: (newValue: string) => void;\n  label?: string;\n  defaultValue: string;\n  alignItems?: BoxProps['alignItems'];\n  justifyContent?: BoxProps['justifyContent'];\n  password?: boolean;\n} & Pick<FormInputComponentProps, 'name' | 'isRequired' | 'minLength' | 'maxLength'>;\n\nfunction TextField({\n  defaultValue,\n  onChange,\n  value,\n  isRequired,\n  minLength,\n  maxLength,\n  password,\n  ...rest\n}: TextFieldProps) {\n  const { onFormInputChange, formInputError, renderFormInput } = useFormInput<string>({\n    name: rest.name,\n    label: rest.label,\n    value,\n    onChange,\n    emptyValue: '',\n    defaultValue,\n    validationProps: { isRequired, minLength, maxLength },\n  });\n\n  const handleChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = event.target.value;\n      onFormInputChange(newValue);\n    },\n    [onFormInputChange],\n  );\n\n  return renderFormInput(\n    <MuiTextField\n      value={value}\n      onChange={handleChange}\n      {...rest}\n      {...(formInputError && {\n        error: Boolean(formInputError),\n        helperText: formInputError.message || '',\n      })}\n      type={password ? 'password' : 'text'}\n    />,\n  );\n}\n\nconst FormWrappedTextField = withComponentForm(TextField);\n\nexport default createBuiltin(FormWrappedTextField, {\n  helperText:\n    'The Material UI [TextField](https://mui.com/toolpad/studio/components/text-field/) component lets you input a text value.',\n  layoutDirection: 'both',\n  argTypes: {\n    value: {\n      helperText: 'The value that is controlled by this text input.',\n      type: 'string',\n      default: '',\n      onChangeProp: 'onChange',\n      defaultValueProp: 'defaultValue',\n    },\n    defaultValue: {\n      helperText: 'A default value for when the input is still empty.',\n      type: 'string',\n      default: '',\n    },\n    label: {\n      helperText: 'A label that describes the content of the text field, for example \"First name\".',\n      type: 'string',\n    },\n    variant: {\n      helperText:\n        'One of the available Material UI TextField [variants](https://mui.com/material-ui/react-button/#basic-button). Possible values are `outlined`, `filled` or `standard`',\n      type: 'string',\n      enum: ['outlined', 'filled', 'standard'],\n      default: 'outlined',\n    },\n    size: {\n      helperText: 'The size of the input. One of `small`, or `medium`.',\n      type: 'string',\n      enum: ['small', 'medium'],\n      default: 'small',\n    },\n    fullWidth: {\n      helperText: 'Whether the input should occupy all available horizontal space.',\n      type: 'boolean',\n    },\n    password: {\n      helperText: \"Masks the input to hide what's being typed.\",\n      type: 'boolean',\n    },\n    placeholder: {\n      helperText: 'The short hint displayed in the `input` before the user enters a value.',\n      type: 'string',\n    },\n    disabled: {\n      helperText: 'Whether the input is disabled.',\n      type: 'boolean',\n    },\n    ...FORM_INPUT_ARG_TYPES,\n    ...FORM_TEXT_INPUT_ARG_TYPES,\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;AAAA,YAAY,WAAW;AACvB;AAAA,EACE,aAAa;AAAA,OAGR;AAqBP,SAAS,UAAU;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAmB;AACjB,QAAM,EAAE,mBAAmB,gBAAgB,gBAAgB,IAAI,aAAqB;AAAA,IAClF,MAAM,KAAK;AAAA,IACX,OAAO,KAAK;AAAA,IACZ;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA,iBAAiB,EAAE,YAAY,WAAW,UAAU;AAAA,EACtD,CAAC;AAED,QAAM,eAAqB;AAAA,IACzB,CAAC,UAA+C;AAC9C,YAAM,WAAW,MAAM,OAAO;AAC9B,wBAAkB,QAAQ;AAAA,IAC5B;AAAA,IACA,CAAC,iBAAiB;AAAA,EACpB;AAEA,SAAO;AAAA,IACL;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,UAAU;AAAA,QACT,GAAG;AAAA,QACH,GAAI,kBAAkB;AAAA,UACrB,OAAO,QAAQ,cAAc;AAAA,UAC7B,YAAY,eAAe,WAAW;AAAA,QACxC;AAAA,QACA,MAAM,WAAW,aAAa;AAAA;AAAA,IAChC;AAAA,EACF;AACF;AAEA,IAAM,uBAAuB,kBAAkB,SAAS;AAExD,IAAO,oBAAQ,cAAc,sBAAsB;AAAA,EACjD,YACE;AAAA,EACF,iBAAiB;AAAA,EACjB,UAAU;AAAA,IACR,OAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,MACT,cAAc;AAAA,MACd,kBAAkB;AAAA,IACpB;AAAA,IACA,cAAc;AAAA,MACZ,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACP,YACE;AAAA,MACF,MAAM;AAAA,MACN,MAAM,CAAC,YAAY,UAAU,UAAU;AAAA,MACvC,SAAS;AAAA,IACX;AAAA,IACA,MAAM;AAAA,MACJ,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM,CAAC,SAAS,QAAQ;AAAA,MACxB,SAAS;AAAA,IACX;AAAA,IACA,WAAW;AAAA,MACT,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,UAAU;AAAA,MACR,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,UAAU;AAAA,MACR,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,IACH,IAAI;AAAA,MACF,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;","names":[]}