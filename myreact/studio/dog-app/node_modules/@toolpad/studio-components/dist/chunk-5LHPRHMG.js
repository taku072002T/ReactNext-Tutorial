import {
  FORM_INPUT_ARG_TYPES,
  useFormInput,
  withComponentForm
} from "./chunk-ER3UTRTB.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";
import {
  createBuiltin
} from "./chunk-5BNQEU2R.js";

// src/FilePicker.tsx
import * as React from "react";
import { TextField as MuiTextField } from "@mui/material";
var readFile = async (file) => {
  return new Promise((resolve, reject) => {
    const readerBase64 = new FileReader();
    readerBase64.onload = (event) => {
      if (!event.target) {
        reject();
        return;
      }
      resolve(event.target.result);
    };
    readerBase64.readAsDataURL(file);
  });
};
function FilePicker({ multiple, value, onChange, isRequired, ...rest }) {
  const { onFormInputChange, formInputError, renderFormInput } = useFormInput({
    name: rest.name,
    label: rest.label,
    value,
    onChange,
    validationProps: { isRequired }
  });
  const handleChange = async (changeEvent) => {
    const filesPromises = Array.from(changeEvent.target.files || []).map(async (file) => {
      const fullFile = {
        name: file.name,
        type: file.type,
        size: file.size,
        base64: await readFile(file)
      };
      return fullFile;
    });
    const files = await Promise.all(filesPromises);
    onFormInputChange(files);
  };
  return renderFormInput(
    /* @__PURE__ */ React.createElement(
      MuiTextField,
      {
        ...rest,
        type: "file",
        value: void 0,
        onChange: handleChange,
        ...formInputError && {
          error: Boolean(formInputError),
          helperText: formInputError.message || ""
        },
        slotProps: {
          htmlInput: { multiple },
          inputLabel: { shrink: true }
        }
      }
    )
  );
}
var FormWrappedFilePicker = withComponentForm(FilePicker);
var FilePicker_default = createBuiltin(FormWrappedFilePicker, {
  helperText: "File Picker component.\nIt allows users to take select and read files.",
  argTypes: {
    value: {
      helperText: "The value that is controlled by this FilePicker.",
      type: "object",
      visible: false,
      onChangeProp: "onChange",
      schema: {
        type: "object",
        properties: {
          name: { type: "string" },
          type: { type: "string" },
          size: { type: "number" },
          base64: { type: "string" }
        }
      }
    },
    label: {
      helperText: 'A label that describes the content of the FilePicker, for example "Profile Image".',
      type: "string"
    },
    multiple: {
      helperText: "Whether the FilePicker should accept multiple files.",
      type: "boolean",
      default: true
    },
    disabled: {
      helperText: "Whether the FilePicker is disabled.",
      type: "boolean"
    },
    ...FORM_INPUT_ARG_TYPES,
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    }
  }
});

export {
  FilePicker_default
};
//# sourceMappingURL=chunk-5LHPRHMG.js.map