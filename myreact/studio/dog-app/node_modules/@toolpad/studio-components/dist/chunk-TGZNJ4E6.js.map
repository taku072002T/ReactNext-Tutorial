{"version":3,"sources":["../src/DataGrid.tsx"],"sourcesContent":["import {\n  DataGridPremiumProps,\n  DataGridPremium,\n  GridColumnResizeParams,\n  GridRowsProp,\n  GridColumnOrderChangeParams,\n  useGridApiContext,\n  gridColumnsTotalWidthSelector,\n  gridColumnPositionsSelector,\n  GridRowSelectionModel,\n  GridColDef,\n  useGridApiRef,\n  GridRenderCellParams,\n  useGridRootProps,\n  gridDensityFactorSelector,\n  useGridSelector,\n  getGridDefaultColumnTypes,\n  GridColTypeDef,\n  GridPaginationModel,\n  GridActionsColDef,\n  GridRowId,\n  GridFilterModel,\n  GridSortModel,\n  GridNoRowsOverlay,\n  GridRowModes,\n  GridApiPro,\n  GridRowModesModel,\n  GridRowModel,\n  GridToolbarContainer,\n  GridToolbarColumnsButton,\n  GridToolbarFilterButton,\n  GridToolbarDensitySelector,\n  GridToolbarExport,\n  gridVisibleColumnFieldsSelector,\n  GridEventListener,\n  GridRowEditStopReasons,\n  GridRowEditStartReasons,\n  GridValueGetter,\n  GridToolbarProps,\n  GridColType,\n  GridPinnedColumnFields,\n} from '@mui/x-data-grid-premium';\nimport {\n  Unstable_LicenseInfoProvider as LicenseInfoProvider,\n  MuiLicenseInfo,\n} from '@mui/x-license';\nimport * as React from 'react';\nimport {\n  useNode,\n  useComponents,\n  UseDataProviderContext,\n  ToolpadDataProviderBase,\n  PaginationMode,\n  FilterModel,\n  SortModel,\n  PaginationModel,\n  useAppHost,\n} from '@toolpad/studio-runtime';\nimport {\n  Box,\n  debounce,\n  LinearProgress,\n  Skeleton,\n  Link,\n  styled,\n  Typography,\n  Tooltip,\n  Popover,\n  IconButton,\n  CircularProgress,\n  Alert,\n  Button,\n  Snackbar,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/DeleteOutline';\nimport CloseIcon from '@mui/icons-material/Close';\nimport SaveIcon from '@mui/icons-material/Save';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\nimport { getObjectKey } from '@toolpad/utils/objectKey';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport { hasImageExtension } from '@toolpad/utils/path';\nimport { ErrorBoundary, FallbackProps } from 'react-error-boundary';\nimport { useNonNullableContext } from '@toolpad/utils/react';\nimport { useQuery, keepPreviousData } from '@tanstack/react-query';\nimport invariant from 'invariant';\nimport {\n  NumberFormat,\n  createFormat as createNumberFormat,\n} from '@toolpad/studio-runtime/numberFormat';\nimport { DateFormat, createFormat as createDateFormat } from '@toolpad/studio-runtime/dateFormat';\nimport useLatest from '@toolpad/utils/hooks/useLatest';\nimport createBuiltin from './createBuiltin';\nimport { SX_PROP_HELPER_TEXT } from './constants';\nimport ErrorOverlay, { ErrorContent } from './components/ErrorOverlay';\n\nconst DRAFT_ROW_MARKER = Symbol('draftRow');\n\nconst ACTIONS_COLUMN_FIELD = '___actions___';\n\nconst LICENSE_INFO: MuiLicenseInfo = {\n  key: process.env.TOOLPAD_BUNDLED_MUI_X_LICENSE,\n};\n\nconst DEFAULT_COLUMN_TYPES = getGridDefaultColumnTypes();\n\nconst DataGridRoot = styled('div')({\n  width: '100%',\n  height: '100%',\n  position: 'relative',\n});\n\nconst SetActionResultContext = React.createContext<((result: ActionResult) => void) | undefined>(\n  undefined,\n);\n\n// Pseudo random number. See https://stackoverflow.com/a/47593316\nfunction mulberry32(a: number): () => number {\n  return () => {\n    /* eslint-disable */\n    let t = (a += 0x6d2b79f5);\n    t = Math.imul(t ^ (t >>> 15), t | 1);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    /* eslint-enable */\n  };\n}\n\nfunction randomBetween(seed: number, min: number, max: number): () => number {\n  const random = mulberry32(seed);\n  return () => min + (max - min) * random();\n}\n\nfunction isNumeric(input: string) {\n  return input ? !Number.isNaN(Number(input)) : false;\n}\n\n/**\n * RegExp to test a string for a ISO 8601 Date spec\n * Also accepts a space instead of T to separate date and time as per rfc3339\n * Does not do any sort of date validation, only checks if the string is according to the ISO 8601 spec.\n *  YYYY\n *  YYYY-MM\n *  YYYY-MM-DD\n *  YYYY-MM-DDThh:mmTZD\n *  YYYY-MM-DDThh:mm:ssTZD\n *  YYYY-MM-DDThh:mm:ss.sTZD\n * @see: https://www.w3.org/TR/NOTE-datetime\n */\nconst ISO_8601 =\n  /^\\d{4}(-\\d{2}(-\\d{2}([T ]\\d{2}:\\d{2}(:\\d{2})?(\\.\\d+)?(([+-]\\d{2}:\\d{2})|Z)?)?)?)?$/i;\n\n/**\n * RegExp to test a string for a full ISO 8601 Date\n * Also accepts a space instead of T to separate date and time as per rfc3339\n * Does not do any sort of date validation, only checks if the string is according to the ISO 8601 spec.\n *  YYYY-MM-DDThh:mm:ss\n *  YYYY-MM-DDThh:mm:ssTZD\n *  YYYY-MM-DDThh:mm:ss.sTZD\n * @see: https://www.w3.org/TR/NOTE-datetime\n */\nconst ISO_8601_FULL = /^\\d{4}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}:\\d{2})|Z)?$/i;\n\nfunction isValidDateTime(input: string) {\n  // The Date constructor is too permissive for validating dates, so we need to use a regex\n  // for example `new Date('Foo bar 0')` results in a valid date\n  if (ISO_8601_FULL.test(input) && !Number.isNaN(Date.parse(input))) {\n    return !Number.isNaN(Date.parse(input));\n  }\n  return false;\n}\n\nfunction isValidDate(input: string) {\n  // The Date constructor is too permissive for validating dates, so we need to use a regex\n  // for example `new Date('Foo bar 0')` results in a valid date\n  if (ISO_8601.test(input) && !Number.isNaN(Date.parse(input))) {\n    return !Number.isNaN(Date.parse(input));\n  }\n  return false;\n}\n\nconst SkeletonCell = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  borderBottom: `1px solid ${theme.palette.divider}`,\n}));\n\nfunction SkeletonLoadingOverlay() {\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n\n  const dimensions = apiRef.current?.getRootDimensions();\n  const viewportHeight = dimensions?.viewportInnerSize.height ?? 0;\n\n  const factor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(rootProps.rowHeight * factor);\n\n  const skeletonRowsCount = Math.ceil(viewportHeight / rowHeight);\n\n  const totalWidth = gridColumnsTotalWidthSelector(apiRef);\n  const positions = gridColumnPositionsSelector(apiRef);\n  const inViewportCount = React.useMemo(\n    () => positions.filter((value) => value <= totalWidth).length,\n    [totalWidth, positions],\n  );\n  const columns = apiRef.current.getVisibleColumns().slice(0, inViewportCount);\n\n  const children = React.useMemo(() => {\n    // reseed random number generator to create stable lines betwen renders\n    const random = randomBetween(12345, 25, 75);\n    const array: React.ReactNode[] = [];\n\n    for (let i = 0; i < skeletonRowsCount; i += 1) {\n      for (const column of columns) {\n        const width = Math.round(random());\n        array.push(\n          <SkeletonCell key={`col-${column.field}-${i}`} sx={{ justifyContent: column.align }}>\n            <Skeleton sx={{ mx: 1 }} width={`${width}%`} />\n          </SkeletonCell>,\n        );\n      }\n      array.push(<SkeletonCell key={`fill-${i}`} />);\n    }\n    return array;\n  }, [skeletonRowsCount, columns]);\n\n  const rowsCount = apiRef.current.getRowsCount();\n\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    // The `subscribeEvent` method will automatically unsubscribe in the cleanup function of the `useEffect`.\n    return apiRef.current.subscribeEvent('scrollPositionChange', (params) => {\n      if (scrollRef.current) {\n        scrollRef.current.scrollLeft = params.left;\n      }\n    });\n  }, [apiRef]);\n\n  return rowsCount > 0 ? (\n    <LinearProgress />\n  ) : (\n    <div\n      ref={scrollRef}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `${columns\n          .map(({ computedWidth }) => `${computedWidth}px`)\n          .join(' ')} 1fr`,\n        gridAutoRows: `${rowHeight}px`,\n        overflowX: 'hidden',\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Polyfill for https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse_static\nfunction urlCanParse(url: string, base?: string): boolean {\n  try {\n    return !!new URL(url, base);\n  } catch {\n    return false;\n  }\n}\n\nfunction inferColumnType(value: unknown): string {\n  if (value instanceof Date) {\n    return 'dateTime';\n  }\n  const valueType = typeof value;\n  switch (typeof value) {\n    case 'number':\n    case 'boolean':\n      return valueType;\n    case 'string': {\n      if (urlCanParse(value)) {\n        const url = new URL(value);\n\n        if (hasImageExtension(url.pathname)) {\n          return 'image';\n        }\n\n        return 'link';\n      }\n      if (isNumeric(value)) {\n        return 'number';\n      }\n      if (isValidDateTime(value)) {\n        return 'dateTime';\n      }\n      if (isValidDate(value)) {\n        return 'date';\n      }\n      return valueType;\n    }\n    case 'object':\n      return 'json';\n    default:\n      return 'string';\n  }\n}\n\nconst ImageCellImg = styled('img')(({ theme }) => ({\n  maxWidth: '100%',\n  maxHeight: '100%',\n  objectFit: 'contain',\n  paddingTop: theme.spacing(1),\n  paddingBottom: theme.spacing(1),\n}));\n\nconst ImageCellPopoverImg = styled('img')(({ theme }) => ({\n  maxWidth: '60vw',\n  maxHeight: '60vh',\n  objectFit: 'contain',\n  margin: theme.spacing(1),\n}));\n\nfunction ImageCell({ field, id, value: src }: GridRenderCellParams<any, any, any>) {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);\n\n  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  const popoverId = React.useId();\n\n  const alt = `${field} ${id}`;\n\n  return (\n    <React.Fragment>\n      <ImageCellImg\n        aria-owns={open ? popoverId : undefined}\n        aria-haspopup=\"true\"\n        onMouseEnter={handlePopoverOpen}\n        onMouseLeave={handlePopoverClose}\n        src={src}\n        alt={alt}\n      />\n      <Popover\n        id={popoverId}\n        sx={{\n          pointerEvents: 'none',\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handlePopoverClose}\n        disableRestoreFocus\n      >\n        <ImageCellPopoverImg src={src} alt={alt} />\n      </Popover>\n    </React.Fragment>\n  );\n}\n\nconst INVALID_DATE = new Date(NaN);\n\nconst dateValueGetter: GridValueGetter = (value: any): Date | undefined => {\n  if (value === null || value === undefined || value === '') {\n    return undefined;\n  }\n\n  if (value instanceof Date) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    if (isNumeric(value)) {\n      return new Date(Number(value));\n    }\n\n    if (isValidDate(value)) {\n      return new Date(value);\n    }\n  }\n\n  // It's fine if this turns out to be an invalid date, the user wanted a date column, if the data can't be parsed as a date\n  // it should just show as such\n  return INVALID_DATE;\n};\n\nfunction ComponentErrorFallback({ error }: FallbackProps) {\n  return (\n    <Typography variant=\"overline\" sx={{ color: 'error.main', fontSize: '10px' }}>\n      Code component error{' '}\n      <Tooltip title={error.message}>\n        <span>ℹ️</span>\n      </Tooltip>\n    </Typography>\n  );\n}\n\ninterface CustomColumnProps {\n  params: GridRenderCellParams;\n}\n\nfunction CustomColumn({ params }: CustomColumnProps) {\n  const { value, colDef, row, field } = params;\n  const column = colDef as SerializableGridColumn;\n  const components = useComponents();\n  const Component = components[`codeComponent.${column.codeComponent}`];\n\n  if (!Component) {\n    return (\n      <Typography variant=\"overline\" sx={{ color: 'error.main', fontSize: '10px' }}>\n        No component selected\n      </Typography>\n    );\n  }\n\n  return (\n    <ErrorBoundary FallbackComponent={ComponentErrorFallback}>\n      <Component value={value} row={row} field={field} />\n    </ErrorBoundary>\n  );\n}\n\nexport const CUSTOM_COLUMN_TYPES: Record<string, GridColTypeDef> = {\n  json: {\n    valueFormatter: (value) => JSON.stringify(value),\n  },\n  date: {\n    valueGetter: dateValueGetter,\n  },\n  dateTime: {\n    valueGetter: dateValueGetter,\n  },\n  link: {\n    renderCell: ({ value }) => (\n      <Link href={value} target=\"_blank\" rel=\"noopener nofollow\">\n        {value}\n      </Link>\n    ),\n  },\n  image: {\n    renderCell: ({ value, ...params }) => (value ? <ImageCell value={value} {...params} /> : ''),\n  },\n  codeComponent: {\n    renderCell: (params: GridRenderCellParams) => {\n      return <CustomColumn params={params} />;\n    },\n  },\n};\n\nexport interface SerializableGridColumn\n  extends Pick<\n    GridColDef,\n    | 'field'\n    | 'align'\n    | 'width'\n    | 'headerName'\n    | 'sortable'\n    | 'filterable'\n    | 'editable'\n    | 'groupable'\n    | 'aggregable'\n  > {\n  type?: string;\n  numberFormat?: NumberFormat;\n  dateFormat?: DateFormat;\n  dateTimeFormat?: DateFormat;\n  codeComponent?: string;\n  visible?: boolean;\n  pin?: 'left' | 'right';\n}\n\nexport type SerializableGridColumns = SerializableGridColumn[];\n\nexport function inferColumns(rows: GridRowsProp): SerializableGridColumns {\n  if (rows.length < 1) {\n    return [];\n  }\n  // Naive implementation that checks only the first row\n  const firstRow = rows[0];\n  return Object.entries(firstRow).map(([field, value]) => {\n    return {\n      field,\n      type: inferColumnType(value),\n    };\n  });\n}\n\nfunction getNarrowedColType(type?: string): GridColType | undefined {\n  return (type && type in DEFAULT_COLUMN_TYPES ? type : undefined) as GridColType | undefined;\n}\n\nexport function parseColumns(columns: SerializableGridColumns): GridColDef[] {\n  return columns.map(({ type: colType, ...column }) => {\n    const isIdColumn = column.field === 'id';\n\n    let baseColumn: Omit<GridColDef, 'field'> = { editable: true };\n\n    if (isIdColumn) {\n      baseColumn = {\n        ...baseColumn,\n        editable: false,\n        renderCell: ({ row, value }) => (row[DRAFT_ROW_MARKER] ? '' : value),\n      };\n    }\n\n    if (colType) {\n      baseColumn = { ...baseColumn, ...CUSTOM_COLUMN_TYPES[colType], ...column };\n    }\n\n    if (colType === 'number' && column.numberFormat) {\n      const format = createNumberFormat(column.numberFormat);\n      baseColumn = {\n        ...baseColumn,\n        valueFormatter: (value: any) => format.format(value),\n      };\n    }\n\n    if (colType === 'date') {\n      const format = createDateFormat(column.dateFormat);\n      baseColumn = {\n        ...baseColumn,\n        valueFormatter: (value: any) => {\n          try {\n            return format.format(value);\n          } catch {\n            return 'Invalid Date';\n          }\n        },\n      };\n    }\n\n    if (colType === 'dateTime') {\n      const format = createDateFormat(column.dateTimeFormat);\n      baseColumn = {\n        ...baseColumn,\n        valueFormatter: (value: any) => {\n          try {\n            return format.format(value);\n          } catch {\n            return 'Invalid Date';\n          }\n        },\n      };\n    }\n\n    return { ...baseColumn, ...column, type: getNarrowedColType(colType) };\n  });\n}\n\ntype ActionResult =\n  | {\n      action: 'create';\n      id: GridRowId;\n      error?: undefined;\n    }\n  | {\n      action: 'create';\n      id?: undefined;\n      error: Error;\n    }\n  | {\n      action: 'update';\n      id: GridRowId;\n      error?: Error;\n    }\n  | {\n      action: 'delete';\n      id: GridRowId;\n      error?: Error;\n    };\n\nconst EMPTY_ROWS: GridRowsProp = [];\n\ninterface Selection {\n  id?: any;\n}\n\ninterface ToolpadDataGridProps extends Omit<DataGridPremiumProps, 'columns' | 'rows' | 'error'> {\n  rowsSource?: 'prop' | 'dataProvider';\n  dataProviderId?: string;\n  rows?: GridRowsProp;\n  columns?: SerializableGridColumns;\n  rowIdField?: string;\n  error?: Error | string;\n  selection?: Selection | null;\n  onSelectionChange?: (newSelection?: Selection | null) => void;\n  hideToolbar?: boolean;\n}\n\ninterface DeleteActionProps {\n  id: GridRowId;\n  dataProvider: ToolpadDataProviderBase<Record<string, unknown>, PaginationMode>;\n  refetch: () => unknown;\n}\n\nfunction DeleteAction({ id, dataProvider, refetch }: DeleteActionProps) {\n  const [loading, setLoading] = React.useState(false);\n\n  const setActionResult = useNonNullableContext(SetActionResultContext);\n\n  const handleDeleteClick = React.useCallback(async () => {\n    invariant(dataProvider.deleteRecord, 'dataProvider must be defined');\n    setLoading(true);\n    try {\n      await dataProvider.deleteRecord(id);\n      await refetch();\n\n      setActionResult({ action: 'delete', id });\n    } catch (error) {\n      setActionResult({ action: 'delete', id, error: errorFrom(error) });\n    } finally {\n      setLoading(false);\n    }\n  }, [dataProvider, id, refetch, setActionResult]);\n\n  return (\n    <IconButton onClick={handleDeleteClick} size=\"small\" aria-label={`Delete row with id \"${id}\"`}>\n      {loading ? <CircularProgress size={16} /> : <DeleteIcon fontSize=\"inherit\" />}\n    </IconButton>\n  );\n}\n\ninterface EditToolbarProps extends GridToolbarProps {\n  hasCreateButton?: boolean;\n  createDisabled?: boolean;\n  onCreateClick?: () => void;\n}\n\nfunction EditToolbar({ hasCreateButton, onCreateClick, createDisabled }: EditToolbarProps) {\n  return (\n    <GridToolbarContainer>\n      {hasCreateButton ? (\n        <Button\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          onClick={onCreateClick}\n          disabled={createDisabled}\n        >\n          Add record\n        </Button>\n      ) : null}\n      <GridToolbarColumnsButton />\n      <GridToolbarFilterButton />\n      <GridToolbarDensitySelector />\n      <GridToolbarExport />\n    </GridToolbarContainer>\n  );\n}\n\ninterface DataProviderDataGridProps extends Partial<DataGridPremiumProps> {\n  rowLoadingError?: unknown;\n  getActions?: GridActionsColDef['getActions'];\n}\n\nfunction useDataProviderDataGridProps(\n  dataProviderId: string | null | undefined,\n  idField: string,\n  apiRef: React.MutableRefObject<GridApiPro>,\n  setActionResult: (result: ActionResult) => void,\n): DataProviderDataGridProps {\n  const useDataProvider = useNonNullableContext(UseDataProviderContext);\n  const {\n    dataProvider,\n    error: dataProviderLoadError,\n    isLoading: dataProviderLoading,\n  } = useDataProvider(dataProviderId || null);\n\n  const [rawPaginationModel, setRawPaginationModel] = React.useState<GridPaginationModel>({\n    page: 0,\n    pageSize: 100,\n  });\n\n  const mapPageToNextCursor = React.useRef(new Map<number, string>());\n\n  const paginationModel = React.useMemo<PaginationModel>(() => {\n    const page = rawPaginationModel.page;\n    const pageSize = rawPaginationModel.pageSize;\n    if (dataProvider?.paginationMode === 'cursor') {\n      // cursor based pagination\n      let cursor: string | null = null;\n      if (page !== 0) {\n        cursor = mapPageToNextCursor.current.get(page - 1) ?? null;\n        if (cursor === null) {\n          throw new Error(`No cursor found for page ${page - 1}`);\n        }\n      }\n      return {\n        cursor,\n        pageSize,\n      };\n      // TODO: when docs are on ts>5, replace with\n      //     } satisfies CursorPaginationModel;\n    }\n\n    // index based pagination\n    return {\n      start: page * pageSize,\n      pageSize,\n    };\n    // TODO: when docs are on ts>5, replace with\n    //     } satisfies IndexPaginationModel;\n  }, [dataProvider?.paginationMode, rawPaginationModel.page, rawPaginationModel.pageSize]);\n\n  const [rawFilterModel, setRawFilterModel] = React.useState<GridFilterModel>();\n\n  const filterModel = React.useMemo<FilterModel>(\n    () => ({\n      items:\n        rawFilterModel?.items.map(({ field, operator, value }) => ({ field, operator, value })) ??\n        [],\n      logicOperator: rawFilterModel?.logicOperator ?? 'and',\n    }),\n    [rawFilterModel],\n  );\n\n  const [rawSortModel, setRawSortModel] = React.useState<GridSortModel>();\n\n  const sortModel = React.useMemo<SortModel>(\n    () => rawSortModel?.map(({ field, sort }) => ({ field, sort: sort ?? 'asc' })) ?? [],\n    [rawSortModel],\n  );\n\n  const [rowModesModel, setRowModesModel] = React.useState<GridRowModesModel>({});\n\n  const isEditing = React.useMemo(\n    () => Object.values(rowModesModel).some((mode) => mode.mode === GridRowModes.Edit),\n    [rowModesModel],\n  );\n\n  const [draftRow, setDraftRow] = React.useState<GridRowModel | null>(null);\n\n  const handleRowEditStop: GridEventListener<'rowEditStop'> = (params, event) => {\n    // Blurring the cell shouldn't end edit mode\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n    if (draftRow && params.reason === GridRowEditStopReasons.escapeKeyDown) {\n      setRowModesModel({\n        ...rowModesModel,\n        [draftRow.id]: { mode: GridRowModes.View, ignoreModifications: true },\n      });\n      setDraftRow(null);\n    }\n  };\n\n  const handleRowEditStart: GridEventListener<'rowEditStart'> = (params, event) => {\n    if (isEditing && params.reason === GridRowEditStartReasons.cellDoubleClick) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const {\n    data,\n    isFetching,\n    isPlaceholderData,\n    isLoading,\n    error: rowLoadingError,\n    refetch,\n  } = useQuery({\n    enabled: !!dataProvider,\n    queryKey: ['toolpadDataProvider', dataProviderId, paginationModel, filterModel, sortModel],\n    placeholderData: keepPreviousData,\n    queryFn: async () => {\n      invariant(dataProvider, 'dataProvider must be defined');\n\n      const result = await dataProvider.getRecords({\n        paginationModel,\n        filterModel,\n        sortModel,\n      });\n\n      if (dataProvider.paginationMode === 'cursor') {\n        if (typeof result.cursor === 'undefined') {\n          throw new Error(\n            `No cursor returned for page ${rawPaginationModel.page}. Return \\`null\\` to signal the end of the data.`,\n          );\n        }\n\n        if (typeof result.cursor === 'string') {\n          mapPageToNextCursor.current.set(rawPaginationModel.page, result.cursor);\n        }\n      }\n\n      return result;\n    },\n  });\n\n  const rowCount =\n    data?.totalCount ??\n    (data?.hasNextPage\n      ? (rawPaginationModel.page + 1) * rawPaginationModel.pageSize + 1\n      : undefined) ??\n    0;\n\n  const [rowUpdating, setRowUpdating] = React.useState<Partial<Record<string, boolean>>>({});\n\n  const handleProcessRowUpdate = React.useCallback(\n    async (newRow: GridRowModel, oldRow: GridRowModel) => {\n      const id = oldRow[idField];\n      const values = Object.fromEntries(\n        Object.entries(newRow).filter(([key, value]) => value !== oldRow[key]),\n      );\n\n      const action = oldRow[DRAFT_ROW_MARKER] ? 'create' : 'update';\n\n      setRowUpdating((oldState) => ({ ...oldState, [id]: true }));\n\n      try {\n        if (action === 'create') {\n          try {\n            invariant(\n              dataProvider?.createRecord,\n              'Edit action should be unavailable when dataProvider.createRecord is not defined',\n            );\n            const newRecord = await dataProvider.createRecord(values);\n            if (!newRecord) {\n              throw new Error('No record returned by createRecord');\n            }\n\n            invariant(newRecord[idField], 'Record returned by createRecord must have an id');\n            setActionResult({ action, id: newRecord[idField] as GridRowId });\n            return newRecord;\n          } catch (error) {\n            setActionResult({ action, error: errorFrom(error) });\n            return oldRow;\n          }\n        } else {\n          try {\n            invariant(\n              dataProvider?.updateRecord,\n              'Edit action should be unavailable when dataProvider.updateRecord is not defined',\n            );\n            let newRecord = await dataProvider.updateRecord(id, values);\n            if (!newRecord?.[idField]) {\n              console.warn('Record returned by updateRecord must have an id');\n            }\n            newRecord ??= newRow;\n            setActionResult({ action, id: newRecord[idField] as GridRowId });\n            return newRecord;\n          } catch (error) {\n            setActionResult({ action, id, error: errorFrom(error) });\n            return oldRow;\n          }\n        }\n      } finally {\n        setRowUpdating((oldState) => {\n          const { [id]: discard, ...newState } = oldState;\n          return newState;\n        });\n        setDraftRow(null);\n        await refetch();\n      }\n    },\n    [dataProvider, idField, refetch, setActionResult],\n  );\n\n  const getActions = React.useMemo<GridActionsColDef['getActions'] | undefined>(() => {\n    if (!dataProvider?.deleteRecord && !dataProvider?.updateRecord && !dataProvider?.createRecord) {\n      return undefined;\n    }\n\n    return ({ id, row }) => {\n      const result = [];\n\n      if (dataProvider.updateRecord || dataProvider.createRecord) {\n        const rowIsInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n        const rowIsUpdating = rowUpdating[id];\n\n        const isDraft = row[DRAFT_ROW_MARKER];\n\n        if (rowIsInEditMode || rowIsUpdating) {\n          return [\n            <IconButton\n              key=\"commit\"\n              size=\"small\"\n              aria-label={`Save updates to ${isDraft ? 'new row' : `row with id \"${id}\"`}`}\n              disabled={rowIsUpdating}\n              onClick={async () => {\n                setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n              }}\n            >\n              {rowIsUpdating ? <CircularProgress size={16} /> : <SaveIcon fontSize=\"inherit\" />}\n            </IconButton>,\n            <IconButton\n              key=\"cancel\"\n              size=\"small\"\n              aria-label=\"Cancel updates\"\n              disabled={rowIsUpdating}\n              onClick={() => {\n                setRowModesModel({\n                  ...rowModesModel,\n                  [id]: { mode: GridRowModes.View, ignoreModifications: true },\n                });\n                setDraftRow(null);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>,\n          ];\n        }\n\n        if (!isEditing && dataProvider.updateRecord) {\n          result.push(\n            <IconButton\n              key=\"update\"\n              onClick={() => {\n                setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n              }}\n              size=\"small\"\n              aria-label={`Edit row with id \"${id}\"`}\n            >\n              <EditIcon fontSize=\"inherit\" />\n            </IconButton>,\n          );\n        }\n      }\n\n      if (!isEditing) {\n        if (dataProvider.deleteRecord) {\n          result.push(\n            <DeleteAction key=\"delete\" id={id} dataProvider={dataProvider} refetch={refetch} />,\n          );\n        }\n      }\n\n      return result;\n    };\n  }, [dataProvider, isEditing, refetch, rowModesModel, rowUpdating]);\n\n  const rows = React.useMemo<GridRowsProp>(() => {\n    let rowData = data?.records ?? [];\n    if (draftRow) {\n      rowData = [draftRow, ...rowData];\n    }\n    return rowData;\n  }, [data?.records, draftRow]);\n\n  if (!dataProviderId) {\n    return {};\n  }\n\n  if (dataProviderLoadError) {\n    return {\n      rowLoadingError: dataProviderLoadError,\n    };\n  }\n\n  if (dataProviderLoading) {\n    return {\n      loading: true,\n    };\n  }\n\n  invariant(dataProvider, \"dataProvider must be defined if it's loaded without error\");\n\n  return {\n    loading: isLoading || (isPlaceholderData && isFetching),\n    paginationMode: 'server',\n    filterMode: 'server',\n    sortingMode: 'server',\n    pagination: true,\n    rowCount,\n    paginationModel: rawPaginationModel,\n    onPaginationModelChange(model) {\n      setRawPaginationModel((prevModel) => {\n        if (prevModel.pageSize !== model.pageSize) {\n          return { ...model, page: 0 };\n        }\n        return model;\n      });\n    },\n    filterModel: rawFilterModel,\n    onFilterModelChange: setRawFilterModel,\n    sortModel: rawSortModel,\n    onSortModelChange: setRawSortModel,\n    rows,\n    rowLoadingError,\n    getActions,\n    editMode: 'row',\n    rowModesModel,\n    onRowModesModelChange: (model) => setRowModesModel(model),\n    processRowUpdate: handleProcessRowUpdate,\n    onRowEditStart: handleRowEditStart,\n    onRowEditStop: handleRowEditStop,\n    slots: {\n      toolbar: EditToolbar,\n    },\n    slotProps: {\n      toolbar: {\n        hasCreateButton: !!dataProvider.createRecord,\n        createDisabled: !!isEditing,\n        onCreateClick: () => {\n          const draftRowId = crypto.randomUUID();\n          const visibleFields = gridVisibleColumnFieldsSelector(apiRef);\n          const firstVisibleFieldIndex = visibleFields.findIndex((field) => field !== idField);\n          const fieldToFocus =\n            firstVisibleFieldIndex >= 0 ? visibleFields[firstVisibleFieldIndex] : undefined;\n          const colIndex = firstVisibleFieldIndex >= 0 ? firstVisibleFieldIndex : 0;\n          setDraftRow({ id: draftRowId, [DRAFT_ROW_MARKER]: true });\n          setRowModesModel((oldModel) => ({\n            ...oldModel,\n            [draftRowId]: { mode: GridRowModes.Edit, fieldToFocus },\n          }));\n          apiRef.current.scrollToIndexes({ rowIndex: 0, colIndex });\n        },\n      },\n    },\n  };\n}\n\ntype NoRowsOverlayProps = React.ComponentProps<typeof GridNoRowsOverlay>;\n\ninterface NoRowsOverlayPropsX extends NoRowsOverlayProps {\n  error?: Error | null;\n}\n\nfunction NoRowsOverlay(props: NoRowsOverlayPropsX) {\n  if (props.error) {\n    return <ErrorContent sx={{ height: '100%' }} error={props.error} />;\n  }\n\n  return <GridNoRowsOverlay {...props} />;\n}\n\ninterface ActionResultOverlayProps {\n  result: ActionResult | null;\n  onClose: () => void;\n  apiRef: React.MutableRefObject<GridApiPro>;\n}\n\nfunction ActionResultOverlay({ result, onClose, apiRef }: ActionResultOverlayProps) {\n  const open = !!result;\n  const actionError = result?.error;\n\n  React.useEffect(() => {\n    if (actionError) {\n      // Log error to console as well for full stacktrace\n      console.error(actionError);\n    }\n  }, [actionError]);\n\n  const lastResult = useLatest(result);\n\n  let message: React.ReactNode = null;\n  if (lastResult) {\n    if (lastResult.action === 'create') {\n      if (lastResult.error) {\n        message = `Failed to create a record, ${lastResult.error.message}`;\n      } else {\n        const index = apiRef.current.getAllRowIds().indexOf(lastResult.id);\n        const visibleFields = gridVisibleColumnFieldsSelector(apiRef);\n        const fieldToFocus: string | undefined = visibleFields[0];\n        if (index >= 0 && fieldToFocus) {\n          message = (\n            <React.Fragment>\n              {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n              <Link\n                href=\"#\"\n                color=\"inherit\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  apiRef.current.scrollToIndexes({ rowIndex: index, colIndex: 0 });\n                  apiRef.current.setCellFocus(lastResult.id, fieldToFocus);\n                }}\n                aria-label=\"Go to new record\"\n              >\n                New record\n              </Link>{' '}\n              created successfully\n            </React.Fragment>\n          );\n        } else {\n          message = 'New record created successfully';\n        }\n      }\n    } else if (lastResult.action === 'update') {\n      message = lastResult.error\n        ? `Failed to update a record, ${lastResult.error.message}`\n        : 'Record updated successfully';\n    } else if (lastResult.action === 'delete') {\n      message = lastResult.error\n        ? `Failed to delete a record, ${lastResult.error.message}`\n        : 'Record deleted successfully';\n    }\n  }\n\n  return (\n    <Box sx={{ mt: 1, position: 'absolute', bottom: 0, left: 0, right: 0, m: 2 }}>\n      <Snackbar\n        sx={{ position: 'absolute' }}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        open={open}\n        autoHideDuration={2000}\n        onClose={onClose}\n        action={\n          <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n            <CloseIcon fontSize=\"inherit\" />\n          </IconButton>\n        }\n      >\n        <Alert severity={lastResult?.error ? 'error' : 'success'} onClose={onClose}>\n          {message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n}\n\nfunction dataGridFallbackRender({ error }: FallbackProps) {\n  return <ErrorOverlay error={error} />;\n}\n\nconst DataGridComponent = React.forwardRef(function DataGridComponent(\n  {\n    columns: columnsProp,\n    rows: rowsProp,\n    rowIdField: rowIdFieldProp,\n    error: errorProp,\n    selection,\n    onSelectionChange,\n    hideToolbar,\n    rowsSource,\n    dataProviderId,\n    sx,\n    ...props\n  }: ToolpadDataGridProps,\n  ref: React.ForwardedRef<HTMLDivElement>,\n) {\n  const apiRef = useGridApiRef();\n  const [actionResult, setActionResult] = React.useState<ActionResult | null>(null);\n\n  const rowIdField = rowIdFieldProp ?? 'id';\n\n  const {\n    rows: dataProviderRowsInput,\n    getActions: getProviderActions,\n    slots: dataProviderSlots,\n    slotProps: dataProviderSlotProps,\n    ...dataProviderProps\n  } = useDataProviderDataGridProps(\n    rowsSource === 'dataProvider' ? dataProviderId : null,\n    rowIdField,\n    apiRef,\n    setActionResult,\n  );\n\n  const nodeRuntime = useNode<ToolpadDataGridProps>();\n\n  const handleResize = React.useMemo(\n    () =>\n      debounce((params: GridColumnResizeParams) => {\n        if (!nodeRuntime) {\n          return;\n        }\n\n        nodeRuntime.updateAppDomConstProp('columns', (columns) =>\n          columns?.map((column) =>\n            column.field === params.colDef.field ? { ...column, width: params.width } : column,\n          ),\n        );\n      }, 500),\n    [nodeRuntime],\n  );\n  React.useEffect(() => handleResize.clear(), [handleResize]);\n\n  const handleColumnOrderChange = React.useMemo(\n    () =>\n      debounce((params: GridColumnOrderChangeParams) => {\n        if (!nodeRuntime) {\n          return;\n        }\n\n        nodeRuntime.updateAppDomConstProp('columns', (columns) => {\n          if (!columns) {\n            return columns;\n          }\n          const old = columns.find((colDef) => colDef.field === params.column.field);\n          if (!old) {\n            return columns;\n          }\n          const withoutOld = columns.filter((column) => column.field !== params.column.field);\n          return [\n            ...withoutOld.slice(0, params.targetIndex),\n            old,\n            ...withoutOld.slice(params.targetIndex),\n          ];\n        });\n      }, 500),\n    [nodeRuntime],\n  );\n  React.useEffect(() => handleColumnOrderChange.clear(), [handleColumnOrderChange]);\n\n  let rowsInput: GridRowsProp;\n  if (rowsSource === 'dataProvider') {\n    rowsInput = dataProviderRowsInput ?? EMPTY_ROWS;\n  } else {\n    rowsInput = rowsProp ?? EMPTY_ROWS;\n  }\n\n  const hasExplicitRowId: boolean = React.useMemo(() => {\n    const hasRowIdField: boolean = !!(rowIdFieldProp && rowIdFieldProp !== 'id');\n    return hasRowIdField || rowsInput.length === 0 || rowsInput[0].id !== undefined;\n  }, [rowIdFieldProp, rowsInput]);\n\n  const rows: GridRowsProp = React.useMemo(\n    () => (hasExplicitRowId ? rowsInput : rowsInput.map((row, id) => ({ ...row, id }))),\n    [hasExplicitRowId, rowsInput],\n  );\n\n  const columnsInitRef = React.useRef(false);\n  const hasColumnsDefined = columnsProp && columnsProp.length > 0;\n\n  React.useEffect(() => {\n    if (!nodeRuntime || hasColumnsDefined || rows.length <= 0 || columnsInitRef.current) {\n      return;\n    }\n\n    let inferredColumns = inferColumns(rows);\n\n    if (!hasExplicitRowId) {\n      inferredColumns = inferredColumns.filter((column) => column.field !== 'id');\n    }\n\n    nodeRuntime.updateAppDomConstProp('columns', inferredColumns);\n\n    columnsInitRef.current = true;\n  }, [hasColumnsDefined, rows, nodeRuntime, hasExplicitRowId]);\n\n  const getRowId = React.useCallback(\n    (row: any) => {\n      return rowIdFieldProp && row[rowIdFieldProp] ? row[rowIdFieldProp] : row.id;\n    },\n    [rowIdFieldProp],\n  );\n\n  const onSelectionModelChange = React.useCallback(\n    (ids: GridRowSelectionModel) => {\n      onSelectionChange?.(ids.length > 0 ? rows.find((row) => row.id === ids[0]) : null);\n    },\n    [rows, onSelectionChange],\n  );\n\n  const selectionModel = React.useMemo(\n    () => (selection?.id ? [selection.id] : []),\n    [selection?.id],\n  );\n\n  const columns: GridColDef[] = React.useMemo(\n    () => (columnsProp ? parseColumns(columnsProp) : []),\n    [columnsProp],\n  );\n\n  React.useEffect(() => {\n    apiRef.current.updateColumns(columns);\n  }, [apiRef, columns]);\n\n  // The grid doesn't update when the getRowId property changes, so it needs to be remounted\n  const gridKey = React.useMemo(\n    () => [getObjectKey(getRowId), getObjectKey(columns)].join('::'),\n    [getRowId, columns],\n  );\n\n  let rowLoadingError: Error | null = null;\n  if (dataProviderProps?.rowLoadingError) {\n    rowLoadingError = errorFrom(dataProviderProps.rowLoadingError);\n  } else if (errorProp) {\n    rowLoadingError = errorFrom(errorProp);\n  }\n\n  React.useEffect(() => {\n    nodeRuntime?.updateEditorNodeData('rawRows', rows);\n  }, [nodeRuntime, rows]);\n\n  const renderedColumns = React.useMemo<GridColDef[]>(() => {\n    const result = [...columns];\n\n    if (getProviderActions) {\n      result.push({\n        field: ACTIONS_COLUMN_FIELD,\n        type: 'actions',\n        align: 'right',\n        resizable: false,\n        pinnable: false,\n        getActions: getProviderActions,\n      });\n    }\n\n    return result;\n  }, [columns, getProviderActions]);\n\n  const appHost = useAppHost();\n  const isProPlan = appHost.plan === 'pro';\n\n  const columnVisibilityModel = Object.fromEntries(\n    (columnsProp ?? []).map((column) => [column.field, column.visible ?? true]),\n  );\n\n  const pinnedColumns: GridPinnedColumnFields = React.useMemo(() => {\n    const result = (columnsProp ?? []).reduce<GridPinnedColumnFields>((acc, column) => {\n      if (column.pin) {\n        acc[column.pin] ??= [];\n        acc[column.pin]?.push(column.field);\n      }\n      return acc;\n    }, {});\n    result.right ??= [];\n    result.right.push(ACTIONS_COLUMN_FIELD);\n    return result;\n  }, [columnsProp]);\n\n  return (\n    <LicenseInfoProvider info={LICENSE_INFO}>\n      <DataGridRoot ref={ref} sx={sx}>\n        <ErrorBoundary fallbackRender={dataGridFallbackRender} resetKeys={[rows]}>\n          <SetActionResultContext.Provider value={setActionResult}>\n            <DataGridPremium\n              apiRef={apiRef}\n              slots={{\n                ...dataProviderSlots,\n                loadingOverlay: SkeletonLoadingOverlay,\n                noRowsOverlay: NoRowsOverlay,\n                toolbar: hideToolbar ? null : dataProviderSlots?.toolbar,\n              }}\n              slotProps={{\n                noRowsOverlay: {\n                  error: rowLoadingError,\n                } as any,\n                ...dataProviderSlotProps,\n              }}\n              onColumnResize={handleResize}\n              onColumnOrderChange={handleColumnOrderChange}\n              rows={rows}\n              columns={renderedColumns}\n              key={gridKey}\n              getRowId={getRowId}\n              onRowSelectionModelChange={onSelectionModelChange}\n              rowSelectionModel={selectionModel}\n              initialState={{\n                columns: { columnVisibilityModel },\n                pinnedColumns,\n              }}\n              disableAggregation={!isProPlan}\n              disableRowGrouping={!isProPlan}\n              disableColumnPinning={!isProPlan}\n              {...props}\n              {...dataProviderProps}\n              sx={{\n                height: '100%',\n              }}\n            />\n          </SetActionResultContext.Provider>\n        </ErrorBoundary>\n\n        <ActionResultOverlay\n          result={actionResult}\n          onClose={() => setActionResult(null)}\n          apiRef={apiRef}\n        />\n      </DataGridRoot>\n    </LicenseInfoProvider>\n  );\n});\n\nexport default createBuiltin(DataGridComponent, {\n  helperText:\n    'The [MUI X Data Grid](https://mui.com/toolpad/studio/components/data-grid/) component.\\n\\nThe datagrid lets users display tabular data in a flexible grid.',\n  errorProp: 'error',\n  loadingPropSource: ['rows', 'columns'],\n  loadingProp: 'loading',\n  defaultLayoutHeight: 360,\n  minimumLayoutHeight: 100,\n  argTypes: {\n    rowsSource: {\n      helperText: 'Defines how rows are provided to the grid.',\n      type: 'string',\n      enum: ['prop', 'dataProvider'],\n      enumLabels: {\n        prop: 'Direct',\n        dataProvider: 'Data provider',\n      },\n      default: 'prop',\n      label: 'Rows source',\n      control: { type: 'ToggleButtons', bindable: false },\n    },\n    rows: {\n      helperText: 'The data to be displayed as rows. Must be an array of objects.',\n      type: 'array',\n      schema: {\n        type: 'array',\n        items: {\n          type: 'object',\n          additionalProperties: true,\n          properties: {\n            id: {\n              type: 'string',\n            },\n          },\n          required: ['id'],\n        },\n      },\n      visible: ({ rowsSource }: ToolpadDataGridProps) => rowsSource === 'prop',\n    },\n    dataProviderId: {\n      helperText: 'The backend data provider that will supply the rows to this grid',\n      type: 'string',\n      control: { type: 'DataProviderSelector', bindable: false },\n      visible: ({ rowsSource }: ToolpadDataGridProps) => rowsSource === 'dataProvider',\n    },\n    columns: {\n      helperText: 'The columns to be displayed.',\n      type: 'array',\n      schema: {\n        type: 'array',\n        items: {\n          type: 'object',\n          additionalProperties: true,\n          properties: {\n            field: {\n              type: 'string',\n            },\n            align: {\n              type: 'string',\n              enum: ['center', 'right', 'left'],\n            },\n          },\n          required: ['field'],\n        },\n      },\n      control: { type: 'GridColumns', bindable: false },\n    },\n    rowIdField: {\n      helperText:\n        'Defines which column contains the [id](https://mui.com/x/react-data-grid/row-definition/#row-identifier) that uniquely identifies each row.',\n      type: 'string',\n      control: { type: 'RowIdFieldSelect' },\n      label: 'Id field',\n    },\n    selection: {\n      helperText: 'The currently selected row. Or `null` in case no row has been selected.',\n      type: 'object',\n      default: null,\n      onChangeProp: 'onSelectionChange',\n      tsType: `ThisComponent['rows'][number] | undefined`,\n    },\n    density: {\n      helperText:\n        'The [density](https://mui.com/x/react-data-grid/accessibility/#density-prop) of the rows. Possible values are `compact`, `standard`, or `comfortable`.',\n      type: 'string',\n      enum: ['compact', 'standard', 'comfortable'],\n      default: 'compact',\n    },\n    loading: {\n      helperText:\n        \"Displays a loading animation indicating the data grid isn't ready to present data yet.\",\n      type: 'boolean',\n    },\n    hideToolbar: {\n      helperText: 'Hide the toolbar area that contains the data grid user controls.',\n      type: 'boolean',\n    },\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n  },\n});\n"],"mappings":";;;;;;;;;;;;AAAA;AAAA,EAEE;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EAGA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAOA;AAAA,EACA;AAAA,EAIA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,OAKK;AACP;AAAA,EACE,gCAAgC;AAAA,OAE3B;AACP,YAAY,WAAW;AACvB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EAMA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,cAAc;AACrB,OAAO,cAAc;AACrB,OAAO,aAAa;AACpB,SAAS,oBAAoB;AAC7B,SAAS,iBAAiB;AAC1B,SAAS,yBAAyB;AAClC,SAAS,qBAAoC;AAC7C,SAAS,6BAA6B;AACtC,SAAS,UAAU,wBAAwB;AAC3C,OAAO,eAAe;AACtB;AAAA,EAEE,gBAAgB;AAAA,OACX;AACP,SAAqB,gBAAgB,wBAAwB;AAC7D,OAAO,eAAe;AAKtB,IAAM,mBAAmB,OAAO,UAAU;AAE1C,IAAM,uBAAuB;AAE7B,IAAM,eAA+B;AAAA,EACnC,KAAK;AACP;AAEA,IAAM,uBAAuB,0BAA0B;AAEvD,IAAM,eAAe,OAAO,KAAK,EAAE;AAAA,EACjC,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AACZ,CAAC;AAED,IAAM,yBAA+B;AAAA,EACnC;AACF;AAGA,SAAS,WAAW,GAAyB;AAC3C,SAAO,MAAM;AAEX,QAAI,IAAK,KAAK;AACd,QAAI,KAAK,KAAK,IAAK,MAAM,IAAK,IAAI,CAAC;AACnC,SAAK,IAAI,KAAK,KAAK,IAAK,MAAM,GAAI,IAAI,EAAE;AACxC,aAAS,IAAK,MAAM,QAAS,KAAK;AAAA,EAEpC;AACF;AAEA,SAAS,cAAc,MAAc,KAAa,KAA2B;AAC3E,QAAM,SAAS,WAAW,IAAI;AAC9B,SAAO,MAAM,OAAO,MAAM,OAAO,OAAO;AAC1C;AAEA,SAAS,UAAU,OAAe;AAChC,SAAO,QAAQ,CAAC,OAAO,MAAM,OAAO,KAAK,CAAC,IAAI;AAChD;AAcA,IAAM,WACJ;AAWF,IAAM,gBAAgB;AAEtB,SAAS,gBAAgB,OAAe;AAGtC,MAAI,cAAc,KAAK,KAAK,KAAK,CAAC,OAAO,MAAM,KAAK,MAAM,KAAK,CAAC,GAAG;AACjE,WAAO,CAAC,OAAO,MAAM,KAAK,MAAM,KAAK,CAAC;AAAA,EACxC;AACA,SAAO;AACT;AAEA,SAAS,YAAY,OAAe;AAGlC,MAAI,SAAS,KAAK,KAAK,KAAK,CAAC,OAAO,MAAM,KAAK,MAAM,KAAK,CAAC,GAAG;AAC5D,WAAO,CAAC,OAAO,MAAM,KAAK,MAAM,KAAK,CAAC;AAAA,EACxC;AACA,SAAO;AACT;AAEA,IAAM,eAAe,OAAO,KAAK,EAAE,CAAC,EAAE,MAAM,OAAO;AAAA,EACjD,SAAS;AAAA,EACT,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,cAAc,aAAa,MAAM,QAAQ,OAAO;AAClD,EAAE;AAEF,SAAS,yBAAyB;AAChC,QAAM,SAAS,kBAAkB;AACjC,QAAM,YAAY,iBAAiB;AAEnC,QAAM,aAAa,OAAO,SAAS,kBAAkB;AACrD,QAAM,iBAAiB,YAAY,kBAAkB,UAAU;AAE/D,QAAM,SAAS,gBAAgB,QAAQ,yBAAyB;AAChE,QAAM,YAAY,KAAK,MAAM,UAAU,YAAY,MAAM;AAEzD,QAAM,oBAAoB,KAAK,KAAK,iBAAiB,SAAS;AAE9D,QAAM,aAAa,8BAA8B,MAAM;AACvD,QAAM,YAAY,4BAA4B,MAAM;AACpD,QAAM,kBAAwB;AAAA,IAC5B,MAAM,UAAU,OAAO,CAAC,UAAU,SAAS,UAAU,EAAE;AAAA,IACvD,CAAC,YAAY,SAAS;AAAA,EACxB;AACA,QAAM,UAAU,OAAO,QAAQ,kBAAkB,EAAE,MAAM,GAAG,eAAe;AAE3E,QAAM,WAAiB,cAAQ,MAAM;AAEnC,UAAM,SAAS,cAAc,OAAO,IAAI,EAAE;AAC1C,UAAM,QAA2B,CAAC;AAElC,aAAS,IAAI,GAAG,IAAI,mBAAmB,KAAK,GAAG;AAC7C,iBAAW,UAAU,SAAS;AAC5B,cAAM,QAAQ,KAAK,MAAM,OAAO,CAAC;AACjC,cAAM;AAAA,UACJ,oCAAC,gBAAa,KAAK,OAAO,OAAO,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE,gBAAgB,OAAO,MAAM,KAChF,oCAAC,YAAS,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,GAAG,KAAK,KAAK,CAC/C;AAAA,QACF;AAAA,MACF;AACA,YAAM,KAAK,oCAAC,gBAAa,KAAK,QAAQ,CAAC,IAAI,CAAE;AAAA,IAC/C;AACA,WAAO;AAAA,EACT,GAAG,CAAC,mBAAmB,OAAO,CAAC;AAE/B,QAAM,YAAY,OAAO,QAAQ,aAAa;AAE9C,QAAM,YAAkB,aAAuB,IAAI;AAEnD,EAAM,gBAAU,MAAM;AAEpB,WAAO,OAAO,QAAQ,eAAe,wBAAwB,CAAC,WAAW;AACvE,UAAI,UAAU,SAAS;AACrB,kBAAU,QAAQ,aAAa,OAAO;AAAA,MACxC;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,MAAM,CAAC;AAEX,SAAO,YAAY,IACjB,oCAAC,oBAAe,IAEhB;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,MACL,OAAO;AAAA,QACL,SAAS;AAAA,QACT,qBAAqB,GAAG,QACrB,IAAI,CAAC,EAAE,cAAc,MAAM,GAAG,aAAa,IAAI,EAC/C,KAAK,GAAG,CAAC;AAAA,QACZ,cAAc,GAAG,SAAS;AAAA,QAC1B,WAAW;AAAA,MACb;AAAA;AAAA,IAEC;AAAA,EACH;AAEJ;AAGA,SAAS,YAAY,KAAa,MAAwB;AACxD,MAAI;AACF,WAAO,CAAC,CAAC,IAAI,IAAI,KAAK,IAAI;AAAA,EAC5B,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAEA,SAAS,gBAAgB,OAAwB;AAC/C,MAAI,iBAAiB,MAAM;AACzB,WAAO;AAAA,EACT;AACA,QAAM,YAAY,OAAO;AACzB,UAAQ,OAAO,OAAO;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK,UAAU;AACb,UAAI,YAAY,KAAK,GAAG;AACtB,cAAM,MAAM,IAAI,IAAI,KAAK;AAEzB,YAAI,kBAAkB,IAAI,QAAQ,GAAG;AACnC,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT;AACA,UAAI,UAAU,KAAK,GAAG;AACpB,eAAO;AAAA,MACT;AACA,UAAI,gBAAgB,KAAK,GAAG;AAC1B,eAAO;AAAA,MACT;AACA,UAAI,YAAY,KAAK,GAAG;AACtB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAAA,IACA,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,IAAM,eAAe,OAAO,KAAK,EAAE,CAAC,EAAE,MAAM,OAAO;AAAA,EACjD,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY,MAAM,QAAQ,CAAC;AAAA,EAC3B,eAAe,MAAM,QAAQ,CAAC;AAChC,EAAE;AAEF,IAAM,sBAAsB,OAAO,KAAK,EAAE,CAAC,EAAE,MAAM,OAAO;AAAA,EACxD,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,QAAQ,MAAM,QAAQ,CAAC;AACzB,EAAE;AAEF,SAAS,UAAU,EAAE,OAAO,IAAI,OAAO,IAAI,GAAwC;AACjF,QAAM,CAAC,UAAU,WAAW,IAAU,eAA6B,IAAI;AAEvE,QAAM,oBAAoB,CAAC,UAAyC;AAClE,gBAAY,MAAM,aAAa;AAAA,EACjC;AAEA,QAAM,qBAAqB,MAAM;AAC/B,gBAAY,IAAI;AAAA,EAClB;AAEA,QAAM,OAAO,QAAQ,QAAQ;AAE7B,QAAM,YAAkB,YAAM;AAE9B,QAAM,MAAM,GAAG,KAAK,IAAI,EAAE;AAE1B,SACE,oCAAO,gBAAN,MACC;AAAA,IAAC;AAAA;AAAA,MACC,aAAW,OAAO,YAAY;AAAA,MAC9B,iBAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd;AAAA,MACA;AAAA;AAAA,EACF,GACA;AAAA,IAAC;AAAA;AAAA,MACC,IAAI;AAAA,MACJ,IAAI;AAAA,QACF,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,qBAAmB;AAAA;AAAA,IAEnB,oCAAC,uBAAoB,KAAU,KAAU;AAAA,EAC3C,CACF;AAEJ;AAEA,IAAM,eAAe,oBAAI,KAAK,GAAG;AAEjC,IAAM,kBAAmC,CAAC,UAAiC;AACzE,MAAI,UAAU,QAAQ,UAAU,UAAa,UAAU,IAAI;AACzD,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB,MAAM;AACzB,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,IAAI,KAAK,KAAK;AAAA,EACvB;AAEA,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,UAAU,KAAK,GAAG;AACpB,aAAO,IAAI,KAAK,OAAO,KAAK,CAAC;AAAA,IAC/B;AAEA,QAAI,YAAY,KAAK,GAAG;AACtB,aAAO,IAAI,KAAK,KAAK;AAAA,IACvB;AAAA,EACF;AAIA,SAAO;AACT;AAEA,SAAS,uBAAuB,EAAE,MAAM,GAAkB;AACxD,SACE,oCAAC,cAAW,SAAQ,YAAW,IAAI,EAAE,OAAO,cAAc,UAAU,OAAO,KAAG,wBACvD,KACrB,oCAAC,WAAQ,OAAO,MAAM,WACpB,oCAAC,cAAK,cAAE,CACV,CACF;AAEJ;AAMA,SAAS,aAAa,EAAE,OAAO,GAAsB;AACnD,QAAM,EAAE,OAAO,QAAQ,KAAK,MAAM,IAAI;AACtC,QAAM,SAAS;AACf,QAAM,aAAa,cAAc;AACjC,QAAM,YAAY,WAAW,iBAAiB,OAAO,aAAa,EAAE;AAEpE,MAAI,CAAC,WAAW;AACd,WACE,oCAAC,cAAW,SAAQ,YAAW,IAAI,EAAE,OAAO,cAAc,UAAU,OAAO,KAAG,uBAE9E;AAAA,EAEJ;AAEA,SACE,oCAAC,iBAAc,mBAAmB,0BAChC,oCAAC,aAAU,OAAc,KAAU,OAAc,CACnD;AAEJ;AAEO,IAAM,sBAAsD;AAAA,EACjE,MAAM;AAAA,IACJ,gBAAgB,CAAC,UAAU,KAAK,UAAU,KAAK;AAAA,EACjD;AAAA,EACA,MAAM;AAAA,IACJ,aAAa;AAAA,EACf;AAAA,EACA,UAAU;AAAA,IACR,aAAa;AAAA,EACf;AAAA,EACA,MAAM;AAAA,IACJ,YAAY,CAAC,EAAE,MAAM,MACnB,oCAAC,QAAK,MAAM,OAAO,QAAO,UAAS,KAAI,uBACpC,KACH;AAAA,EAEJ;AAAA,EACA,OAAO;AAAA,IACL,YAAY,CAAC,EAAE,OAAO,GAAG,OAAO,MAAO,QAAQ,oCAAC,aAAU,OAAe,GAAG,QAAQ,IAAK;AAAA,EAC3F;AAAA,EACA,eAAe;AAAA,IACb,YAAY,CAAC,WAAiC;AAC5C,aAAO,oCAAC,gBAAa,QAAgB;AAAA,IACvC;AAAA,EACF;AACF;AA0BO,SAAS,aAAa,MAA6C;AACxE,MAAI,KAAK,SAAS,GAAG;AACnB,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,WAAW,KAAK,CAAC;AACvB,SAAO,OAAO,QAAQ,QAAQ,EAAE,IAAI,CAAC,CAAC,OAAO,KAAK,MAAM;AACtD,WAAO;AAAA,MACL;AAAA,MACA,MAAM,gBAAgB,KAAK;AAAA,IAC7B;AAAA,EACF,CAAC;AACH;AAEA,SAAS,mBAAmB,MAAwC;AAClE,SAAQ,QAAQ,QAAQ,uBAAuB,OAAO;AACxD;AAEO,SAAS,aAAa,SAAgD;AAC3E,SAAO,QAAQ,IAAI,CAAC,EAAE,MAAM,SAAS,GAAG,OAAO,MAAM;AACnD,UAAM,aAAa,OAAO,UAAU;AAEpC,QAAI,aAAwC,EAAE,UAAU,KAAK;AAE7D,QAAI,YAAY;AACd,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,UAAU;AAAA,QACV,YAAY,CAAC,EAAE,KAAK,MAAM,MAAO,IAAI,gBAAgB,IAAI,KAAK;AAAA,MAChE;AAAA,IACF;AAEA,QAAI,SAAS;AACX,mBAAa,EAAE,GAAG,YAAY,GAAG,oBAAoB,OAAO,GAAG,GAAG,OAAO;AAAA,IAC3E;AAEA,QAAI,YAAY,YAAY,OAAO,cAAc;AAC/C,YAAM,SAAS,mBAAmB,OAAO,YAAY;AACrD,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,gBAAgB,CAAC,UAAe,OAAO,OAAO,KAAK;AAAA,MACrD;AAAA,IACF;AAEA,QAAI,YAAY,QAAQ;AACtB,YAAM,SAAS,iBAAiB,OAAO,UAAU;AACjD,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,gBAAgB,CAAC,UAAe;AAC9B,cAAI;AACF,mBAAO,OAAO,OAAO,KAAK;AAAA,UAC5B,QAAQ;AACN,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,YAAY,YAAY;AAC1B,YAAM,SAAS,iBAAiB,OAAO,cAAc;AACrD,mBAAa;AAAA,QACX,GAAG;AAAA,QACH,gBAAgB,CAAC,UAAe;AAC9B,cAAI;AACF,mBAAO,OAAO,OAAO,KAAK;AAAA,UAC5B,QAAQ;AACN,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO,EAAE,GAAG,YAAY,GAAG,QAAQ,MAAM,mBAAmB,OAAO,EAAE;AAAA,EACvE,CAAC;AACH;AAwBA,IAAM,aAA2B,CAAC;AAwBlC,SAAS,aAAa,EAAE,IAAI,cAAc,QAAQ,GAAsB;AACtE,QAAM,CAAC,SAAS,UAAU,IAAU,eAAS,KAAK;AAElD,QAAM,kBAAkB,sBAAsB,sBAAsB;AAEpE,QAAM,oBAA0B,kBAAY,YAAY;AACtD,cAAU,aAAa,cAAc,8BAA8B;AACnE,eAAW,IAAI;AACf,QAAI;AACF,YAAM,aAAa,aAAa,EAAE;AAClC,YAAM,QAAQ;AAEd,sBAAgB,EAAE,QAAQ,UAAU,GAAG,CAAC;AAAA,IAC1C,SAAS,OAAO;AACd,sBAAgB,EAAE,QAAQ,UAAU,IAAI,OAAO,UAAU,KAAK,EAAE,CAAC;AAAA,IACnE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,cAAc,IAAI,SAAS,eAAe,CAAC;AAE/C,SACE,oCAAC,cAAW,SAAS,mBAAmB,MAAK,SAAQ,cAAY,uBAAuB,EAAE,OACvF,UAAU,oCAAC,oBAAiB,MAAM,IAAI,IAAK,oCAAC,cAAW,UAAS,WAAU,CAC7E;AAEJ;AAQA,SAAS,YAAY,EAAE,iBAAiB,eAAe,eAAe,GAAqB;AACzF,SACE,oCAAC,4BACE,kBACC;AAAA,IAAC;AAAA;AAAA,MACC,OAAM;AAAA,MACN,WAAW,oCAAC,aAAQ;AAAA,MACpB,SAAS;AAAA,MACT,UAAU;AAAA;AAAA,IACX;AAAA,EAED,IACE,MACJ,oCAAC,8BAAyB,GAC1B,oCAAC,6BAAwB,GACzB,oCAAC,gCAA2B,GAC5B,oCAAC,uBAAkB,CACrB;AAEJ;AAOA,SAAS,6BACP,gBACA,SACA,QACA,iBAC2B;AAC3B,QAAM,kBAAkB,sBAAsB,sBAAsB;AACpE,QAAM;AAAA,IACJ;AAAA,IACA,OAAO;AAAA,IACP,WAAW;AAAA,EACb,IAAI,gBAAgB,kBAAkB,IAAI;AAE1C,QAAM,CAAC,oBAAoB,qBAAqB,IAAU,eAA8B;AAAA,IACtF,MAAM;AAAA,IACN,UAAU;AAAA,EACZ,CAAC;AAED,QAAM,sBAA4B,aAAO,oBAAI,IAAoB,CAAC;AAElE,QAAM,kBAAwB,cAAyB,MAAM;AAC3D,UAAM,OAAO,mBAAmB;AAChC,UAAM,WAAW,mBAAmB;AACpC,QAAI,cAAc,mBAAmB,UAAU;AAE7C,UAAI,SAAwB;AAC5B,UAAI,SAAS,GAAG;AACd,iBAAS,oBAAoB,QAAQ,IAAI,OAAO,CAAC,KAAK;AACtD,YAAI,WAAW,MAAM;AACnB,gBAAM,IAAI,MAAM,4BAA4B,OAAO,CAAC,EAAE;AAAA,QACxD;AAAA,MACF;AACA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IAGF;AAGA,WAAO;AAAA,MACL,OAAO,OAAO;AAAA,MACd;AAAA,IACF;AAAA,EAGF,GAAG,CAAC,cAAc,gBAAgB,mBAAmB,MAAM,mBAAmB,QAAQ,CAAC;AAEvF,QAAM,CAAC,gBAAgB,iBAAiB,IAAU,eAA0B;AAE5E,QAAM,cAAoB;AAAA,IACxB,OAAO;AAAA,MACL,OACE,gBAAgB,MAAM,IAAI,CAAC,EAAE,OAAO,UAAU,MAAM,OAAO,EAAE,OAAO,UAAU,MAAM,EAAE,KACtF,CAAC;AAAA,MACH,eAAe,gBAAgB,iBAAiB;AAAA,IAClD;AAAA,IACA,CAAC,cAAc;AAAA,EACjB;AAEA,QAAM,CAAC,cAAc,eAAe,IAAU,eAAwB;AAEtE,QAAM,YAAkB;AAAA,IACtB,MAAM,cAAc,IAAI,CAAC,EAAE,OAAO,KAAK,OAAO,EAAE,OAAO,MAAM,QAAQ,MAAM,EAAE,KAAK,CAAC;AAAA,IACnF,CAAC,YAAY;AAAA,EACf;AAEA,QAAM,CAAC,eAAe,gBAAgB,IAAU,eAA4B,CAAC,CAAC;AAE9E,QAAM,YAAkB;AAAA,IACtB,MAAM,OAAO,OAAO,aAAa,EAAE,KAAK,CAAC,SAAS,KAAK,SAAS,aAAa,IAAI;AAAA,IACjF,CAAC,aAAa;AAAA,EAChB;AAEA,QAAM,CAAC,UAAU,WAAW,IAAU,eAA8B,IAAI;AAExE,QAAM,oBAAsD,CAAC,QAAQ,UAAU;AAE7E,QAAI,OAAO,WAAW,uBAAuB,aAAa;AACxD,YAAM,sBAAsB;AAAA,IAC9B;AACA,QAAI,YAAY,OAAO,WAAW,uBAAuB,eAAe;AACtE,uBAAiB;AAAA,QACf,GAAG;AAAA,QACH,CAAC,SAAS,EAAE,GAAG,EAAE,MAAM,aAAa,MAAM,qBAAqB,KAAK;AAAA,MACtE,CAAC;AACD,kBAAY,IAAI;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,qBAAwD,CAAC,QAAQ,UAAU;AAC/E,QAAI,aAAa,OAAO,WAAW,wBAAwB,iBAAiB;AAC1E,YAAM,sBAAsB;AAAA,IAC9B;AAAA,EACF;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP;AAAA,EACF,IAAI,SAAS;AAAA,IACX,SAAS,CAAC,CAAC;AAAA,IACX,UAAU,CAAC,uBAAuB,gBAAgB,iBAAiB,aAAa,SAAS;AAAA,IACzF,iBAAiB;AAAA,IACjB,SAAS,YAAY;AACnB,gBAAU,cAAc,8BAA8B;AAEtD,YAAM,SAAS,MAAM,aAAa,WAAW;AAAA,QAC3C;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,aAAa,mBAAmB,UAAU;AAC5C,YAAI,OAAO,OAAO,WAAW,aAAa;AACxC,gBAAM,IAAI;AAAA,YACR,+BAA+B,mBAAmB,IAAI;AAAA,UACxD;AAAA,QACF;AAEA,YAAI,OAAO,OAAO,WAAW,UAAU;AACrC,8BAAoB,QAAQ,IAAI,mBAAmB,MAAM,OAAO,MAAM;AAAA,QACxE;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAED,QAAM,WACJ,MAAM,eACL,MAAM,eACF,mBAAmB,OAAO,KAAK,mBAAmB,WAAW,IAC9D,WACJ;AAEF,QAAM,CAAC,aAAa,cAAc,IAAU,eAA2C,CAAC,CAAC;AAEzF,QAAM,yBAA+B;AAAA,IACnC,OAAO,QAAsB,WAAyB;AACpD,YAAM,KAAK,OAAO,OAAO;AACzB,YAAM,SAAS,OAAO;AAAA,QACpB,OAAO,QAAQ,MAAM,EAAE,OAAO,CAAC,CAAC,KAAK,KAAK,MAAM,UAAU,OAAO,GAAG,CAAC;AAAA,MACvE;AAEA,YAAM,SAAS,OAAO,gBAAgB,IAAI,WAAW;AAErD,qBAAe,CAAC,cAAc,EAAE,GAAG,UAAU,CAAC,EAAE,GAAG,KAAK,EAAE;AAE1D,UAAI;AACF,YAAI,WAAW,UAAU;AACvB,cAAI;AACF;AAAA,cACE,cAAc;AAAA,cACd;AAAA,YACF;AACA,kBAAM,YAAY,MAAM,aAAa,aAAa,MAAM;AACxD,gBAAI,CAAC,WAAW;AACd,oBAAM,IAAI,MAAM,oCAAoC;AAAA,YACtD;AAEA,sBAAU,UAAU,OAAO,GAAG,iDAAiD;AAC/E,4BAAgB,EAAE,QAAQ,IAAI,UAAU,OAAO,EAAe,CAAC;AAC/D,mBAAO;AAAA,UACT,SAAS,OAAO;AACd,4BAAgB,EAAE,QAAQ,OAAO,UAAU,KAAK,EAAE,CAAC;AACnD,mBAAO;AAAA,UACT;AAAA,QACF,OAAO;AACL,cAAI;AACF;AAAA,cACE,cAAc;AAAA,cACd;AAAA,YACF;AACA,gBAAI,YAAY,MAAM,aAAa,aAAa,IAAI,MAAM;AAC1D,gBAAI,CAAC,YAAY,OAAO,GAAG;AACzB,sBAAQ,KAAK,iDAAiD;AAAA,YAChE;AACA,sCAAc;AACd,4BAAgB,EAAE,QAAQ,IAAI,UAAU,OAAO,EAAe,CAAC;AAC/D,mBAAO;AAAA,UACT,SAAS,OAAO;AACd,4BAAgB,EAAE,QAAQ,IAAI,OAAO,UAAU,KAAK,EAAE,CAAC;AACvD,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,UAAE;AACA,uBAAe,CAAC,aAAa;AAC3B,gBAAM,EAAE,CAAC,EAAE,GAAG,SAAS,GAAG,SAAS,IAAI;AACvC,iBAAO;AAAA,QACT,CAAC;AACD,oBAAY,IAAI;AAChB,cAAM,QAAQ;AAAA,MAChB;AAAA,IACF;AAAA,IACA,CAAC,cAAc,SAAS,SAAS,eAAe;AAAA,EAClD;AAEA,QAAM,aAAmB,cAAqD,MAAM;AAClF,QAAI,CAAC,cAAc,gBAAgB,CAAC,cAAc,gBAAgB,CAAC,cAAc,cAAc;AAC7F,aAAO;AAAA,IACT;AAEA,WAAO,CAAC,EAAE,IAAI,IAAI,MAAM;AACtB,YAAM,SAAS,CAAC;AAEhB,UAAI,aAAa,gBAAgB,aAAa,cAAc;AAC1D,cAAM,kBAAkB,cAAc,EAAE,GAAG,SAAS,aAAa;AACjE,cAAM,gBAAgB,YAAY,EAAE;AAEpC,cAAM,UAAU,IAAI,gBAAgB;AAEpC,YAAI,mBAAmB,eAAe;AACpC,iBAAO;AAAA,YACL;AAAA,cAAC;AAAA;AAAA,gBACC,KAAI;AAAA,gBACJ,MAAK;AAAA,gBACL,cAAY,mBAAmB,UAAU,YAAY,gBAAgB,EAAE,GAAG;AAAA,gBAC1E,UAAU;AAAA,gBACV,SAAS,YAAY;AACnB,mCAAiB,EAAE,GAAG,eAAe,CAAC,EAAE,GAAG,EAAE,MAAM,aAAa,KAAK,EAAE,CAAC;AAAA,gBAC1E;AAAA;AAAA,cAEC,gBAAgB,oCAAC,oBAAiB,MAAM,IAAI,IAAK,oCAAC,YAAS,UAAS,WAAU;AAAA,YACjF;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC,KAAI;AAAA,gBACJ,MAAK;AAAA,gBACL,cAAW;AAAA,gBACX,UAAU;AAAA,gBACV,SAAS,MAAM;AACb,mCAAiB;AAAA,oBACf,GAAG;AAAA,oBACH,CAAC,EAAE,GAAG,EAAE,MAAM,aAAa,MAAM,qBAAqB,KAAK;AAAA,kBAC7D,CAAC;AACD,8BAAY,IAAI;AAAA,gBAClB;AAAA;AAAA,cAEA,oCAAC,aAAU,UAAS,WAAU;AAAA,YAChC;AAAA,UACF;AAAA,QACF;AAEA,YAAI,CAAC,aAAa,aAAa,cAAc;AAC3C,iBAAO;AAAA,YACL;AAAA,cAAC;AAAA;AAAA,gBACC,KAAI;AAAA,gBACJ,SAAS,MAAM;AACb,mCAAiB,EAAE,GAAG,eAAe,CAAC,EAAE,GAAG,EAAE,MAAM,aAAa,KAAK,EAAE,CAAC;AAAA,gBAC1E;AAAA,gBACA,MAAK;AAAA,gBACL,cAAY,qBAAqB,EAAE;AAAA;AAAA,cAEnC,oCAAC,YAAS,UAAS,WAAU;AAAA,YAC/B;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,WAAW;AACd,YAAI,aAAa,cAAc;AAC7B,iBAAO;AAAA,YACL,oCAAC,gBAAa,KAAI,UAAS,IAAQ,cAA4B,SAAkB;AAAA,UACnF;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF,GAAG,CAAC,cAAc,WAAW,SAAS,eAAe,WAAW,CAAC;AAEjE,QAAM,OAAa,cAAsB,MAAM;AAC7C,QAAI,UAAU,MAAM,WAAW,CAAC;AAChC,QAAI,UAAU;AACZ,gBAAU,CAAC,UAAU,GAAG,OAAO;AAAA,IACjC;AACA,WAAO;AAAA,EACT,GAAG,CAAC,MAAM,SAAS,QAAQ,CAAC;AAE5B,MAAI,CAAC,gBAAgB;AACnB,WAAO,CAAC;AAAA,EACV;AAEA,MAAI,uBAAuB;AACzB,WAAO;AAAA,MACL,iBAAiB;AAAA,IACnB;AAAA,EACF;AAEA,MAAI,qBAAqB;AACvB,WAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,EACF;AAEA,YAAU,cAAc,2DAA2D;AAEnF,SAAO;AAAA,IACL,SAAS,aAAc,qBAAqB;AAAA,IAC5C,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,YAAY;AAAA,IACZ;AAAA,IACA,iBAAiB;AAAA,IACjB,wBAAwB,OAAO;AAC7B,4BAAsB,CAAC,cAAc;AACnC,YAAI,UAAU,aAAa,MAAM,UAAU;AACzC,iBAAO,EAAE,GAAG,OAAO,MAAM,EAAE;AAAA,QAC7B;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,IACA,aAAa;AAAA,IACb,qBAAqB;AAAA,IACrB,WAAW;AAAA,IACX,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA,uBAAuB,CAAC,UAAU,iBAAiB,KAAK;AAAA,IACxD,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,eAAe;AAAA,IACf,OAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,IACA,WAAW;AAAA,MACT,SAAS;AAAA,QACP,iBAAiB,CAAC,CAAC,aAAa;AAAA,QAChC,gBAAgB,CAAC,CAAC;AAAA,QAClB,eAAe,MAAM;AACnB,gBAAM,aAAa,OAAO,WAAW;AACrC,gBAAM,gBAAgB,gCAAgC,MAAM;AAC5D,gBAAM,yBAAyB,cAAc,UAAU,CAAC,UAAU,UAAU,OAAO;AACnF,gBAAM,eACJ,0BAA0B,IAAI,cAAc,sBAAsB,IAAI;AACxE,gBAAM,WAAW,0BAA0B,IAAI,yBAAyB;AACxE,sBAAY,EAAE,IAAI,YAAY,CAAC,gBAAgB,GAAG,KAAK,CAAC;AACxD,2BAAiB,CAAC,cAAc;AAAA,YAC9B,GAAG;AAAA,YACH,CAAC,UAAU,GAAG,EAAE,MAAM,aAAa,MAAM,aAAa;AAAA,UACxD,EAAE;AACF,iBAAO,QAAQ,gBAAgB,EAAE,UAAU,GAAG,SAAS,CAAC;AAAA,QAC1D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAQA,SAAS,cAAc,OAA4B;AACjD,MAAI,MAAM,OAAO;AACf,WAAO,oCAAC,gBAAa,IAAI,EAAE,QAAQ,OAAO,GAAG,OAAO,MAAM,OAAO;AAAA,EACnE;AAEA,SAAO,oCAAC,qBAAmB,GAAG,OAAO;AACvC;AAQA,SAAS,oBAAoB,EAAE,QAAQ,SAAS,OAAO,GAA6B;AAClF,QAAM,OAAO,CAAC,CAAC;AACf,QAAM,cAAc,QAAQ;AAE5B,EAAM,gBAAU,MAAM;AACpB,QAAI,aAAa;AAEf,cAAQ,MAAM,WAAW;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAEhB,QAAM,aAAa,UAAU,MAAM;AAEnC,MAAI,UAA2B;AAC/B,MAAI,YAAY;AACd,QAAI,WAAW,WAAW,UAAU;AAClC,UAAI,WAAW,OAAO;AACpB,kBAAU,8BAA8B,WAAW,MAAM,OAAO;AAAA,MAClE,OAAO;AACL,cAAM,QAAQ,OAAO,QAAQ,aAAa,EAAE,QAAQ,WAAW,EAAE;AACjE,cAAM,gBAAgB,gCAAgC,MAAM;AAC5D,cAAM,eAAmC,cAAc,CAAC;AACxD,YAAI,SAAS,KAAK,cAAc;AAC9B,oBACE,oCAAO,gBAAN,MAEC;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,OAAM;AAAA,cACN,SAAS,CAAC,UAAU;AAClB,sBAAM,eAAe;AACrB,uBAAO,QAAQ,gBAAgB,EAAE,UAAU,OAAO,UAAU,EAAE,CAAC;AAC/D,uBAAO,QAAQ,aAAa,WAAW,IAAI,YAAY;AAAA,cACzD;AAAA,cACA,cAAW;AAAA;AAAA,YACZ;AAAA,UAED,GAAQ,KAAI,sBAEd;AAAA,QAEJ,OAAO;AACL,oBAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF,WAAW,WAAW,WAAW,UAAU;AACzC,gBAAU,WAAW,QACjB,8BAA8B,WAAW,MAAM,OAAO,KACtD;AAAA,IACN,WAAW,WAAW,WAAW,UAAU;AACzC,gBAAU,WAAW,QACjB,8BAA8B,WAAW,MAAM,OAAO,KACtD;AAAA,IACN;AAAA,EACF;AAEA,SACE,oCAAC,OAAI,IAAI,EAAE,IAAI,GAAG,UAAU,YAAY,QAAQ,GAAG,MAAM,GAAG,OAAO,GAAG,GAAG,EAAE,KACzE;AAAA,IAAC;AAAA;AAAA,MACC,IAAI,EAAE,UAAU,WAAW;AAAA,MAC3B,cAAc,EAAE,UAAU,UAAU,YAAY,QAAQ;AAAA,MACxD;AAAA,MACA,kBAAkB;AAAA,MAClB;AAAA,MACA,QACE,oCAAC,cAAW,MAAK,SAAQ,cAAW,SAAQ,OAAM,WAAU,SAAS,WACnE,oCAAC,aAAU,UAAS,WAAU,CAChC;AAAA;AAAA,IAGF,oCAAC,SAAM,UAAU,YAAY,QAAQ,UAAU,WAAW,WACvD,OACH;AAAA,EACF,CACF;AAEJ;AAEA,SAAS,uBAAuB,EAAE,MAAM,GAAkB;AACxD,SAAO,oCAAC,wBAAa,OAAc;AACrC;AAEA,IAAM,oBAA0B,iBAAW,SAASA,mBAClD;AAAA,EACE,SAAS;AAAA,EACT,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GACA,KACA;AACA,QAAM,SAAS,cAAc;AAC7B,QAAM,CAAC,cAAc,eAAe,IAAU,eAA8B,IAAI;AAEhF,QAAM,aAAa,kBAAkB;AAErC,QAAM;AAAA,IACJ,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,WAAW;AAAA,IACX,GAAG;AAAA,EACL,IAAI;AAAA,IACF,eAAe,iBAAiB,iBAAiB;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,cAAc,QAA8B;AAElD,QAAM,eAAqB;AAAA,IACzB,MACE,SAAS,CAAC,WAAmC;AAC3C,UAAI,CAAC,aAAa;AAChB;AAAA,MACF;AAEA,kBAAY;AAAA,QAAsB;AAAA,QAAW,CAACC,aAC5CA,UAAS;AAAA,UAAI,CAAC,WACZ,OAAO,UAAU,OAAO,OAAO,QAAQ,EAAE,GAAG,QAAQ,OAAO,OAAO,MAAM,IAAI;AAAA,QAC9E;AAAA,MACF;AAAA,IACF,GAAG,GAAG;AAAA,IACR,CAAC,WAAW;AAAA,EACd;AACA,EAAM,gBAAU,MAAM,aAAa,MAAM,GAAG,CAAC,YAAY,CAAC;AAE1D,QAAM,0BAAgC;AAAA,IACpC,MACE,SAAS,CAAC,WAAwC;AAChD,UAAI,CAAC,aAAa;AAChB;AAAA,MACF;AAEA,kBAAY,sBAAsB,WAAW,CAACA,aAAY;AACxD,YAAI,CAACA,UAAS;AACZ,iBAAOA;AAAA,QACT;AACA,cAAM,MAAMA,SAAQ,KAAK,CAAC,WAAW,OAAO,UAAU,OAAO,OAAO,KAAK;AACzE,YAAI,CAAC,KAAK;AACR,iBAAOA;AAAA,QACT;AACA,cAAM,aAAaA,SAAQ,OAAO,CAAC,WAAW,OAAO,UAAU,OAAO,OAAO,KAAK;AAClF,eAAO;AAAA,UACL,GAAG,WAAW,MAAM,GAAG,OAAO,WAAW;AAAA,UACzC;AAAA,UACA,GAAG,WAAW,MAAM,OAAO,WAAW;AAAA,QACxC;AAAA,MACF,CAAC;AAAA,IACH,GAAG,GAAG;AAAA,IACR,CAAC,WAAW;AAAA,EACd;AACA,EAAM,gBAAU,MAAM,wBAAwB,MAAM,GAAG,CAAC,uBAAuB,CAAC;AAEhF,MAAI;AACJ,MAAI,eAAe,gBAAgB;AACjC,gBAAY,yBAAyB;AAAA,EACvC,OAAO;AACL,gBAAY,YAAY;AAAA,EAC1B;AAEA,QAAM,mBAAkC,cAAQ,MAAM;AACpD,UAAM,gBAAyB,CAAC,EAAE,kBAAkB,mBAAmB;AACvE,WAAO,iBAAiB,UAAU,WAAW,KAAK,UAAU,CAAC,EAAE,OAAO;AAAA,EACxE,GAAG,CAAC,gBAAgB,SAAS,CAAC;AAE9B,QAAM,OAA2B;AAAA,IAC/B,MAAO,mBAAmB,YAAY,UAAU,IAAI,CAAC,KAAK,QAAQ,EAAE,GAAG,KAAK,GAAG,EAAE;AAAA,IACjF,CAAC,kBAAkB,SAAS;AAAA,EAC9B;AAEA,QAAM,iBAAuB,aAAO,KAAK;AACzC,QAAM,oBAAoB,eAAe,YAAY,SAAS;AAE9D,EAAM,gBAAU,MAAM;AACpB,QAAI,CAAC,eAAe,qBAAqB,KAAK,UAAU,KAAK,eAAe,SAAS;AACnF;AAAA,IACF;AAEA,QAAI,kBAAkB,aAAa,IAAI;AAEvC,QAAI,CAAC,kBAAkB;AACrB,wBAAkB,gBAAgB,OAAO,CAAC,WAAW,OAAO,UAAU,IAAI;AAAA,IAC5E;AAEA,gBAAY,sBAAsB,WAAW,eAAe;AAE5D,mBAAe,UAAU;AAAA,EAC3B,GAAG,CAAC,mBAAmB,MAAM,aAAa,gBAAgB,CAAC;AAE3D,QAAM,WAAiB;AAAA,IACrB,CAAC,QAAa;AACZ,aAAO,kBAAkB,IAAI,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI;AAAA,IAC3E;AAAA,IACA,CAAC,cAAc;AAAA,EACjB;AAEA,QAAM,yBAA+B;AAAA,IACnC,CAAC,QAA+B;AAC9B,0BAAoB,IAAI,SAAS,IAAI,KAAK,KAAK,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,IAAI,IAAI;AAAA,IACnF;AAAA,IACA,CAAC,MAAM,iBAAiB;AAAA,EAC1B;AAEA,QAAM,iBAAuB;AAAA,IAC3B,MAAO,WAAW,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC;AAAA,IACzC,CAAC,WAAW,EAAE;AAAA,EAChB;AAEA,QAAM,UAA8B;AAAA,IAClC,MAAO,cAAc,aAAa,WAAW,IAAI,CAAC;AAAA,IAClD,CAAC,WAAW;AAAA,EACd;AAEA,EAAM,gBAAU,MAAM;AACpB,WAAO,QAAQ,cAAc,OAAO;AAAA,EACtC,GAAG,CAAC,QAAQ,OAAO,CAAC;AAGpB,QAAM,UAAgB;AAAA,IACpB,MAAM,CAAC,aAAa,QAAQ,GAAG,aAAa,OAAO,CAAC,EAAE,KAAK,IAAI;AAAA,IAC/D,CAAC,UAAU,OAAO;AAAA,EACpB;AAEA,MAAI,kBAAgC;AACpC,MAAI,mBAAmB,iBAAiB;AACtC,sBAAkB,UAAU,kBAAkB,eAAe;AAAA,EAC/D,WAAW,WAAW;AACpB,sBAAkB,UAAU,SAAS;AAAA,EACvC;AAEA,EAAM,gBAAU,MAAM;AACpB,iBAAa,qBAAqB,WAAW,IAAI;AAAA,EACnD,GAAG,CAAC,aAAa,IAAI,CAAC;AAEtB,QAAM,kBAAwB,cAAsB,MAAM;AACxD,UAAM,SAAS,CAAC,GAAG,OAAO;AAE1B,QAAI,oBAAoB;AACtB,aAAO,KAAK;AAAA,QACV,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,QACX,UAAU;AAAA,QACV,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,SAAS,kBAAkB,CAAC;AAEhC,QAAM,UAAU,WAAW;AAC3B,QAAM,YAAY,QAAQ,SAAS;AAEnC,QAAM,wBAAwB,OAAO;AAAA,KAClC,eAAe,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,OAAO,OAAO,WAAW,IAAI,CAAC;AAAA,EAC5E;AAEA,QAAM,gBAA8C,cAAQ,MAAM;AAChE,UAAM,UAAU,eAAe,CAAC,GAAG,OAA+B,CAAC,KAAK,WAAW;AAzxCvF;AA0xCM,UAAI,OAAO,KAAK;AACd,iBAAI,OAAO,SAAX,UAAoB,CAAC;AACrB,YAAI,OAAO,GAAG,GAAG,KAAK,OAAO,KAAK;AAAA,MACpC;AACA,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AACL,WAAO,UAAP,OAAO,QAAU,CAAC;AAClB,WAAO,MAAM,KAAK,oBAAoB;AACtC,WAAO;AAAA,EACT,GAAG,CAAC,WAAW,CAAC;AAEhB,SACE,oCAAC,uBAAoB,MAAM,gBACzB,oCAAC,gBAAa,KAAU,MACtB,oCAAC,iBAAc,gBAAgB,wBAAwB,WAAW,CAAC,IAAI,KACrE,oCAAC,uBAAuB,UAAvB,EAAgC,OAAO,mBACtC;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,OAAO;AAAA,QACL,GAAG;AAAA,QACH,gBAAgB;AAAA,QAChB,eAAe;AAAA,QACf,SAAS,cAAc,OAAO,mBAAmB;AAAA,MACnD;AAAA,MACA,WAAW;AAAA,QACT,eAAe;AAAA,UACb,OAAO;AAAA,QACT;AAAA,QACA,GAAG;AAAA,MACL;AAAA,MACA,gBAAgB;AAAA,MAChB,qBAAqB;AAAA,MACrB;AAAA,MACA,SAAS;AAAA,MACT,KAAK;AAAA,MACL;AAAA,MACA,2BAA2B;AAAA,MAC3B,mBAAmB;AAAA,MACnB,cAAc;AAAA,QACZ,SAAS,EAAE,sBAAsB;AAAA,QACjC;AAAA,MACF;AAAA,MACA,oBAAoB,CAAC;AAAA,MACrB,oBAAoB,CAAC;AAAA,MACrB,sBAAsB,CAAC;AAAA,MACtB,GAAG;AAAA,MACH,GAAG;AAAA,MACJ,IAAI;AAAA,QACF,QAAQ;AAAA,MACV;AAAA;AAAA,EACF,CACF,CACF,GAEA;AAAA,IAAC;AAAA;AAAA,MACC,QAAQ;AAAA,MACR,SAAS,MAAM,gBAAgB,IAAI;AAAA,MACnC;AAAA;AAAA,EACF,CACF,CACF;AAEJ,CAAC;AAED,IAAO,mBAAQ,cAAc,mBAAmB;AAAA,EAC9C,YACE;AAAA,EACF,WAAW;AAAA,EACX,mBAAmB,CAAC,QAAQ,SAAS;AAAA,EACrC,aAAa;AAAA,EACb,qBAAqB;AAAA,EACrB,qBAAqB;AAAA,EACrB,UAAU;AAAA,IACR,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,MAAM,CAAC,QAAQ,cAAc;AAAA,MAC7B,YAAY;AAAA,QACV,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,MACA,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS,EAAE,MAAM,iBAAiB,UAAU,MAAM;AAAA,IACpD;AAAA,IACA,MAAM;AAAA,MACJ,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,UACL,MAAM;AAAA,UACN,sBAAsB;AAAA,UACtB,YAAY;AAAA,YACV,IAAI;AAAA,cACF,MAAM;AAAA,YACR;AAAA,UACF;AAAA,UACA,UAAU,CAAC,IAAI;AAAA,QACjB;AAAA,MACF;AAAA,MACA,SAAS,CAAC,EAAE,WAAW,MAA4B,eAAe;AAAA,IACpE;AAAA,IACA,gBAAgB;AAAA,MACd,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,EAAE,MAAM,wBAAwB,UAAU,MAAM;AAAA,MACzD,SAAS,CAAC,EAAE,WAAW,MAA4B,eAAe;AAAA,IACpE;AAAA,IACA,SAAS;AAAA,MACP,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,UACL,MAAM;AAAA,UACN,sBAAsB;AAAA,UACtB,YAAY;AAAA,YACV,OAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,YACA,OAAO;AAAA,cACL,MAAM;AAAA,cACN,MAAM,CAAC,UAAU,SAAS,MAAM;AAAA,YAClC;AAAA,UACF;AAAA,UACA,UAAU,CAAC,OAAO;AAAA,QACpB;AAAA,MACF;AAAA,MACA,SAAS,EAAE,MAAM,eAAe,UAAU,MAAM;AAAA,IAClD;AAAA,IACA,YAAY;AAAA,MACV,YACE;AAAA,MACF,MAAM;AAAA,MACN,SAAS,EAAE,MAAM,mBAAmB;AAAA,MACpC,OAAO;AAAA,IACT;AAAA,IACA,WAAW;AAAA,MACT,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,MACT,cAAc;AAAA,MACd,QAAQ;AAAA,IACV;AAAA,IACA,SAAS;AAAA,MACP,YACE;AAAA,MACF,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,YAAY,aAAa;AAAA,MAC3C,SAAS;AAAA,IACX;AAAA,IACA,SAAS;AAAA,MACP,YACE;AAAA,MACF,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,IACA,IAAI;AAAA,MACF,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;","names":["DataGridComponent","columns"]}