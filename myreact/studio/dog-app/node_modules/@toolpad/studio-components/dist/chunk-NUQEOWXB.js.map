{"version":3,"sources":["../src/Metric.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Skeleton, Typography, Paper } from '@mui/material';\nimport {\n  NumberFormat,\n  createFormat,\n  NUMBER_FORMAT_SCHEMA,\n  FormattedNumber,\n} from '@toolpad/studio-runtime/numberFormat';\nimport createBuiltin from './createBuiltin';\n\nexport interface ColorScaleStop {\n  value: number;\n  color?: string;\n}\n\nexport interface ColorScale {\n  base?: string;\n  stops?: ColorScaleStop[];\n}\n\ninterface MetricProps {\n  value: number;\n  loading?: boolean;\n  numberFormat?: NumberFormat;\n  label?: string;\n  caption?: string;\n  conditionalFormat?: ColorScale;\n  fullWidth?: boolean;\n}\n\nfunction resolveColor(colorScale: ColorScale, value: number) {\n  const { base, stops = [] } = colorScale;\n  let stopValue: number = -Infinity;\n  let color = base;\n\n  for (const stop of stops) {\n    if (stop.value > stopValue && value > stop.value) {\n      stopValue = stop.value;\n      color = stop.color;\n    }\n  }\n\n  return color;\n}\n\nfunction Metric({\n  fullWidth,\n  conditionalFormat,\n  loading,\n  value,\n  numberFormat,\n  label,\n  caption,\n}: MetricProps) {\n  const format = React.useMemo(() => createFormat(numberFormat), [numberFormat]);\n\n  const color = React.useMemo(\n    () => (conditionalFormat ? resolveColor(conditionalFormat, value) : undefined),\n    [conditionalFormat, value],\n  );\n\n  return (\n    <Paper sx={{ p: 2, minWidth: 160, width: fullWidth ? '100%' : undefined }}>\n      <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom noWrap>\n        {label}\n      </Typography>\n      <Typography variant=\"h5\" component=\"div\" color={color} noWrap>\n        {loading ? (\n          <Skeleton variant=\"text\" />\n        ) : (\n          <FormattedNumber format={format}>{value}</FormattedNumber>\n        )}\n      </Typography>\n      <Typography variant=\"body2\" noWrap>\n        {caption}\n      </Typography>\n    </Paper>\n  );\n}\n\nexport default createBuiltin(Metric, {\n  helperText:\n    'The Metric component can be used to display a single numerical value. it supports multiple numerical formats such as bytes, currency, percentage... It also supports conditional formatting to adapt the color based on the numerical value.',\n  loadingPropSource: ['value'],\n  loadingProp: 'loading',\n  argTypes: {\n    label: {\n      helperText: 'The label to be displayed.',\n      type: 'string',\n      default: 'label',\n    },\n    value: {\n      helperText: 'The value to be displayed.',\n      type: 'number',\n      default: 0,\n    },\n    numberFormat: {\n      helperText: 'The number format for the value.',\n      label: 'Number format',\n      type: 'object',\n      schema: NUMBER_FORMAT_SCHEMA,\n      control: {\n        type: 'NumberFormat',\n      },\n    },\n    caption: {\n      helperText: 'The caption to be displayed.',\n      type: 'string',\n      default: '',\n    },\n    conditionalFormat: {\n      helperText: 'The color of the number, dependent on the value.',\n      label: 'Conditional format',\n      type: 'object',\n      schema: {\n        type: 'object',\n        properties: {\n          base: {\n            type: 'string',\n          },\n          stops: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                value: {\n                  type: 'number',\n                },\n                color: {\n                  type: 'string',\n                },\n              },\n              required: ['value', 'color'],\n            },\n          },\n        },\n        required: ['base', 'stops'],\n      },\n      control: {\n        type: 'ColorScale',\n      },\n    },\n    fullWidth: {\n      helperText: 'Whether the button should occupy all available horizontal space.',\n      type: 'boolean',\n    },\n  },\n});\n"],"mappings":";;;;;AAAA,YAAY,WAAW;AACvB,SAAS,UAAU,YAAY,aAAa;AAC5C;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAuBP,SAAS,aAAa,YAAwB,OAAe;AAC3D,QAAM,EAAE,MAAM,QAAQ,CAAC,EAAE,IAAI;AAC7B,MAAI,YAAoB;AACxB,MAAI,QAAQ;AAEZ,aAAW,QAAQ,OAAO;AACxB,QAAI,KAAK,QAAQ,aAAa,QAAQ,KAAK,OAAO;AAChD,kBAAY,KAAK;AACjB,cAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAEA,SAAO;AACT;AAEA,SAAS,OAAO;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAgB;AACd,QAAM,SAAe,cAAQ,MAAM,aAAa,YAAY,GAAG,CAAC,YAAY,CAAC;AAE7E,QAAM,QAAc;AAAA,IAClB,MAAO,oBAAoB,aAAa,mBAAmB,KAAK,IAAI;AAAA,IACpE,CAAC,mBAAmB,KAAK;AAAA,EAC3B;AAEA,SACE,oCAAC,SAAM,IAAI,EAAE,GAAG,GAAG,UAAU,KAAK,OAAO,YAAY,SAAS,OAAU,KACtE,oCAAC,cAAW,IAAI,EAAE,UAAU,GAAG,GAAG,OAAM,kBAAiB,cAAY,MAAC,QAAM,QACzE,KACH,GACA,oCAAC,cAAW,SAAQ,MAAK,WAAU,OAAM,OAAc,QAAM,QAC1D,UACC,oCAAC,YAAS,SAAQ,QAAO,IAEzB,oCAAC,mBAAgB,UAAiB,KAAM,CAE5C,GACA,oCAAC,cAAW,SAAQ,SAAQ,QAAM,QAC/B,OACH,CACF;AAEJ;AAEA,IAAO,iBAAQ,cAAc,QAAQ;AAAA,EACnC,YACE;AAAA,EACF,mBAAmB,CAAC,OAAO;AAAA,EAC3B,aAAa;AAAA,EACb,UAAU;AAAA,IACR,OAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,cAAc;AAAA,MACZ,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,mBAAmB;AAAA,MACjB,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,YAAY;AAAA,UACV,MAAM;AAAA,YACJ,MAAM;AAAA,UACR;AAAA,UACA,OAAO;AAAA,YACL,MAAM;AAAA,YACN,OAAO;AAAA,cACL,MAAM;AAAA,cACN,YAAY;AAAA,gBACV,OAAO;AAAA,kBACL,MAAM;AAAA,gBACR;AAAA,gBACA,OAAO;AAAA,kBACL,MAAM;AAAA,gBACR;AAAA,cACF;AAAA,cACA,UAAU,CAAC,SAAS,OAAO;AAAA,YAC7B;AAAA,UACF;AAAA,QACF;AAAA,QACA,UAAU,CAAC,QAAQ,OAAO;AAAA,MAC5B;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,YAAY;AAAA,MACZ,MAAM;AAAA,IACR;AAAA,EACF;AACF,CAAC;","names":[]}