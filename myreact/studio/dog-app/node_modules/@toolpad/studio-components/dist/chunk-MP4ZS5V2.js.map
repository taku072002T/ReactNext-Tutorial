{"version":3,"sources":["../src/Autocomplete.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Autocomplete as MuiAutocomplete,\n  AutocompleteProps as MuiAutocompleteProps,\n  styled,\n  TextField,\n} from '@mui/material';\nimport createBuiltin from './createBuiltin';\nimport { SX_PROP_HELPER_TEXT } from './constants';\nimport {\n  FORM_INPUT_ARG_TYPES,\n  FormInputComponentProps,\n  useFormInput,\n  withComponentForm,\n} from './Form';\n\nconst ToolpadMuiAutocomplete = styled(MuiAutocomplete<AutocompleteOption, false>, {\n  shouldForwardProp: (prop) => prop !== 'hasWidth',\n})<{\n  hasWidth?: boolean;\n}>(({ hasWidth }) => ({\n  width: hasWidth ? 120 : '100%',\n}));\n\ntype AutocompleteOption = string | { label?: string; value?: string };\ntype AutocompleteValue = string | null;\n\ninterface AutocompleteProps\n  extends Omit<\n      MuiAutocompleteProps<AutocompleteOption, false, false, false>,\n      'renderInput' | 'value' | 'onChange'\n    >,\n    Pick<FormInputComponentProps, 'name' | 'isRequired' | 'minLength' | 'maxLength'> {\n  value: AutocompleteValue;\n  onChange: (newValue: AutocompleteValue) => void;\n  label?: string;\n  defaultValue: string;\n  options: AutocompleteOption[];\n}\n\nfunction Autocomplete({\n  options,\n  label,\n  onChange,\n  value,\n  defaultValue,\n  isRequired,\n  minLength,\n  maxLength,\n  sx,\n  ...rest\n}: AutocompleteProps) {\n  const { onFormInputChange, formInputError, renderFormInput } = useFormInput<string | null>({\n    name: rest.name,\n    label,\n    value,\n    onChange,\n    emptyValue: null,\n    defaultValue,\n    validationProps: { isRequired, minLength, maxLength },\n  });\n\n  const getValue = React.useCallback((selection: AutocompleteOption | null): AutocompleteValue => {\n    if (!selection) {\n      return null;\n    }\n    if (typeof selection === 'string') {\n      return selection;\n    }\n    if (typeof selection === 'object') {\n      return selection?.value ?? selection?.label ?? null;\n    }\n    return null;\n  }, []);\n\n  const getOptionLabel = React.useCallback((option: AutocompleteOption) => {\n    if (!option) {\n      return '';\n    }\n    if (typeof option === 'string') {\n      return option;\n    }\n    if (typeof option === 'object') {\n      return option?.label ?? '';\n    }\n    return '';\n  }, []);\n\n  const handleChange = React.useCallback(\n    (event: React.SyntheticEvent<Element>, selection: AutocompleteOption | null) => {\n      const newValue: AutocompleteValue = getValue(selection);\n      onFormInputChange(newValue);\n    },\n    [getValue, onFormInputChange],\n  );\n\n  const hasWidth = !rest.fullWidth && !value;\n\n  return renderFormInput(\n    <ToolpadMuiAutocomplete\n      onChange={handleChange}\n      options={options ?? []}\n      isOptionEqualToValue={(option, selectedValue) => getValue(option) === getValue(selectedValue)}\n      getOptionLabel={getOptionLabel}\n      value={value}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          variant=\"outlined\"\n          {...(formInputError && {\n            error: Boolean(formInputError),\n            helperText: formInputError.message || '',\n          })}\n        />\n      )}\n      hasWidth={hasWidth}\n      sx={sx}\n      {...rest}\n    />,\n  );\n}\n\nconst FormWrappedAutocomplete = withComponentForm(Autocomplete);\n\nexport default createBuiltin(FormWrappedAutocomplete, {\n  helperText:\n    'A text input with autocomplete suggestions. Uses the Material UI [Autocomplete](https://mui.com/material-ui/react-autocomplete/) under the hood',\n  layoutDirection: 'both',\n  loadingProp: 'loading',\n  argTypes: {\n    options: {\n      helperText: 'The options available to search from.',\n      type: 'array',\n      default: [],\n      control: {\n        type: 'SelectOptions',\n      },\n    },\n    value: {\n      helperText: 'The value of the autocomplete.',\n      type: 'string',\n      onChangeProp: 'onChange',\n      default: '',\n      defaultValueProp: 'defaultValue',\n    },\n    defaultValue: {\n      helperText: 'A default value.',\n      type: 'string',\n      default: '',\n    },\n    label: {\n      helperText: 'The label to display for the autocomplete.',\n      type: 'string',\n      default: 'Search…',\n    },\n    fullWidth: {\n      helperText: 'If true, the autocomplete will take up the full width of its container.',\n      type: 'boolean',\n    },\n    size: {\n      helperText: 'The size of the autocomplete. One of `small`, `medium`, or `large`.',\n      type: 'string',\n      enum: ['small', 'medium', 'large'],\n      default: 'small',\n    },\n    loading: {\n      helperText: 'If true, the autocomplete will display a loading indicator.',\n      type: 'boolean',\n    },\n    disabled: {\n      helperText: 'If true, the autocomplete will be disabled.',\n      type: 'boolean',\n    },\n    ...FORM_INPUT_ARG_TYPES,\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n  },\n});\n"],"mappings":"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","names":[]}