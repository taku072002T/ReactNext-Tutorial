{"version":3,"sources":["../src/Chart.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { CircularProgress, BoxProps, styled } from '@mui/material';\n\nimport {\n  BarPlot,\n  LinePlot,\n  AreaPlot,\n  ScatterPlot,\n  MarkPlot,\n  BarSeriesType,\n  LineSeriesType,\n  ScatterSeriesType,\n  ScaleName,\n} from '@mui/x-charts';\nimport { ResponsiveChartContainer } from '@mui/x-charts/ResponsiveChartContainer';\nimport { ChartsXAxis } from '@mui/x-charts/ChartsXAxis';\nimport { ChartsYAxis } from '@mui/x-charts/ChartsYAxis';\nimport { ChartsLegend } from '@mui/x-charts/ChartsLegend';\nimport { ChartsTooltip } from '@mui/x-charts/ChartsTooltip';\nimport { ChartsAxisHighlight } from '@mui/x-charts/ChartsAxisHighlight';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport createBuiltin from './createBuiltin';\nimport ErrorOverlay from './components/ErrorOverlay';\nimport { SX_PROP_HELPER_TEXT } from './constants';\n\nconst ChartRoot = styled('div')({\n  position: 'relative',\n  height: '100%',\n  width: '100%',\n});\n\ntype ChartDataSeriesKind = 'line' | 'bar' | 'area' | 'scatter';\n\nexport const CHART_DATA_SERIES_KINDS: ChartDataSeriesKind[] = ['line', 'bar', 'area', 'scatter'];\n\nexport interface ChartDataSeries<D = Record<string, string | number>> {\n  kind: ChartDataSeriesKind;\n  label: string;\n  data?: D[];\n  xKey?: keyof D;\n  yKey?: keyof D;\n  color?: string;\n}\n\nexport type ChartData = ChartDataSeries[];\n\nfunction hasOnlyNumbers(array: unknown[]): boolean {\n  return array.every((item) => typeof item === 'number');\n}\n\nfunction getChartType(kind: ChartDataSeriesKind): 'line' | 'bar' | 'scatter' {\n  switch (kind) {\n    case 'bar':\n      return 'bar';\n    case 'scatter':\n      return 'scatter';\n    default:\n      return 'line';\n  }\n}\n\ninterface ChartProps extends BoxProps {\n  data?: ChartData;\n  loading?: boolean;\n  error?: Error | string;\n}\n\nfunction Chart({ data = [], loading, error, sx }: ChartProps) {\n  const hasData =\n    data.length > 0 &&\n    data.some((dataSeries) => (dataSeries.data ? dataSeries.data.length > 0 : false));\n\n  const xValues = React.useMemo(\n    () =>\n      data\n        .flatMap((dataSeries) => {\n          if (!dataSeries.xKey || !dataSeries.data) {\n            return [];\n          }\n          return dataSeries.data.map((dataSeriesPoint) => dataSeriesPoint[dataSeries.xKey!]);\n        })\n        .filter((value, index, array) => value !== undefined && array.indexOf(value) === index)\n        .sort((a: number | string, b: number | string) => {\n          if (typeof a === 'number' && typeof b === 'number') {\n            return (a as number) - (b as number);\n          }\n          return 0;\n        }),\n    [data],\n  );\n\n  const chartSeries: (BarSeriesType | LineSeriesType | ScatterSeriesType)[] = React.useMemo(\n    () =>\n      data\n        .filter((dataSeries) => dataSeries.xKey && dataSeries.yKey)\n        .map((dataSeries) => {\n          const yValues = xValues.map((xValue) => {\n            const point = (dataSeries.data || []).find(\n              (dataSeriesPoint) => dataSeriesPoint[dataSeries.xKey!] === xValue,\n            );\n\n            return (point && point[dataSeries.yKey!]) || 0;\n          });\n\n          const chartType = getChartType(dataSeries.kind);\n\n          const baseProps = {\n            type: chartType,\n            xAxisKey: 'x',\n            yAxisKey: dataSeries.yKey,\n            label: dataSeries.label,\n            color: dataSeries.color,\n          };\n\n          if (chartType === 'scatter') {\n            return {\n              ...baseProps,\n              data: yValues.map((y, index) => ({\n                x: xValues[index],\n                y,\n                id: `${dataSeries.yKey}-${index}`,\n              })),\n            } as ScatterSeriesType;\n          }\n          if (chartType === 'line') {\n            return {\n              ...baseProps,\n              data: yValues,\n              area: dataSeries.kind === 'area',\n            } as LineSeriesType;\n          }\n\n          return {\n            ...baseProps,\n            data: yValues,\n          } as BarSeriesType;\n        })\n        .filter((dataSeries) => dataSeries.data && dataSeries.data.length > 0),\n    [data, xValues],\n  );\n\n  const displayError = error ? errorFrom(error) : null;\n\n  const isDataVisible = !loading && !displayError;\n\n  const hasBarCharts = chartSeries.some(\n    (dataSeries) => dataSeries.type === 'bar' && dataSeries.data && hasOnlyNumbers(dataSeries.data),\n  );\n  const hasLineCharts = chartSeries.some(\n    (dataSeries) =>\n      dataSeries.type === 'line' && dataSeries.data && hasOnlyNumbers(dataSeries.data),\n  );\n  const hasAreaCharts = chartSeries.some(\n    (dataSeries) =>\n      dataSeries.type === 'line' &&\n      dataSeries.data &&\n      hasOnlyNumbers(dataSeries.data) &&\n      dataSeries.area,\n  );\n  const hasScatterCharts = chartSeries.some(\n    (dataSeries) =>\n      dataSeries.type === 'scatter' &&\n      dataSeries.data &&\n      hasOnlyNumbers(dataSeries.data.map((point) => point.x)) &&\n      hasOnlyNumbers(dataSeries.data.map((point) => point.y)),\n  );\n\n  const hasOnlyNumberXValues = hasOnlyNumbers(xValues);\n\n  let xScaleType: ScaleName = 'point';\n  if (hasBarCharts) {\n    xScaleType = 'band';\n  }\n\n  const firstDataSeries = chartSeries[0];\n\n  return (\n    <ChartRoot sx={sx} aria-busy={loading}>\n      {displayError ? <ErrorOverlay error={displayError} /> : null}\n      {loading && !error ? (\n        <div\n          style={{\n            position: 'absolute',\n            inset: '0 0 0 0',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <CircularProgress />\n        </div>\n      ) : null}\n      {isDataVisible ? (\n        <ResponsiveChartContainer\n          series={chartSeries}\n          xAxis={[\n            {\n              id: 'x',\n              data: xValues,\n              scaleType: xScaleType,\n              min: hasOnlyNumberXValues ? Math.min(...(xValues as number[])) : undefined,\n              max: hasOnlyNumberXValues ? Math.max(...(xValues as number[])) : undefined,\n            },\n          ]}\n          yAxis={\n            firstDataSeries\n              ? chartSeries.map((dataSeries) => ({\n                  id: dataSeries?.yAxisKey || 'y',\n                  scaleType: 'linear',\n                }))\n              : [\n                  {\n                    id: 'y',\n                    scaleType: 'linear',\n                  },\n                ]\n          }\n          margin={{ left: 80, top: 60 }}\n          sx={{\n            '.MuiMarkElement-root': {\n              scale: '0.8',\n            },\n          }}\n        >\n          <ChartsXAxis position=\"bottom\" axisId=\"x\" />\n          <ChartsYAxis\n            key={firstDataSeries?.yAxisKey || 'y'}\n            position=\"left\"\n            axisId={firstDataSeries?.yAxisKey || 'y'}\n          />\n          {hasBarCharts ? <BarPlot /> : null}\n          {hasAreaCharts ? <AreaPlot /> : null}\n          {hasLineCharts ? (\n            <React.Fragment>\n              <LinePlot />\n              <MarkPlot />\n            </React.Fragment>\n          ) : null}\n          {hasScatterCharts ? <ScatterPlot /> : null}\n          {hasData ? (\n            <React.Fragment>\n              <ChartsLegend />\n              <ChartsTooltip />\n              <ChartsAxisHighlight x={hasBarCharts ? 'band' : 'line'} />\n            </React.Fragment>\n          ) : null}\n        </ResponsiveChartContainer>\n      ) : null}\n    </ChartRoot>\n  );\n}\n\nexport default createBuiltin(Chart, {\n  helperText: 'A chart component.',\n  loadingProp: 'loading',\n  loadingPropSource: ['data'],\n  errorProp: 'error',\n  defaultLayoutHeight: 360,\n  minimumLayoutHeight: 100,\n  argTypes: {\n    data: {\n      helperText: 'The data to be displayed.',\n      type: 'array',\n      schema: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            kind: {\n              type: 'string',\n              enum: CHART_DATA_SERIES_KINDS,\n              default: 'line',\n            },\n            label: {\n              type: 'string',\n            },\n            data: {\n              type: 'object',\n              default: [],\n            },\n            xKey: {\n              type: 'string',\n            },\n            yKey: {\n              type: 'string',\n            },\n            color: {\n              type: 'string',\n            },\n          },\n        },\n      },\n      control: { type: 'ChartData', bindable: false },\n    },\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n  },\n});\n"],"mappings":"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","names":[]}