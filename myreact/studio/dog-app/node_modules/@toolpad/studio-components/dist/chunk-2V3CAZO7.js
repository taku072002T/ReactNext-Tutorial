import {
  FORM_INPUT_ARG_TYPES,
  useFormInput,
  withComponentForm
} from "./chunk-ER3UTRTB.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";
import {
  createBuiltin
} from "./chunk-5BNQEU2R.js";

// src/Select.tsx
import * as React from "react";
import { MenuItem, TextField, styled } from "@mui/material";
var ToolpadTextField = styled(TextField)({
  minWidth: 120
});
function Select({
  options,
  value,
  onChange,
  fullWidth,
  sx,
  defaultValue,
  isRequired,
  ...rest
}) {
  const { onFormInputChange, formInputError, renderFormInput } = useFormInput({
    name: rest.name,
    label: rest.label,
    value,
    onChange,
    defaultValue,
    validationProps: { isRequired }
  });
  const id = React.useId();
  const handleChange = React.useCallback(
    (event) => {
      const newValue = event.target.value;
      onFormInputChange(newValue);
    },
    [onFormInputChange]
  );
  const renderedOptions = React.useMemo(
    () => options.map((option, i) => {
      const parsedOption = option && typeof option === "object" ? option : { value: String(option) };
      return /* @__PURE__ */ React.createElement(MenuItem, { key: parsedOption.value ?? `${id}::${i}`, value: parsedOption.value }, String(parsedOption.label ?? parsedOption.value));
    }),
    [id, options]
  );
  return renderFormInput(
    /* @__PURE__ */ React.createElement(
      ToolpadTextField,
      {
        ...rest,
        value,
        onChange: handleChange,
        select: true,
        fullWidth,
        sx,
        ...formInputError && {
          error: Boolean(formInputError),
          helperText: formInputError.message || ""
        }
      },
      renderedOptions
    )
  );
}
var FormWrappedSelect = withComponentForm(Select);
var Select_default = createBuiltin(FormWrappedSelect, {
  helperText: "The Material\xA0UI [Select](https://mui.com/material-ui/react-select/) component lets you select a value from a set of options.",
  layoutDirection: "both",
  loadingPropSource: ["value", "options"],
  loadingProp: "disabled",
  argTypes: {
    options: {
      helperText: "The available options to select from.",
      type: "array",
      schema: {
        type: "array",
        items: {
          type: ["object", "string"],
          additionalProperties: true,
          properties: {
            value: {
              type: "string"
            },
            label: {
              type: "string"
            }
          },
          required: ["value"]
        }
      },
      default: [],
      control: { type: "SelectOptions" }
    },
    value: {
      helperText: "The currently selected value.",
      type: "string",
      default: "",
      onChangeProp: "onChange",
      defaultValueProp: "defaultValue"
    },
    defaultValue: {
      helperText: "A default value.",
      type: "string",
      default: ""
    },
    label: {
      helperText: 'A label that describes the option that can be selected, for example "Country".',
      type: "string",
      default: ""
    },
    variant: {
      helperText: "One of the available Material\xA0UI TextField [variants](https://mui.com/material-ui/react-button/#basic-button). Possible values are `outlined`, `filled` or `standard`",
      type: "string",
      enum: ["outlined", "filled", "standard"],
      default: "outlined"
    },
    size: {
      helperText: "The size of the select. One of `small`, or `medium`.",
      type: "string",
      enum: ["small", "medium"],
      default: "small"
    },
    fullWidth: {
      helperText: "Whether the select should occupy all available horizontal space.",
      type: "boolean"
    },
    disabled: {
      helperText: "Whether the select is disabled.",
      type: "boolean"
    },
    ...FORM_INPUT_ARG_TYPES,
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    }
  }
});

export {
  Select_default
};
//# sourceMappingURL=chunk-2V3CAZO7.js.map