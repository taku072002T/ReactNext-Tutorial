import {
  ErrorOverlay_default
} from "./chunk-LHQVOIUN.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";
import {
  createBuiltin
} from "./chunk-5BNQEU2R.js";

// src/Chart.tsx
import * as React from "react";
import { CircularProgress, styled } from "@mui/material";
import {
  BarPlot,
  LinePlot,
  AreaPlot,
  ScatterPlot,
  MarkPlot
} from "@mui/x-charts";
import { ResponsiveChartContainer } from "@mui/x-charts/ResponsiveChartContainer";
import { ChartsXAxis } from "@mui/x-charts/ChartsXAxis";
import { ChartsYAxis } from "@mui/x-charts/ChartsYAxis";
import { ChartsLegend } from "@mui/x-charts/ChartsLegend";
import { ChartsTooltip } from "@mui/x-charts/ChartsTooltip";
import { ChartsAxisHighlight } from "@mui/x-charts/ChartsAxisHighlight";
import { errorFrom } from "@toolpad/utils/errors";
var ChartRoot = styled("div")({
  position: "relative",
  height: "100%",
  width: "100%"
});
var CHART_DATA_SERIES_KINDS = ["line", "bar", "area", "scatter"];
function hasOnlyNumbers(array) {
  return array.every((item) => typeof item === "number");
}
function getChartType(kind) {
  switch (kind) {
    case "bar":
      return "bar";
    case "scatter":
      return "scatter";
    default:
      return "line";
  }
}
function Chart({ data = [], loading, error, sx }) {
  const hasData = data.length > 0 && data.some((dataSeries) => dataSeries.data ? dataSeries.data.length > 0 : false);
  const xValues = React.useMemo(
    () => data.flatMap((dataSeries) => {
      if (!dataSeries.xKey || !dataSeries.data) {
        return [];
      }
      return dataSeries.data.map((dataSeriesPoint) => dataSeriesPoint[dataSeries.xKey]);
    }).filter((value, index, array) => value !== void 0 && array.indexOf(value) === index).sort((a, b) => {
      if (typeof a === "number" && typeof b === "number") {
        return a - b;
      }
      return 0;
    }),
    [data]
  );
  const chartSeries = React.useMemo(
    () => data.filter((dataSeries) => dataSeries.xKey && dataSeries.yKey).map((dataSeries) => {
      const yValues = xValues.map((xValue) => {
        const point = (dataSeries.data || []).find(
          (dataSeriesPoint) => dataSeriesPoint[dataSeries.xKey] === xValue
        );
        return point && point[dataSeries.yKey] || 0;
      });
      const chartType = getChartType(dataSeries.kind);
      const baseProps = {
        type: chartType,
        xAxisKey: "x",
        yAxisKey: dataSeries.yKey,
        label: dataSeries.label,
        color: dataSeries.color
      };
      if (chartType === "scatter") {
        return {
          ...baseProps,
          data: yValues.map((y, index) => ({
            x: xValues[index],
            y,
            id: `${dataSeries.yKey}-${index}`
          }))
        };
      }
      if (chartType === "line") {
        return {
          ...baseProps,
          data: yValues,
          area: dataSeries.kind === "area"
        };
      }
      return {
        ...baseProps,
        data: yValues
      };
    }).filter((dataSeries) => dataSeries.data && dataSeries.data.length > 0),
    [data, xValues]
  );
  const displayError = error ? errorFrom(error) : null;
  const isDataVisible = !loading && !displayError;
  const hasBarCharts = chartSeries.some(
    (dataSeries) => dataSeries.type === "bar" && dataSeries.data && hasOnlyNumbers(dataSeries.data)
  );
  const hasLineCharts = chartSeries.some(
    (dataSeries) => dataSeries.type === "line" && dataSeries.data && hasOnlyNumbers(dataSeries.data)
  );
  const hasAreaCharts = chartSeries.some(
    (dataSeries) => dataSeries.type === "line" && dataSeries.data && hasOnlyNumbers(dataSeries.data) && dataSeries.area
  );
  const hasScatterCharts = chartSeries.some(
    (dataSeries) => dataSeries.type === "scatter" && dataSeries.data && hasOnlyNumbers(dataSeries.data.map((point) => point.x)) && hasOnlyNumbers(dataSeries.data.map((point) => point.y))
  );
  const hasOnlyNumberXValues = hasOnlyNumbers(xValues);
  let xScaleType = "point";
  if (hasBarCharts) {
    xScaleType = "band";
  }
  const firstDataSeries = chartSeries[0];
  return /* @__PURE__ */ React.createElement(ChartRoot, { sx, "aria-busy": loading }, displayError ? /* @__PURE__ */ React.createElement(ErrorOverlay_default, { error: displayError }) : null, loading && !error ? /* @__PURE__ */ React.createElement(
    "div",
    {
      style: {
        position: "absolute",
        inset: "0 0 0 0",
        display: "flex",
        justifyContent: "center",
        alignItems: "center"
      }
    },
    /* @__PURE__ */ React.createElement(CircularProgress, null)
  ) : null, isDataVisible ? /* @__PURE__ */ React.createElement(
    ResponsiveChartContainer,
    {
      series: chartSeries,
      xAxis: [
        {
          id: "x",
          data: xValues,
          scaleType: xScaleType,
          min: hasOnlyNumberXValues ? Math.min(...xValues) : void 0,
          max: hasOnlyNumberXValues ? Math.max(...xValues) : void 0
        }
      ],
      yAxis: firstDataSeries ? chartSeries.map((dataSeries) => ({
        id: dataSeries?.yAxisKey || "y",
        scaleType: "linear"
      })) : [
        {
          id: "y",
          scaleType: "linear"
        }
      ],
      margin: { left: 80, top: 60 },
      sx: {
        ".MuiMarkElement-root": {
          scale: "0.8"
        }
      }
    },
    /* @__PURE__ */ React.createElement(ChartsXAxis, { position: "bottom", axisId: "x" }),
    /* @__PURE__ */ React.createElement(
      ChartsYAxis,
      {
        key: firstDataSeries?.yAxisKey || "y",
        position: "left",
        axisId: firstDataSeries?.yAxisKey || "y"
      }
    ),
    hasBarCharts ? /* @__PURE__ */ React.createElement(BarPlot, null) : null,
    hasAreaCharts ? /* @__PURE__ */ React.createElement(AreaPlot, null) : null,
    hasLineCharts ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(LinePlot, null), /* @__PURE__ */ React.createElement(MarkPlot, null)) : null,
    hasScatterCharts ? /* @__PURE__ */ React.createElement(ScatterPlot, null) : null,
    hasData ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ChartsLegend, null), /* @__PURE__ */ React.createElement(ChartsTooltip, null), /* @__PURE__ */ React.createElement(ChartsAxisHighlight, { x: hasBarCharts ? "band" : "line" })) : null
  ) : null);
}
var Chart_default = createBuiltin(Chart, {
  helperText: "A chart component.",
  loadingProp: "loading",
  loadingPropSource: ["data"],
  errorProp: "error",
  defaultLayoutHeight: 360,
  minimumLayoutHeight: 100,
  argTypes: {
    data: {
      helperText: "The data to be displayed.",
      type: "array",
      schema: {
        type: "array",
        items: {
          type: "object",
          properties: {
            kind: {
              type: "string",
              enum: CHART_DATA_SERIES_KINDS,
              default: "line"
            },
            label: {
              type: "string"
            },
            data: {
              type: "object",
              default: []
            },
            xKey: {
              type: "string"
            },
            yKey: {
              type: "string"
            },
            color: {
              type: "string"
            }
          }
        }
      },
      control: { type: "ChartData", bindable: false }
    },
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    }
  }
});

export {
  CHART_DATA_SERIES_KINDS,
  Chart_default
};
//# sourceMappingURL=chunk-QGXCGIPY.js.map