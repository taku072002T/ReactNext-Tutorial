{"version":3,"sources":["../src/Form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Box, BoxProps, Stack, styled } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { useNode } from '@toolpad/studio-runtime';\nimport { equalProperties } from '@toolpad/utils/collections';\nimport {\n  useForm,\n  FieldValues,\n  ValidationMode,\n  FieldError,\n  Controller,\n  useController,\n} from 'react-hook-form';\nimport { SX_PROP_HELPER_TEXT } from './constants';\nimport createBuiltin, { BuiltinArgTypeDefinitions } from './createBuiltin';\n\nconst FormRoot = styled('div')({\n  width: '100%',\n});\n\nexport const FormContext = React.createContext<{\n  form: ReturnType<typeof useForm> | null;\n  fieldValues: FieldValues;\n}>({\n  form: null,\n  fieldValues: {},\n});\n\ninterface FormProps extends BoxProps {\n  value: FieldValues;\n  onChange: (newValue: FieldValues) => void;\n  onSubmit?: (data?: FieldValues) => unknown | Promise<unknown>;\n  formControlsAlign?: BoxProps['justifyContent'];\n  formControlsFullWidth?: boolean;\n  submitButtonText?: string;\n  hasResetButton?: boolean;\n  mode?: keyof ValidationMode | undefined;\n  hasChrome?: boolean;\n}\n\nfunction Form({\n  children,\n  value,\n  onChange,\n  onSubmit = () => {},\n  hasResetButton = false,\n  formControlsAlign = 'end',\n  formControlsFullWidth,\n  submitButtonText = 'Submit',\n  mode = 'onSubmit',\n  hasChrome = true,\n  sx,\n}: FormProps) {\n  const form = useForm({ mode });\n  const { isSubmitSuccessful } = form.formState;\n\n  const handleSubmit = React.useCallback(async () => {\n    await onSubmit();\n  }, [onSubmit]);\n\n  // Reset form in effect as suggested in https://react-hook-form.com/api/useform/reset/\n  React.useEffect(() => {\n    form.reset();\n  }, [form, isSubmitSuccessful]);\n\n  // Set initial form values\n  React.useEffect(() => {\n    onChange(form.getValues());\n  }, [form, onChange]);\n\n  React.useEffect(() => {\n    const formSubscription = form.watch((newValue) => {\n      onChange(newValue);\n    });\n    return () => formSubscription.unsubscribe();\n  }, [form, onChange]);\n\n  const handleReset = React.useCallback(() => {\n    form.reset();\n  }, [form]);\n\n  const formContextValue = React.useMemo(() => ({ form, fieldValues: value }), [form, value]);\n\n  return (\n    <FormContext.Provider value={formContextValue}>\n      {hasChrome ? (\n        <FormRoot sx={sx}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} onReset={handleReset}>\n            {children}\n\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: formControlsAlign,\n                pt: 1,\n              }}\n            >\n              <Stack\n                direction=\"row\"\n                spacing={1}\n                sx={{ flex: formControlsFullWidth ? 1 : '0 1 auto' }}\n              >\n                {hasResetButton ? (\n                  <LoadingButton\n                    type=\"reset\"\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    sx={{ flex: formControlsFullWidth ? 1 : '0 1 auto' }}\n                  >\n                    Reset\n                  </LoadingButton>\n                ) : null}\n                <LoadingButton\n                  type=\"submit\"\n                  color=\"primary\"\n                  variant=\"contained\"\n                  loading={form.formState.isSubmitting}\n                  sx={{ flex: formControlsFullWidth ? 1 : '0 1 auto' }}\n                >\n                  {submitButtonText}\n                </LoadingButton>\n              </Stack>\n            </Box>\n          </form>\n        </FormRoot>\n      ) : (\n        children\n      )}\n    </FormContext.Provider>\n  );\n}\n\nexport default createBuiltin(Form, {\n  helperText: 'A form component.',\n  argTypes: {\n    children: {\n      helperText: 'The form content.',\n      type: 'element',\n      control: { type: 'layoutSlot' },\n    },\n    value: {\n      helperText: 'The value that is controlled by this form.',\n      type: 'object',\n      default: {},\n      onChangeProp: 'onChange',\n    },\n    onSubmit: {\n      helperText: 'Add logic to be executed when the user submits the form.',\n      type: 'event',\n    },\n    formControlsAlign: {\n      helperText: 'Form controls alignment.',\n      type: 'string',\n      enum: ['start', 'center', 'end'],\n      default: 'end',\n      label: 'Form controls alignment',\n      control: { type: 'HorizontalAlign' },\n    },\n    formControlsFullWidth: {\n      helperText: 'Whether the form controls should occupy all available horizontal space.',\n      type: 'boolean',\n      default: false,\n    },\n    submitButtonText: {\n      helperText: 'Submit button text.',\n      type: 'string',\n      default: 'Submit',\n    },\n    hasResetButton: {\n      helperText: 'Show button to reset form values.',\n      type: 'boolean',\n      default: false,\n    },\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n  },\n});\n\nexport interface FormInputComponentProps {\n  name: string;\n  isRequired: boolean;\n  minLength: number;\n  maxLength: number;\n}\n\ninterface UseFormInputInput<V> {\n  name: string;\n  label?: string;\n  value?: V;\n  onChange?: (newValue: V) => void;\n  emptyValue?: V;\n  defaultValue?: V;\n  validationProps: Partial<Pick<FormInputComponentProps, 'isRequired' | 'minLength' | 'maxLength'>>;\n}\n\ninterface UseFormInputPayload<V> {\n  onFormInputChange: (newValue: V) => void;\n  formInputError?: FieldError;\n  renderFormInput: (element: JSX.Element) => JSX.Element;\n}\n\nexport function useFormInput<V>({\n  name,\n  label,\n  value,\n  onChange,\n  emptyValue,\n  defaultValue,\n  validationProps,\n}: UseFormInputInput<V>): UseFormInputPayload<V> {\n  const { isRequired, minLength, maxLength } = validationProps;\n\n  const { form, fieldValues } = React.useContext(FormContext);\n\n  const nodeRuntime = useNode();\n  const fieldName = name || nodeRuntime?.nodeName;\n  const fallbackName = React.useId();\n\n  const formInputName = fieldName || fallbackName;\n\n  const formInputDisplayName = label || name || 'Field';\n\n  const { fieldState } = useController({\n    disabled: !form,\n    name: formInputName,\n    control: form?.control,\n  });\n\n  const formInputError = formInputName ? fieldState.error : undefined;\n\n  const previousDefaultValueRef = React.useRef(defaultValue);\n  React.useEffect(() => {\n    if (form && defaultValue !== previousDefaultValueRef.current) {\n      onChange?.(defaultValue as V);\n      form.setValue(formInputName, defaultValue);\n      previousDefaultValueRef.current = defaultValue;\n    }\n  }, [form, onChange, defaultValue, formInputName]);\n\n  const isInitialForm = Object.keys(fieldValues).length === 0;\n\n  React.useEffect(() => {\n    if (form) {\n      if (!fieldValues[formInputName] && defaultValue && isInitialForm) {\n        onChange?.((defaultValue || emptyValue) as V);\n        form.setValue(formInputName, defaultValue || emptyValue);\n      } else if (value !== fieldValues[formInputName]) {\n        onChange?.(fieldValues[formInputName] || emptyValue);\n      }\n    }\n  }, [defaultValue, emptyValue, fieldValues, form, isInitialForm, formInputName, onChange, value]);\n\n  const previousFormInputNameRef = React.useRef<typeof formInputName>(formInputName);\n  React.useEffect(() => {\n    const previousFormInputName = previousFormInputNameRef.current;\n\n    if (form && previousFormInputName !== formInputName) {\n      form.unregister(previousFormInputName);\n      previousFormInputNameRef.current = formInputName;\n    }\n  }, [form, formInputName]);\n\n  const previousManualValidationPropsRef = React.useRef(validationProps);\n  React.useEffect(() => {\n    if (\n      form &&\n      !equalProperties(validationProps, previousManualValidationPropsRef.current) &&\n      fieldState.isDirty\n    ) {\n      form.trigger(formInputName);\n      previousManualValidationPropsRef.current = validationProps;\n    }\n  }, [fieldState.isDirty, form, formInputName, validationProps]);\n\n  const handleFormInputChange = React.useCallback(\n    (newValue: V) => {\n      if (form) {\n        form.setValue(formInputName, newValue, {\n          shouldValidate: true,\n          shouldDirty: true,\n          shouldTouch: true,\n        });\n      }\n      onChange?.(newValue);\n    },\n    [form, formInputName, onChange],\n  );\n\n  const renderFormInput = React.useCallback(\n    (element: JSX.Element) =>\n      form ? (\n        <Controller\n          name={formInputName}\n          control={form.control}\n          rules={{\n            required: isRequired ? `${formInputDisplayName} is required.` : false,\n            ...(minLength && {\n              minLength: {\n                value: minLength,\n                message: `${formInputDisplayName} must have at least ${minLength} characters.`,\n              },\n            }),\n            ...(maxLength && {\n              maxLength: {\n                value: maxLength,\n                message: `${formInputDisplayName} must have no more than ${maxLength} characters.`,\n              },\n            }),\n          }}\n          render={() => element}\n        />\n      ) : (\n        element\n      ),\n    [form, formInputDisplayName, formInputName, isRequired, maxLength, minLength],\n  );\n\n  return {\n    onFormInputChange: handleFormInputChange,\n    formInputError,\n    renderFormInput,\n  };\n}\n\nexport function withComponentForm<P extends Record<string, any>>(\n  InputComponent: React.ComponentType<P>,\n) {\n  return function ComponentWithForm(props: P) {\n    const { form } = React.useContext(FormContext);\n\n    const [componentFormValue, setComponentFormValue] = React.useState({});\n\n    const inputElement = <InputComponent {...props} />;\n\n    return form ? (\n      inputElement\n    ) : (\n      <Form\n        value={componentFormValue}\n        onChange={setComponentFormValue}\n        mode=\"onBlur\"\n        hasChrome={false}\n      >\n        {inputElement}\n      </Form>\n    );\n  };\n}\n\nexport const FORM_INPUT_ARG_TYPES: BuiltinArgTypeDefinitions<\n  Pick<FormInputComponentProps, 'name' | 'isRequired'>\n> = {\n  name: {\n    helperText: 'Name of this input. Used as a reference in form data.',\n    type: 'string',\n  },\n  isRequired: {\n    label: 'Required',\n    helperText: 'Whether the input is required to have a value.',\n    type: 'boolean',\n    default: false,\n    category: 'validation',\n  },\n};\n\nexport const FORM_TEXT_INPUT_ARG_TYPES: BuiltinArgTypeDefinitions<\n  Pick<FormInputComponentProps, 'minLength' | 'maxLength'>\n> = {\n  minLength: {\n    helperText: 'Minimum value length.',\n    type: 'number',\n    minimum: 0,\n    maximum: 512,\n    default: 0,\n    category: 'validation',\n  },\n  maxLength: {\n    helperText: 'Maximum value length.',\n    type: 'number',\n    minimum: 0,\n    maximum: 512,\n    default: 0,\n    category: 'validation',\n  },\n};\n"],"mappings":"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","names":[]}