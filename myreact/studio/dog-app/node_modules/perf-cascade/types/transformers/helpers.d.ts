/** Helpers that are not file-format specific */
import type { Chunk } from "har-format";
import type { RequestType, SafeKvTuple } from "../typing/waterfall";
import type { Icon, KvTuple, TimingType, WaterfallEntry, WaterfallEntryTab, WaterfallEntryTiming, WaterfallResponseDetails } from "../typing/waterfall";
/**
 * Converts `dlKeyValues` to the contennd a definition list, without the outer `<dl>` tags
 * @param {SafeKvTuple[]} dlKeyValues array of Key/Value pair
 * @param {boolean} [addClass=false] if `true` the key in `dlKeyValues`
 * is converted to a class name andd added to the `<dt>`
 * @returns {string} stringified HTML definition list
 */
export declare function makeDefinitionList(dlKeyValues: SafeKvTuple[], addClass?: boolean): string;
/**
 * Convert a MIME type into it's WPT style request type (font, script etc)
 * @param {string} mimeType - a HTTP headers mime-type
 */
export declare function mimeToRequestType(mimeType: string): RequestType;
/** helper to create a `WaterfallEntry` */
export declare function createWaterfallEntry(url: string, start: number, end: number, segments: WaterfallEntryTiming[], responseDetails: WaterfallResponseDetails, tabs: WaterfallEntryTab[]): WaterfallEntry;
/** helper to create a `WaterfallEntryTiming` */
export declare function createWaterfallEntryTiming(type: TimingType, start: number, end: number, chunks?: Chunk[]): WaterfallEntryTiming;
/**
 * Creates the css classes for a row based on it's status code
 * @param  {number} status - HTTP status code
 * @param  {string} renderBlockingStatus - Render blocking status (Chrome only)
 * @param  {boolean} largestContentfulPaintStatus -if largest contentful paint
 * @returns string - concatinated css class names
 */
export declare function makeRowCssClasses(status: number, renderBlockingStatus: string, largestContentfulPaintStatus: boolean): string;
/**
 * Create icon that fits the response and highlights issues
 *
 * @param  {number} status - HTTP status code
 * @param  {string} statusText - HTTP status text
 * @param  {RequestType} requestType
 * @param  {string=""} redirectURL - pass the URL for `301` or `302`
 * @returns Icon
 */
export declare function makeMimeTypeIcon(status: number, statusText: string, requestType: RequestType, redirectURL?: string): Icon;
/**
 * Flattens out a second level of `KvTuple` nesting (and removed empty and `undefined` entries)
 *
 * @param nestedKvPairs - nested `KvTuple`s (possibly sub-nested)
 */
export declare const flattenKvTuple: (nestedKvPairs: (KvTuple | KvTuple[])[]) => KvTuple[];
