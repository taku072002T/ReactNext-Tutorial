/**
 * Adds class `className` to `el`
 * @param  {Element} el
 * @param  {string} className
 */
export function addClass(el, className) {
    const classList = el.classList;
    if (classList) {
        className.split(" ").forEach((c) => classList.add(c));
    }
    else {
        // IE doesn't support classList in SVG - also no need for duplication check i.t.m.
        el.setAttribute("class", el.getAttribute("class") + " " + className);
    }
    return el;
}
/**
 * Removes class `className` from `el`
 * @param  {Element} el
 * @param  {string} className
 */
export function removeClass(el, className) {
    const classList = el.classList;
    if (classList) {
        classList.remove(className);
    }
    else {
        // IE doesn't support classList in SVG
        el.setAttribute("class", (el.getAttribute("class") || "")
            .replace(new RegExp("(\\s|^)" + className + "(\\s|$)", "g"), "$2"));
    }
    return el;
}
/**
 * Helper to recursively find parent with the `className` class
 * @param base `Element` to start from
 * @param className class that the parent should have
 */
export function getParentByClassName(base, className) {
    if (typeof base.closest === "function") {
        return base.closest(`.${className}`);
    }
    while (base) {
        if (base.classList.contains(className)) {
            return base;
        }
        base = base.parentElement;
    }
    return null;
}
/**
 * Removes all child DOM nodes from `el`
 * @param  {Element} el
 */
export function removeChildren(el) {
    while (el.hasChildNodes()) {
        el.removeChild(el.lastChild);
    }
    return el;
}
/**
 * Get last element of `NodeList`
 * @param list NodeListOf e.g. return value of `getElementsByClassName`
 */
export function getLastItemOfNodeList(list) {
    if (!list || list.length === 0) {
        return undefined;
    }
    return list.item(list.length - 1);
}
/** Calls `fn` with each element of `els` */
export function forEachNodeList(els, fn) {
    Array.prototype.forEach.call(els, fn);
}
/** Sets a CSS style property, but only if property exists on `el` */
export function safeSetStyle(el, property, value) {
    if (property in el.style) {
        el.style[property] = value;
    }
    else {
        // tslint:disable-next-line:no-console
        console.warn(new Error(`Trying to set non-existing style ` +
            `${property} = ${value} on a <${el.tagName.toLowerCase()}>.`));
    }
}
/** Sets an attribute, but only if `name` exists on `el` */
export function safeSetAttribute(el, name, value) {
    if (!(name in el)) {
        // tslint:disable-next-line:no-console
        console.warn(new Error(`Trying to set non-existing attribute ` +
            `${name} = ${value} on a <${el.tagName.toLowerCase()}>.`));
    }
    el.setAttributeNS("", name, value);
}
/** Sets multiple CSS style properties, but only if property exists on `el` */
export function safeSetStyles(el, css) {
    Object.keys(css).forEach((property) => {
        safeSetStyle(el, property, css[property].toString());
    });
}
/** Sets attributes, but only if they exist on `el` */
export function safeSetAttributes(el, attributes) {
    Object.keys(attributes).forEach((name) => {
        safeSetAttribute(el, name, attributes[name].toString());
    });
}
export function makeHtmlEl() {
    const html = document.createElement("html");
    html.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/xmlns/");
    return html;
}
export function makeBodyEl(css = {}, innerHTML = "") {
    const body = document.createElement("body");
    body.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
    safeSetStyles(body, css);
    body.innerHTML = innerHTML;
    return body;
}
