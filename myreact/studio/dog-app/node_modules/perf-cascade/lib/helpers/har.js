/** Partial function that buils a filter predicate function */
const matchHeaderPartialFn = (lowercaseName) => {
    return (header) => header.name.toLowerCase() === lowercaseName;
};
/**
 * @param headers List of `Header` to search in
 * @param headerName Name of `Header` to find
 */
export function hasHeader(headers, headerName) {
    const headerFilter = matchHeaderPartialFn(headerName.toLowerCase());
    return headers.some(headerFilter);
}
/** feature detection if browser supports `find` for arrays */
const browserHasFind = !!Array.prototype["find"];
/**
 * Returns the fist instances of `headerName` in `headers`
 * @param headers List of `Header` to search in
 * @param headerName Name of `Header` to find
 */
export function getHeader(headers, headerName) {
    const headerFilter = matchHeaderPartialFn(headerName.toLowerCase());
    let firstItem;
    if (browserHasFind) {
        firstItem = headers["find"](headerFilter);
    }
    else {
        firstItem = headers.map(headerFilter).pop();
    }
    return firstItem ? firstItem.value : undefined;
}
/**
 * Returns all instances of `headerName` in `headers` as `KvTuple`
 * @param headers List of `Header` to search in
 * @param headerName Name of `Header` to find
 */
export function getHeaders(headers, headerName) {
    const headerFilter = matchHeaderPartialFn(headerName.toLowerCase());
    return headers.filter(headerFilter).map((h) => [headerName, h.value]);
}
